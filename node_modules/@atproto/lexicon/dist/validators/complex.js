"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = validate;
exports.array = array;
exports.object = object;
exports.validateOneOf = validateOneOf;
const types_1 = require("../types");
const util_1 = require("../util");
const blob_1 = require("./blob");
const primitives_1 = require("./primitives");
function validate(lexicons, path, def, value) {
    switch (def.type) {
        case 'boolean':
            return (0, primitives_1.boolean)(lexicons, path, def, value);
        case 'integer':
            return (0, primitives_1.integer)(lexicons, path, def, value);
        case 'string':
            return (0, primitives_1.string)(lexicons, path, def, value);
        case 'bytes':
            return (0, primitives_1.bytes)(lexicons, path, def, value);
        case 'cid-link':
            return (0, primitives_1.cidLink)(lexicons, path, def, value);
        case 'unknown':
            return (0, primitives_1.unknown)(lexicons, path, def, value);
        case 'object':
            return object(lexicons, path, def, value);
        case 'array':
            return array(lexicons, path, def, value);
        case 'blob':
            return (0, blob_1.blob)(lexicons, path, def, value);
        default:
            return {
                success: false,
                error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`),
            };
    }
}
function array(lexicons, path, def, value) {
    // type
    if (!Array.isArray(value)) {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an array`),
        };
    }
    // maxLength
    if (typeof def.maxLength === 'number') {
        if (value.length > def.maxLength) {
            return {
                success: false,
                error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`),
            };
        }
    }
    // minLength
    if (typeof def.minLength === 'number') {
        if (value.length < def.minLength) {
            return {
                success: false,
                error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`),
            };
        }
    }
    // items
    const itemsDef = def.items;
    for (let i = 0; i < value.length; i++) {
        const itemValue = value[i];
        const itemPath = `${path}/${i}`;
        const res = validateOneOf(lexicons, itemPath, itemsDef, itemValue);
        if (!res.success) {
            return res;
        }
    }
    return { success: true, value };
}
function object(lexicons, path, def, value) {
    def = def;
    // type
    if (!value || typeof value !== 'object') {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object`),
        };
    }
    const requiredProps = new Set(def.required);
    const nullableProps = new Set(def.nullable);
    // properties
    let resultValue = value;
    if (typeof def.properties === 'object') {
        for (const key in def.properties) {
            if (value[key] === null && nullableProps.has(key)) {
                continue;
            }
            const propDef = def.properties[key];
            if (typeof value[key] === 'undefined' && !requiredProps.has(key)) {
                // Fast path for non-required undefined props.
                if (propDef.type === 'integer' ||
                    propDef.type === 'boolean' ||
                    propDef.type === 'string') {
                    if (typeof propDef.default === 'undefined') {
                        continue;
                    }
                }
                else {
                    // Other types have no defaults.
                    continue;
                }
            }
            const propPath = `${path}/${key}`;
            const validated = validateOneOf(lexicons, propPath, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === 'undefined';
            // Return error for bad validation, giving required rule precedence
            if (propIsUndefined && requiredProps.has(key)) {
                return {
                    success: false,
                    error: new types_1.ValidationError(`${path} must have the property "${key}"`),
                };
            }
            else if (!propIsUndefined && !validated.success) {
                return validated;
            }
            // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
            if (propValue !== value[key]) {
                if (resultValue === value) {
                    // Lazy shallow clone
                    resultValue = { ...value };
                }
                resultValue[key] = propValue;
            }
        }
    }
    return { success: true, value: resultValue };
}
function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
    let error;
    let concreteDefs;
    if (def.type === 'union') {
        if (!(0, types_1.isDiscriminatedObject)(value)) {
            return {
                success: false,
                error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`),
            };
        }
        if (!refsContainType(def.refs, value.$type)) {
            if (def.closed) {
                return {
                    success: false,
                    error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(', ')}`),
                };
            }
            return { success: true, value };
        }
        else {
            concreteDefs = (0, util_1.toConcreteTypes)(lexicons, {
                type: 'ref',
                ref: value.$type,
            });
        }
    }
    else {
        concreteDefs = (0, util_1.toConcreteTypes)(lexicons, def);
    }
    for (const concreteDef of concreteDefs) {
        const result = mustBeObj
            ? object(lexicons, path, concreteDef, value)
            : validate(lexicons, path, concreteDef, value);
        if (result.success) {
            return result;
        }
        error ?? (error = result.error);
    }
    if (concreteDefs.length > 1) {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} did not match any of the expected definitions`),
        };
    }
    return { success: false, error };
}
// to avoid bugs like #0189 this needs to handle both
// explicit and implicit #main
const refsContainType = (refs, type) => {
    const lexUri = (0, util_1.toLexUri)(type);
    if (refs.includes(lexUri)) {
        return true;
    }
    if (lexUri.endsWith('#main')) {
        return refs.includes(lexUri.replace('#main', ''));
    }
    else {
        return refs.includes(lexUri + '#main');
    }
};
//# sourceMappingURL=complex.js.map