import $a, { useState as as, useEffect as $u } from "react";
import fm from "react-dom";
var L = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Yc(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var r = function n() {
      return this instanceof n ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    r.prototype = e.prototype;
  } else r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(t).forEach(function(n) {
    var s = Object.getOwnPropertyDescriptor(t, n);
    Object.defineProperty(r, n, s.get ? s : {
      enumerable: !0,
      get: function() {
        return t[n];
      }
    });
  }), r;
}
var Ka = { exports: {} }, yn = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var qu;
function ym() {
  if (qu) return yn;
  qu = 1;
  var t = $a, e = Symbol.for("react.element"), r = Symbol.for("react.fragment"), n = Object.prototype.hasOwnProperty, s = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, u = { key: !0, ref: !0, __self: !0, __source: !0 };
  function c(l, f, p) {
    var m, A = {}, E = null, v = null;
    p !== void 0 && (E = "" + p), f.key !== void 0 && (E = "" + f.key), f.ref !== void 0 && (v = f.ref);
    for (m in f) n.call(f, m) && !u.hasOwnProperty(m) && (A[m] = f[m]);
    if (l && l.defaultProps) for (m in f = l.defaultProps, f) A[m] === void 0 && (A[m] = f[m]);
    return { $$typeof: e, type: l, key: E, ref: v, props: A, _owner: s.current };
  }
  return yn.Fragment = r, yn.jsx = c, yn.jsxs = c, yn;
}
var mn = {}, Gu;
function mm() {
  if (Gu) return mn;
  Gu = 1;
  var t = {};
  /**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  return t.NODE_ENV !== "production" && function() {
    var e = $a, r = Symbol.for("react.element"), n = Symbol.for("react.portal"), s = Symbol.for("react.fragment"), u = Symbol.for("react.strict_mode"), c = Symbol.for("react.profiler"), l = Symbol.for("react.provider"), f = Symbol.for("react.context"), p = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), A = Symbol.for("react.suspense_list"), E = Symbol.for("react.memo"), v = Symbol.for("react.lazy"), k = Symbol.for("react.offscreen"), P = Symbol.iterator, $ = "@@iterator";
    function C(R) {
      if (R === null || typeof R != "object")
        return null;
      var B = P && R[P] || R[$];
      return typeof B == "function" ? B : null;
    }
    var T = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function w(R) {
      {
        for (var B = arguments.length, j = new Array(B > 1 ? B - 1 : 0), Z = 1; Z < B; Z++)
          j[Z - 1] = arguments[Z];
        K("error", R, j);
      }
    }
    function K(R, B, j) {
      {
        var Z = T.ReactDebugCurrentFrame, ne = Z.getStackAddendum();
        ne !== "" && (B += "%s", j = j.concat([ne]));
        var se = j.map(function(Y) {
          return String(Y);
        });
        se.unshift("Warning: " + B), Function.prototype.apply.call(console[R], console, se);
      }
    }
    var re = !1, ie = !1, oe = !1, Ge = !1, Yt = !1, ln;
    ln = Symbol.for("react.module.reference");
    function da(R) {
      return !!(typeof R == "string" || typeof R == "function" || R === s || R === c || Yt || R === u || R === m || R === A || Ge || R === k || re || ie || oe || typeof R == "object" && R !== null && (R.$$typeof === v || R.$$typeof === E || R.$$typeof === l || R.$$typeof === f || R.$$typeof === p || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      R.$$typeof === ln || R.getModuleId !== void 0));
    }
    function Hn(R, B, j) {
      var Z = R.displayName;
      if (Z)
        return Z;
      var ne = B.displayName || B.name || "";
      return ne !== "" ? j + "(" + ne + ")" : j;
    }
    function Wn(R) {
      return R.displayName || "Context";
    }
    function ze(R) {
      if (R == null)
        return null;
      if (typeof R.tag == "number" && w("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof R == "function")
        return R.displayName || R.name || null;
      if (typeof R == "string")
        return R;
      switch (R) {
        case s:
          return "Fragment";
        case n:
          return "Portal";
        case c:
          return "Profiler";
        case u:
          return "StrictMode";
        case m:
          return "Suspense";
        case A:
          return "SuspenseList";
      }
      if (typeof R == "object")
        switch (R.$$typeof) {
          case f:
            var B = R;
            return Wn(B) + ".Consumer";
          case l:
            var j = R;
            return Wn(j._context) + ".Provider";
          case p:
            return Hn(R, R.render, "ForwardRef");
          case E:
            var Z = R.displayName || null;
            return Z !== null ? Z : ze(R.type) || "Memo";
          case v: {
            var ne = R, se = ne._payload, Y = ne._init;
            try {
              return ze(Y(se));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var It = Object.assign, xe = 0, Jn, ot, lt, er, bt, Or, tr;
    function rr() {
    }
    rr.__reactDisabledLog = !0;
    function ir() {
      {
        if (xe === 0) {
          Jn = console.log, ot = console.info, lt = console.warn, er = console.error, bt = console.group, Or = console.groupCollapsed, tr = console.groupEnd;
          var R = {
            configurable: !0,
            enumerable: !0,
            value: rr,
            writable: !0
          };
          Object.defineProperties(console, {
            info: R,
            log: R,
            warn: R,
            error: R,
            group: R,
            groupCollapsed: R,
            groupEnd: R
          });
        }
        xe++;
      }
    }
    function Nt() {
      {
        if (xe--, xe === 0) {
          var R = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: It({}, R, {
              value: Jn
            }),
            info: It({}, R, {
              value: ot
            }),
            warn: It({}, R, {
              value: lt
            }),
            error: It({}, R, {
              value: er
            }),
            group: It({}, R, {
              value: bt
            }),
            groupCollapsed: It({}, R, {
              value: Or
            }),
            groupEnd: It({}, R, {
              value: tr
            })
          });
        }
        xe < 0 && w("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var Fe = T.ReactCurrentDispatcher, nr;
    function _e(R, B, j) {
      {
        if (nr === void 0)
          try {
            throw Error();
          } catch (ne) {
            var Z = ne.stack.trim().match(/\n( *(at )?)/);
            nr = Z && Z[1] || "";
          }
        return `
` + nr + R;
      }
    }
    var ht = !1, le;
    {
      var Ir = typeof WeakMap == "function" ? WeakMap : Map;
      le = new Ir();
    }
    function Ze(R, B) {
      if (!R || ht)
        return "";
      {
        var j = le.get(R);
        if (j !== void 0)
          return j;
      }
      var Z;
      ht = !0;
      var ne = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var se;
      se = Fe.current, Fe.current = null, ir();
      try {
        if (B) {
          var Y = function() {
            throw Error();
          };
          if (Object.defineProperty(Y.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(Y, []);
            } catch (we) {
              Z = we;
            }
            Reflect.construct(R, [], Y);
          } else {
            try {
              Y.call();
            } catch (we) {
              Z = we;
            }
            R.call(Y.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (we) {
            Z = we;
          }
          R();
        }
      } catch (we) {
        if (we && Z && typeof we.stack == "string") {
          for (var J = we.stack.split(`
`), Ae = Z.stack.split(`
`), fe = J.length - 1, ye = Ae.length - 1; fe >= 1 && ye >= 0 && J[fe] !== Ae[ye]; )
            ye--;
          for (; fe >= 1 && ye >= 0; fe--, ye--)
            if (J[fe] !== Ae[ye]) {
              if (fe !== 1 || ye !== 1)
                do
                  if (fe--, ye--, ye < 0 || J[fe] !== Ae[ye]) {
                    var Ve = `
` + J[fe].replace(" at new ", " at ");
                    return R.displayName && Ve.includes("<anonymous>") && (Ve = Ve.replace("<anonymous>", R.displayName)), typeof R == "function" && le.set(R, Ve), Ve;
                  }
                while (fe >= 1 && ye >= 0);
              break;
            }
        }
      } finally {
        ht = !1, Fe.current = se, Nt(), Error.prepareStackTrace = ne;
      }
      var cr = R ? R.displayName || R.name : "", Gt = cr ? _e(cr) : "";
      return typeof R == "function" && le.set(R, Gt), Gt;
    }
    function ii(R, B, j) {
      return Ze(R, !1);
    }
    function un(R) {
      var B = R.prototype;
      return !!(B && B.isReactComponent);
    }
    function Et(R, B, j) {
      if (R == null)
        return "";
      if (typeof R == "function")
        return Ze(R, un(R));
      if (typeof R == "string")
        return _e(R);
      switch (R) {
        case m:
          return _e("Suspense");
        case A:
          return _e("SuspenseList");
      }
      if (typeof R == "object")
        switch (R.$$typeof) {
          case p:
            return ii(R.render);
          case E:
            return Et(R.type, B, j);
          case v: {
            var Z = R, ne = Z._payload, se = Z._init;
            try {
              return Et(se(ne), B, j);
            } catch {
            }
          }
        }
      return "";
    }
    var Ce = Object.prototype.hasOwnProperty, sr = {}, Nr = T.ReactDebugCurrentFrame;
    function He(R) {
      if (R) {
        var B = R._owner, j = Et(R.type, R._source, B ? B.type : null);
        Nr.setExtraStackFrame(j);
      } else
        Nr.setExtraStackFrame(null);
    }
    function ar(R, B, j, Z, ne) {
      {
        var se = Function.call.bind(Ce);
        for (var Y in R)
          if (se(R, Y)) {
            var J = void 0;
            try {
              if (typeof R[Y] != "function") {
                var Ae = Error((Z || "React class") + ": " + j + " type `" + Y + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof R[Y] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw Ae.name = "Invariant Violation", Ae;
              }
              J = R[Y](B, Y, Z, j, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (fe) {
              J = fe;
            }
            J && !(J instanceof Error) && (He(ne), w("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", Z || "React class", j, Y, typeof J), He(null)), J instanceof Error && !(J.message in sr) && (sr[J.message] = !0, He(ne), w("Failed %s type: %s", j, J.message), He(null));
          }
      }
    }
    var Mr = Array.isArray;
    function Mt(R) {
      return Mr(R);
    }
    function Qn(R) {
      {
        var B = typeof Symbol == "function" && Symbol.toStringTag, j = B && R[Symbol.toStringTag] || R.constructor.name || "Object";
        return j;
      }
    }
    function gt(R) {
      try {
        return or(R), !1;
      } catch {
        return !0;
      }
    }
    function or(R) {
      return "" + R;
    }
    function $t(R) {
      if (gt(R))
        return w("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Qn(R)), or(R);
    }
    var Re = T.ReactCurrentOwner, We = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, ut, lr, qt;
    qt = {};
    function ni(R) {
      if (Ce.call(R, "ref")) {
        var B = Object.getOwnPropertyDescriptor(R, "ref").get;
        if (B && B.isReactWarning)
          return !1;
      }
      return R.ref !== void 0;
    }
    function cn(R) {
      if (Ce.call(R, "key")) {
        var B = Object.getOwnPropertyDescriptor(R, "key").get;
        if (B && B.isReactWarning)
          return !1;
      }
      return R.key !== void 0;
    }
    function $r(R, B) {
      if (typeof R.ref == "string" && Re.current && B && Re.current.stateNode !== B) {
        var j = ze(Re.current.type);
        qt[j] || (w('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', ze(Re.current.type), R.ref), qt[j] = !0);
      }
    }
    function qr(R, B) {
      {
        var j = function() {
          ut || (ut = !0, w("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", B));
        };
        j.isReactWarning = !0, Object.defineProperty(R, "key", {
          get: j,
          configurable: !0
        });
      }
    }
    function Yn(R, B) {
      {
        var j = function() {
          lr || (lr = !0, w("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", B));
        };
        j.isReactWarning = !0, Object.defineProperty(R, "ref", {
          get: j,
          configurable: !0
        });
      }
    }
    var X = function(R, B, j, Z, ne, se, Y) {
      var J = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: r,
        // Built-in properties that belong on the element
        type: R,
        key: B,
        ref: j,
        props: Y,
        // Record the component responsible for creating this element.
        _owner: se
      };
      return J._store = {}, Object.defineProperty(J._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(J, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: Z
      }), Object.defineProperty(J, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: ne
      }), Object.freeze && (Object.freeze(J.props), Object.freeze(J)), J;
    };
    function fa(R, B, j, Z, ne) {
      {
        var se, Y = {}, J = null, Ae = null;
        j !== void 0 && ($t(j), J = "" + j), cn(B) && ($t(B.key), J = "" + B.key), ni(B) && (Ae = B.ref, $r(B, ne));
        for (se in B)
          Ce.call(B, se) && !We.hasOwnProperty(se) && (Y[se] = B[se]);
        if (R && R.defaultProps) {
          var fe = R.defaultProps;
          for (se in fe)
            Y[se] === void 0 && (Y[se] = fe[se]);
        }
        if (J || Ae) {
          var ye = typeof R == "function" ? R.displayName || R.name || "Unknown" : R;
          J && qr(Y, ye), Ae && Yn(Y, ye);
        }
        return X(R, J, Ae, ne, Z, Re.current, Y);
      }
    }
    var si = T.ReactCurrentOwner, pn = T.ReactDebugCurrentFrame;
    function ur(R) {
      if (R) {
        var B = R._owner, j = Et(R.type, R._source, B ? B.type : null);
        pn.setExtraStackFrame(j);
      } else
        pn.setExtraStackFrame(null);
    }
    var dn;
    dn = !1;
    function ai(R) {
      return typeof R == "object" && R !== null && R.$$typeof === r;
    }
    function es() {
      {
        if (si.current) {
          var R = ze(si.current.type);
          if (R)
            return `

Check the render method of \`` + R + "`.";
        }
        return "";
      }
    }
    function ya(R) {
      return "";
    }
    var ts = {};
    function ma(R) {
      {
        var B = es();
        if (!B) {
          var j = typeof R == "string" ? R : R.displayName || R.name;
          j && (B = `

Check the top-level render call using <` + j + ">.");
        }
        return B;
      }
    }
    function rs(R, B) {
      {
        if (!R._store || R._store.validated || R.key != null)
          return;
        R._store.validated = !0;
        var j = ma(B);
        if (ts[j])
          return;
        ts[j] = !0;
        var Z = "";
        R && R._owner && R._owner !== si.current && (Z = " It was passed a child from " + ze(R._owner.type) + "."), ur(R), w('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', j, Z), ur(null);
      }
    }
    function is(R, B) {
      {
        if (typeof R != "object")
          return;
        if (Mt(R))
          for (var j = 0; j < R.length; j++) {
            var Z = R[j];
            ai(Z) && rs(Z, B);
          }
        else if (ai(R))
          R._store && (R._store.validated = !0);
        else if (R) {
          var ne = C(R);
          if (typeof ne == "function" && ne !== R.entries)
            for (var se = ne.call(R), Y; !(Y = se.next()).done; )
              ai(Y.value) && rs(Y.value, B);
        }
      }
    }
    function ba(R) {
      {
        var B = R.type;
        if (B == null || typeof B == "string")
          return;
        var j;
        if (typeof B == "function")
          j = B.propTypes;
        else if (typeof B == "object" && (B.$$typeof === p || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        B.$$typeof === E))
          j = B.propTypes;
        else
          return;
        if (j) {
          var Z = ze(B);
          ar(j, R.props, "prop", Z, R);
        } else if (B.PropTypes !== void 0 && !dn) {
          dn = !0;
          var ne = ze(B);
          w("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", ne || "Unknown");
        }
        typeof B.getDefaultProps == "function" && !B.getDefaultProps.isReactClassApproved && w("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function ha(R) {
      {
        for (var B = Object.keys(R.props), j = 0; j < B.length; j++) {
          var Z = B[j];
          if (Z !== "children" && Z !== "key") {
            ur(R), w("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", Z), ur(null);
            break;
          }
        }
        R.ref !== null && (ur(R), w("Invalid attribute `ref` supplied to `React.Fragment`."), ur(null));
      }
    }
    var ns = {};
    function ss(R, B, j, Z, ne, se) {
      {
        var Y = da(R);
        if (!Y) {
          var J = "";
          (R === void 0 || typeof R == "object" && R !== null && Object.keys(R).length === 0) && (J += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var Ae = ya();
          Ae ? J += Ae : J += es();
          var fe;
          R === null ? fe = "null" : Mt(R) ? fe = "array" : R !== void 0 && R.$$typeof === r ? (fe = "<" + (ze(R.type) || "Unknown") + " />", J = " Did you accidentally export a JSX literal instead of a component?") : fe = typeof R, w("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", fe, J);
        }
        var ye = fa(R, B, j, ne, se);
        if (ye == null)
          return ye;
        if (Y) {
          var Ve = B.children;
          if (Ve !== void 0)
            if (Z)
              if (Mt(Ve)) {
                for (var cr = 0; cr < Ve.length; cr++)
                  is(Ve[cr], R);
                Object.freeze && Object.freeze(Ve);
              } else
                w("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              is(Ve, R);
        }
        if (Ce.call(B, "key")) {
          var Gt = ze(R), we = Object.keys(B).filter(function(va) {
            return va !== "key";
          }), fn = we.length > 0 ? "{key: someKey, " + we.join(": ..., ") + ": ...}" : "{key: someKey}";
          if (!ns[Gt + fn]) {
            var Aa = we.length > 0 ? "{" + we.join(": ..., ") + ": ...}" : "{}";
            w(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`, fn, Gt, Aa, Gt), ns[Gt + fn] = !0;
          }
        }
        return R === s ? ha(ye) : ba(ye), ye;
      }
    }
    function Ea(R, B, j) {
      return ss(R, B, j, !0);
    }
    function ga(R, B, j) {
      return ss(R, B, j, !1);
    }
    var xa = ga, Ra = Ea;
    mn.Fragment = s, mn.jsx = xa, mn.jsxs = Ra;
  }(), mn;
}
var bm = {};
bm.NODE_ENV === "production" ? Ka.exports = ym() : Ka.exports = mm();
var G = Ka.exports, xn = {}, hm = {}, bn = fm;
if (hm.NODE_ENV === "production")
  xn.createRoot = bn.createRoot, xn.hydrateRoot = bn.hydrateRoot;
else {
  var os = bn.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  xn.createRoot = function(t, e) {
    os.usingClientEntryPoint = !0;
    try {
      return bn.createRoot(t, e);
    } finally {
      os.usingClientEntryPoint = !1;
    }
  }, xn.hydrateRoot = function(t, e, r) {
    os.usingClientEntryPoint = !0;
    try {
      return bn.hydrateRoot(t, e, r);
    } finally {
      os.usingClientEntryPoint = !1;
    }
  };
}
var Zr = {}, Hr = {}, Cr = {}, wr = {}, ja = {}, Tt = {}, ks = {}, _n = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.getParsedType = t.ZodParsedType = t.objectUtil = t.util = void 0;
  var e;
  (function(n) {
    n.assertEqual = (l) => l;
    function s(l) {
    }
    n.assertIs = s;
    function u(l) {
      throw new Error();
    }
    n.assertNever = u, n.arrayToEnum = (l) => {
      const f = {};
      for (const p of l)
        f[p] = p;
      return f;
    }, n.getValidEnumValues = (l) => {
      const f = n.objectKeys(l).filter((m) => typeof l[l[m]] != "number"), p = {};
      for (const m of f)
        p[m] = l[m];
      return n.objectValues(p);
    }, n.objectValues = (l) => n.objectKeys(l).map(function(f) {
      return l[f];
    }), n.objectKeys = typeof Object.keys == "function" ? (l) => Object.keys(l) : (l) => {
      const f = [];
      for (const p in l)
        Object.prototype.hasOwnProperty.call(l, p) && f.push(p);
      return f;
    }, n.find = (l, f) => {
      for (const p of l)
        if (f(p))
          return p;
    }, n.isInteger = typeof Number.isInteger == "function" ? (l) => Number.isInteger(l) : (l) => typeof l == "number" && isFinite(l) && Math.floor(l) === l;
    function c(l, f = " | ") {
      return l.map((p) => typeof p == "string" ? `'${p}'` : p).join(f);
    }
    n.joinValues = c, n.jsonStringifyReplacer = (l, f) => typeof f == "bigint" ? f.toString() : f;
  })(e = t.util || (t.util = {})), function(n) {
    n.mergeShapes = (s, u) => ({
      ...s,
      ...u
      // second overwrites first
    });
  }(t.objectUtil || (t.objectUtil = {})), t.ZodParsedType = e.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
  ]);
  const r = (n) => {
    switch (typeof n) {
      case "undefined":
        return t.ZodParsedType.undefined;
      case "string":
        return t.ZodParsedType.string;
      case "number":
        return isNaN(n) ? t.ZodParsedType.nan : t.ZodParsedType.number;
      case "boolean":
        return t.ZodParsedType.boolean;
      case "function":
        return t.ZodParsedType.function;
      case "bigint":
        return t.ZodParsedType.bigint;
      case "symbol":
        return t.ZodParsedType.symbol;
      case "object":
        return Array.isArray(n) ? t.ZodParsedType.array : n === null ? t.ZodParsedType.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? t.ZodParsedType.promise : typeof Map < "u" && n instanceof Map ? t.ZodParsedType.map : typeof Set < "u" && n instanceof Set ? t.ZodParsedType.set : typeof Date < "u" && n instanceof Date ? t.ZodParsedType.date : t.ZodParsedType.object;
      default:
        return t.ZodParsedType.unknown;
    }
  };
  t.getParsedType = r;
})(_n);
var _t = {};
Object.defineProperty(_t, "__esModule", { value: !0 });
_t.ZodError = _t.quotelessJson = _t.ZodIssueCode = void 0;
const ep = _n;
_t.ZodIssueCode = ep.util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
const Em = (t) => JSON.stringify(t, null, 2).replace(/"([^"]+)":/g, "$1:");
_t.quotelessJson = Em;
class vn extends Error {
  constructor(e) {
    super(), this.issues = [], this.addIssue = (n) => {
      this.issues = [...this.issues, n];
    }, this.addIssues = (n = []) => {
      this.issues = [...this.issues, ...n];
    };
    const r = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, r) : this.__proto__ = r, this.name = "ZodError", this.issues = e;
  }
  get errors() {
    return this.issues;
  }
  format(e) {
    const r = e || function(u) {
      return u.message;
    }, n = { _errors: [] }, s = (u) => {
      for (const c of u.issues)
        if (c.code === "invalid_union")
          c.unionErrors.map(s);
        else if (c.code === "invalid_return_type")
          s(c.returnTypeError);
        else if (c.code === "invalid_arguments")
          s(c.argumentsError);
        else if (c.path.length === 0)
          n._errors.push(r(c));
        else {
          let l = n, f = 0;
          for (; f < c.path.length; ) {
            const p = c.path[f];
            f === c.path.length - 1 ? (l[p] = l[p] || { _errors: [] }, l[p]._errors.push(r(c))) : l[p] = l[p] || { _errors: [] }, l = l[p], f++;
          }
        }
    };
    return s(this), n;
  }
  static assert(e) {
    if (!(e instanceof vn))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, ep.util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (r) => r.message) {
    const r = {}, n = [];
    for (const s of this.issues)
      s.path.length > 0 ? (r[s.path[0]] = r[s.path[0]] || [], r[s.path[0]].push(e(s))) : n.push(e(s));
    return { formErrors: n, fieldErrors: r };
  }
  get formErrors() {
    return this.flatten();
  }
}
_t.ZodError = vn;
vn.create = (t) => new vn(t);
Object.defineProperty(ks, "__esModule", { value: !0 });
const Gr = _n, Se = _t, gm = (t, e) => {
  let r;
  switch (t.code) {
    case Se.ZodIssueCode.invalid_type:
      t.received === Gr.ZodParsedType.undefined ? r = "Required" : r = `Expected ${t.expected}, received ${t.received}`;
      break;
    case Se.ZodIssueCode.invalid_literal:
      r = `Invalid literal value, expected ${JSON.stringify(t.expected, Gr.util.jsonStringifyReplacer)}`;
      break;
    case Se.ZodIssueCode.unrecognized_keys:
      r = `Unrecognized key(s) in object: ${Gr.util.joinValues(t.keys, ", ")}`;
      break;
    case Se.ZodIssueCode.invalid_union:
      r = "Invalid input";
      break;
    case Se.ZodIssueCode.invalid_union_discriminator:
      r = `Invalid discriminator value. Expected ${Gr.util.joinValues(t.options)}`;
      break;
    case Se.ZodIssueCode.invalid_enum_value:
      r = `Invalid enum value. Expected ${Gr.util.joinValues(t.options)}, received '${t.received}'`;
      break;
    case Se.ZodIssueCode.invalid_arguments:
      r = "Invalid function arguments";
      break;
    case Se.ZodIssueCode.invalid_return_type:
      r = "Invalid function return type";
      break;
    case Se.ZodIssueCode.invalid_date:
      r = "Invalid date";
      break;
    case Se.ZodIssueCode.invalid_string:
      typeof t.validation == "object" ? "includes" in t.validation ? (r = `Invalid input: must include "${t.validation.includes}"`, typeof t.validation.position == "number" && (r = `${r} at one or more positions greater than or equal to ${t.validation.position}`)) : "startsWith" in t.validation ? r = `Invalid input: must start with "${t.validation.startsWith}"` : "endsWith" in t.validation ? r = `Invalid input: must end with "${t.validation.endsWith}"` : Gr.util.assertNever(t.validation) : t.validation !== "regex" ? r = `Invalid ${t.validation}` : r = "Invalid";
      break;
    case Se.ZodIssueCode.too_small:
      t.type === "array" ? r = `Array must contain ${t.exact ? "exactly" : t.inclusive ? "at least" : "more than"} ${t.minimum} element(s)` : t.type === "string" ? r = `String must contain ${t.exact ? "exactly" : t.inclusive ? "at least" : "over"} ${t.minimum} character(s)` : t.type === "number" ? r = `Number must be ${t.exact ? "exactly equal to " : t.inclusive ? "greater than or equal to " : "greater than "}${t.minimum}` : t.type === "date" ? r = `Date must be ${t.exact ? "exactly equal to " : t.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(t.minimum))}` : r = "Invalid input";
      break;
    case Se.ZodIssueCode.too_big:
      t.type === "array" ? r = `Array must contain ${t.exact ? "exactly" : t.inclusive ? "at most" : "less than"} ${t.maximum} element(s)` : t.type === "string" ? r = `String must contain ${t.exact ? "exactly" : t.inclusive ? "at most" : "under"} ${t.maximum} character(s)` : t.type === "number" ? r = `Number must be ${t.exact ? "exactly" : t.inclusive ? "less than or equal to" : "less than"} ${t.maximum}` : t.type === "bigint" ? r = `BigInt must be ${t.exact ? "exactly" : t.inclusive ? "less than or equal to" : "less than"} ${t.maximum}` : t.type === "date" ? r = `Date must be ${t.exact ? "exactly" : t.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(t.maximum))}` : r = "Invalid input";
      break;
    case Se.ZodIssueCode.custom:
      r = "Invalid input";
      break;
    case Se.ZodIssueCode.invalid_intersection_types:
      r = "Intersection results could not be merged";
      break;
    case Se.ZodIssueCode.not_multiple_of:
      r = `Number must be a multiple of ${t.multipleOf}`;
      break;
    case Se.ZodIssueCode.not_finite:
      r = "Number must be finite";
      break;
    default:
      r = e.defaultError, Gr.util.assertNever(t);
  }
  return { message: r };
};
ks.default = gm;
var xm = L && L.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(Tt, "__esModule", { value: !0 });
Tt.getErrorMap = Tt.setErrorMap = Tt.defaultErrorMap = void 0;
const tp = xm(ks);
Tt.defaultErrorMap = tp.default;
let rp = tp.default;
function Rm(t) {
  rp = t;
}
Tt.setErrorMap = Rm;
function Am() {
  return rp;
}
Tt.getErrorMap = Am;
var qa = {};
(function(t) {
  var e = L && L.__importDefault || function(v) {
    return v && v.__esModule ? v : { default: v };
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), t.isAsync = t.isValid = t.isDirty = t.isAborted = t.OK = t.DIRTY = t.INVALID = t.ParseStatus = t.addIssueToContext = t.EMPTY_PATH = t.makeIssue = void 0;
  const r = Tt, n = e(ks), s = (v) => {
    const { data: k, path: P, errorMaps: $, issueData: C } = v, T = [...P, ...C.path || []], w = {
      ...C,
      path: T
    };
    if (C.message !== void 0)
      return {
        ...C,
        path: T,
        message: C.message
      };
    let K = "";
    const re = $.filter((ie) => !!ie).slice().reverse();
    for (const ie of re)
      K = ie(w, { data: k, defaultError: K }).message;
    return {
      ...C,
      path: T,
      message: K
    };
  };
  t.makeIssue = s, t.EMPTY_PATH = [];
  function u(v, k) {
    const P = (0, r.getErrorMap)(), $ = (0, t.makeIssue)({
      issueData: k,
      data: v.data,
      path: v.path,
      errorMaps: [
        v.common.contextualErrorMap,
        v.schemaErrorMap,
        P,
        P === n.default ? void 0 : n.default
        // then global default map
      ].filter((C) => !!C)
    });
    v.common.issues.push($);
  }
  t.addIssueToContext = u;
  class c {
    constructor() {
      this.value = "valid";
    }
    dirty() {
      this.value === "valid" && (this.value = "dirty");
    }
    abort() {
      this.value !== "aborted" && (this.value = "aborted");
    }
    static mergeArray(k, P) {
      const $ = [];
      for (const C of P) {
        if (C.status === "aborted")
          return t.INVALID;
        C.status === "dirty" && k.dirty(), $.push(C.value);
      }
      return { status: k.value, value: $ };
    }
    static async mergeObjectAsync(k, P) {
      const $ = [];
      for (const C of P) {
        const T = await C.key, w = await C.value;
        $.push({
          key: T,
          value: w
        });
      }
      return c.mergeObjectSync(k, $);
    }
    static mergeObjectSync(k, P) {
      const $ = {};
      for (const C of P) {
        const { key: T, value: w } = C;
        if (T.status === "aborted" || w.status === "aborted")
          return t.INVALID;
        T.status === "dirty" && k.dirty(), w.status === "dirty" && k.dirty(), T.value !== "__proto__" && (typeof w.value < "u" || C.alwaysSet) && ($[T.value] = w.value);
      }
      return { status: k.value, value: $ };
    }
  }
  t.ParseStatus = c, t.INVALID = Object.freeze({
    status: "aborted"
  });
  const l = (v) => ({ status: "dirty", value: v });
  t.DIRTY = l;
  const f = (v) => ({ status: "valid", value: v });
  t.OK = f;
  const p = (v) => v.status === "aborted";
  t.isAborted = p;
  const m = (v) => v.status === "dirty";
  t.isDirty = m;
  const A = (v) => v.status === "valid";
  t.isValid = A;
  const E = (v) => typeof Promise < "u" && v instanceof Promise;
  t.isAsync = E;
})(qa);
var ip = {};
Object.defineProperty(ip, "__esModule", { value: !0 });
var np = {}, sp = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.errorUtil = void 0, function(e) {
    e.errToObj = (r) => typeof r == "string" ? { message: r } : r || {}, e.toString = (r) => typeof r == "string" ? r : r == null ? void 0 : r.message;
  }(t.errorUtil || (t.errorUtil = {}));
})(sp);
(function(t) {
  var e = L && L.__classPrivateFieldGet || function(h, a, d, y) {
    if (d === "a" && !y) throw new TypeError("Private accessor was defined without a getter");
    if (typeof a == "function" ? h !== a || !y : !a.has(h)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return d === "m" ? y : d === "a" ? y.call(h) : y ? y.value : a.get(h);
  }, r = L && L.__classPrivateFieldSet || function(h, a, d, y, g) {
    if (y === "m") throw new TypeError("Private method is not writable");
    if (y === "a" && !g) throw new TypeError("Private accessor was defined without a setter");
    if (typeof a == "function" ? h !== a || !g : !a.has(h)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return y === "a" ? g.call(h, d) : g ? g.value = d : a.set(h, d), d;
  }, n, s;
  Object.defineProperty(t, "__esModule", { value: !0 }), t.boolean = t.bigint = t.array = t.any = t.coerce = t.ZodFirstPartyTypeKind = t.late = t.ZodSchema = t.Schema = t.custom = t.ZodReadonly = t.ZodPipeline = t.ZodBranded = t.BRAND = t.ZodNaN = t.ZodCatch = t.ZodDefault = t.ZodNullable = t.ZodOptional = t.ZodTransformer = t.ZodEffects = t.ZodPromise = t.ZodNativeEnum = t.ZodEnum = t.ZodLiteral = t.ZodLazy = t.ZodFunction = t.ZodSet = t.ZodMap = t.ZodRecord = t.ZodTuple = t.ZodIntersection = t.ZodDiscriminatedUnion = t.ZodUnion = t.ZodObject = t.ZodArray = t.ZodVoid = t.ZodNever = t.ZodUnknown = t.ZodAny = t.ZodNull = t.ZodUndefined = t.ZodSymbol = t.ZodDate = t.ZodBoolean = t.ZodBigInt = t.ZodNumber = t.ZodString = t.datetimeRegex = t.ZodType = void 0, t.NEVER = t.void = t.unknown = t.union = t.undefined = t.tuple = t.transformer = t.symbol = t.string = t.strictObject = t.set = t.record = t.promise = t.preprocess = t.pipeline = t.ostring = t.optional = t.onumber = t.oboolean = t.object = t.number = t.nullable = t.null = t.never = t.nativeEnum = t.nan = t.map = t.literal = t.lazy = t.intersection = t.instanceof = t.function = t.enum = t.effect = t.discriminatedUnion = t.date = void 0;
  const u = Tt, c = sp, l = qa, f = _n, p = _t;
  class m {
    constructor(a, d, y, g) {
      this._cachedPath = [], this.parent = a, this.data = d, this._path = y, this._key = g;
    }
    get path() {
      return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
    }
  }
  const A = (h, a) => {
    if ((0, l.isValid)(a))
      return { success: !0, data: a.value };
    if (!h.common.issues.length)
      throw new Error("Validation failed but no issues detected.");
    return {
      success: !1,
      get error() {
        if (this._error)
          return this._error;
        const d = new p.ZodError(h.common.issues);
        return this._error = d, this._error;
      }
    };
  };
  function E(h) {
    if (!h)
      return {};
    const { errorMap: a, invalid_type_error: d, required_error: y, description: g } = h;
    if (a && (d || y))
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    return a ? { errorMap: a, description: g } : { errorMap: (D, _) => {
      var I, N;
      const { message: W } = h;
      return D.code === "invalid_enum_value" ? { message: W ?? _.defaultError } : typeof _.data > "u" ? { message: (I = W ?? y) !== null && I !== void 0 ? I : _.defaultError } : D.code !== "invalid_type" ? { message: _.defaultError } : { message: (N = W ?? d) !== null && N !== void 0 ? N : _.defaultError };
    }, description: g };
  }
  class v {
    constructor(a) {
      this.spa = this.safeParseAsync, this._def = a, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
    }
    get description() {
      return this._def.description;
    }
    _getType(a) {
      return (0, f.getParsedType)(a.data);
    }
    _getOrReturnCtx(a, d) {
      return d || {
        common: a.parent.common,
        data: a.data,
        parsedType: (0, f.getParsedType)(a.data),
        schemaErrorMap: this._def.errorMap,
        path: a.path,
        parent: a.parent
      };
    }
    _processInputParams(a) {
      return {
        status: new l.ParseStatus(),
        ctx: {
          common: a.parent.common,
          data: a.data,
          parsedType: (0, f.getParsedType)(a.data),
          schemaErrorMap: this._def.errorMap,
          path: a.path,
          parent: a.parent
        }
      };
    }
    _parseSync(a) {
      const d = this._parse(a);
      if ((0, l.isAsync)(d))
        throw new Error("Synchronous parse encountered promise.");
      return d;
    }
    _parseAsync(a) {
      const d = this._parse(a);
      return Promise.resolve(d);
    }
    parse(a, d) {
      const y = this.safeParse(a, d);
      if (y.success)
        return y.data;
      throw y.error;
    }
    safeParse(a, d) {
      var y;
      const g = {
        common: {
          issues: [],
          async: (y = d == null ? void 0 : d.async) !== null && y !== void 0 ? y : !1,
          contextualErrorMap: d == null ? void 0 : d.errorMap
        },
        path: (d == null ? void 0 : d.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data: a,
        parsedType: (0, f.getParsedType)(a)
      }, x = this._parseSync({ data: a, path: g.path, parent: g });
      return A(g, x);
    }
    async parseAsync(a, d) {
      const y = await this.safeParseAsync(a, d);
      if (y.success)
        return y.data;
      throw y.error;
    }
    async safeParseAsync(a, d) {
      const y = {
        common: {
          issues: [],
          contextualErrorMap: d == null ? void 0 : d.errorMap,
          async: !0
        },
        path: (d == null ? void 0 : d.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data: a,
        parsedType: (0, f.getParsedType)(a)
      }, g = this._parse({ data: a, path: y.path, parent: y }), x = await ((0, l.isAsync)(g) ? g : Promise.resolve(g));
      return A(y, x);
    }
    refine(a, d) {
      const y = (g) => typeof d == "string" || typeof d > "u" ? { message: d } : typeof d == "function" ? d(g) : d;
      return this._refinement((g, x) => {
        const D = a(g), _ = () => x.addIssue({
          code: p.ZodIssueCode.custom,
          ...y(g)
        });
        return typeof Promise < "u" && D instanceof Promise ? D.then((I) => I ? !0 : (_(), !1)) : D ? !0 : (_(), !1);
      });
    }
    refinement(a, d) {
      return this._refinement((y, g) => a(y) ? !0 : (g.addIssue(typeof d == "function" ? d(y, g) : d), !1));
    }
    _refinement(a) {
      return new Re({
        schema: this,
        typeName: X.ZodEffects,
        effect: { type: "refinement", refinement: a }
      });
    }
    superRefine(a) {
      return this._refinement(a);
    }
    optional() {
      return We.create(this, this._def);
    }
    nullable() {
      return ut.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return _e.create(this, this._def);
    }
    promise() {
      return $t.create(this, this._def);
    }
    or(a) {
      return Ir.create([this, a], this._def);
    }
    and(a) {
      return Et.create(this, a, this._def);
    }
    transform(a) {
      return new Re({
        ...E(this._def),
        schema: this,
        typeName: X.ZodEffects,
        effect: { type: "transform", transform: a }
      });
    }
    default(a) {
      const d = typeof a == "function" ? a : () => a;
      return new lr({
        ...E(this._def),
        innerType: this,
        defaultValue: d,
        typeName: X.ZodDefault
      });
    }
    brand() {
      return new cn({
        typeName: X.ZodBranded,
        type: this,
        ...E(this._def)
      });
    }
    catch(a) {
      const d = typeof a == "function" ? a : () => a;
      return new qt({
        ...E(this._def),
        innerType: this,
        catchValue: d,
        typeName: X.ZodCatch
      });
    }
    describe(a) {
      const d = this.constructor;
      return new d({
        ...this._def,
        description: a
      });
    }
    pipe(a) {
      return $r.create(this, a);
    }
    readonly() {
      return qr.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  }
  t.ZodType = v, t.Schema = v, t.ZodSchema = v;
  const k = /^c[^\s-]{8,}$/i, P = /^[0-9a-z]+$/, $ = /^[0-9A-HJKMNP-TV-Z]{26}$/, C = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, T = /^[a-z0-9_-]{21}$/i, w = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, K = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, re = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
  let ie;
  const oe = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, Ge = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/, Yt = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, ln = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", da = new RegExp(`^${ln}$`);
  function Hn(h) {
    let a = "([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
    return h.precision ? a = `${a}\\.\\d{${h.precision}}` : h.precision == null && (a = `${a}(\\.\\d+)?`), a;
  }
  function Wn(h) {
    return new RegExp(`^${Hn(h)}$`);
  }
  function ze(h) {
    let a = `${ln}T${Hn(h)}`;
    const d = [];
    return d.push(h.local ? "Z?" : "Z"), h.offset && d.push("([+-]\\d{2}:?\\d{2})"), a = `${a}(${d.join("|")})`, new RegExp(`^${a}$`);
  }
  t.datetimeRegex = ze;
  function It(h, a) {
    return !!((a === "v4" || !a) && oe.test(h) || (a === "v6" || !a) && Ge.test(h));
  }
  class xe extends v {
    _parse(a) {
      if (this._def.coerce && (a.data = String(a.data)), this._getType(a) !== f.ZodParsedType.string) {
        const x = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(x, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.string,
          received: x.parsedType
        }), l.INVALID;
      }
      const y = new l.ParseStatus();
      let g;
      for (const x of this._def.checks)
        if (x.kind === "min")
          a.data.length < x.value && (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            code: p.ZodIssueCode.too_small,
            minimum: x.value,
            type: "string",
            inclusive: !0,
            exact: !1,
            message: x.message
          }), y.dirty());
        else if (x.kind === "max")
          a.data.length > x.value && (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            code: p.ZodIssueCode.too_big,
            maximum: x.value,
            type: "string",
            inclusive: !0,
            exact: !1,
            message: x.message
          }), y.dirty());
        else if (x.kind === "length") {
          const D = a.data.length > x.value, _ = a.data.length < x.value;
          (D || _) && (g = this._getOrReturnCtx(a, g), D ? (0, l.addIssueToContext)(g, {
            code: p.ZodIssueCode.too_big,
            maximum: x.value,
            type: "string",
            inclusive: !0,
            exact: !0,
            message: x.message
          }) : _ && (0, l.addIssueToContext)(g, {
            code: p.ZodIssueCode.too_small,
            minimum: x.value,
            type: "string",
            inclusive: !0,
            exact: !0,
            message: x.message
          }), y.dirty());
        } else if (x.kind === "email")
          K.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            validation: "email",
            code: p.ZodIssueCode.invalid_string,
            message: x.message
          }), y.dirty());
        else if (x.kind === "emoji")
          ie || (ie = new RegExp(re, "u")), ie.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            validation: "emoji",
            code: p.ZodIssueCode.invalid_string,
            message: x.message
          }), y.dirty());
        else if (x.kind === "uuid")
          C.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            validation: "uuid",
            code: p.ZodIssueCode.invalid_string,
            message: x.message
          }), y.dirty());
        else if (x.kind === "nanoid")
          T.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            validation: "nanoid",
            code: p.ZodIssueCode.invalid_string,
            message: x.message
          }), y.dirty());
        else if (x.kind === "cuid")
          k.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            validation: "cuid",
            code: p.ZodIssueCode.invalid_string,
            message: x.message
          }), y.dirty());
        else if (x.kind === "cuid2")
          P.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            validation: "cuid2",
            code: p.ZodIssueCode.invalid_string,
            message: x.message
          }), y.dirty());
        else if (x.kind === "ulid")
          $.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
            validation: "ulid",
            code: p.ZodIssueCode.invalid_string,
            message: x.message
          }), y.dirty());
        else if (x.kind === "url")
          try {
            new URL(a.data);
          } catch {
            g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
              validation: "url",
              code: p.ZodIssueCode.invalid_string,
              message: x.message
            }), y.dirty();
          }
        else x.kind === "regex" ? (x.regex.lastIndex = 0, x.regex.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          validation: "regex",
          code: p.ZodIssueCode.invalid_string,
          message: x.message
        }), y.dirty())) : x.kind === "trim" ? a.data = a.data.trim() : x.kind === "includes" ? a.data.includes(x.value, x.position) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          code: p.ZodIssueCode.invalid_string,
          validation: { includes: x.value, position: x.position },
          message: x.message
        }), y.dirty()) : x.kind === "toLowerCase" ? a.data = a.data.toLowerCase() : x.kind === "toUpperCase" ? a.data = a.data.toUpperCase() : x.kind === "startsWith" ? a.data.startsWith(x.value) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          code: p.ZodIssueCode.invalid_string,
          validation: { startsWith: x.value },
          message: x.message
        }), y.dirty()) : x.kind === "endsWith" ? a.data.endsWith(x.value) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          code: p.ZodIssueCode.invalid_string,
          validation: { endsWith: x.value },
          message: x.message
        }), y.dirty()) : x.kind === "datetime" ? ze(x).test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          code: p.ZodIssueCode.invalid_string,
          validation: "datetime",
          message: x.message
        }), y.dirty()) : x.kind === "date" ? da.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          code: p.ZodIssueCode.invalid_string,
          validation: "date",
          message: x.message
        }), y.dirty()) : x.kind === "time" ? Wn(x).test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          code: p.ZodIssueCode.invalid_string,
          validation: "time",
          message: x.message
        }), y.dirty()) : x.kind === "duration" ? w.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          validation: "duration",
          code: p.ZodIssueCode.invalid_string,
          message: x.message
        }), y.dirty()) : x.kind === "ip" ? It(a.data, x.version) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          validation: "ip",
          code: p.ZodIssueCode.invalid_string,
          message: x.message
        }), y.dirty()) : x.kind === "base64" ? Yt.test(a.data) || (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          validation: "base64",
          code: p.ZodIssueCode.invalid_string,
          message: x.message
        }), y.dirty()) : f.util.assertNever(x);
      return { status: y.value, value: a.data };
    }
    _regex(a, d, y) {
      return this.refinement((g) => a.test(g), {
        validation: d,
        code: p.ZodIssueCode.invalid_string,
        ...c.errorUtil.errToObj(y)
      });
    }
    _addCheck(a) {
      return new xe({
        ...this._def,
        checks: [...this._def.checks, a]
      });
    }
    email(a) {
      return this._addCheck({ kind: "email", ...c.errorUtil.errToObj(a) });
    }
    url(a) {
      return this._addCheck({ kind: "url", ...c.errorUtil.errToObj(a) });
    }
    emoji(a) {
      return this._addCheck({ kind: "emoji", ...c.errorUtil.errToObj(a) });
    }
    uuid(a) {
      return this._addCheck({ kind: "uuid", ...c.errorUtil.errToObj(a) });
    }
    nanoid(a) {
      return this._addCheck({ kind: "nanoid", ...c.errorUtil.errToObj(a) });
    }
    cuid(a) {
      return this._addCheck({ kind: "cuid", ...c.errorUtil.errToObj(a) });
    }
    cuid2(a) {
      return this._addCheck({ kind: "cuid2", ...c.errorUtil.errToObj(a) });
    }
    ulid(a) {
      return this._addCheck({ kind: "ulid", ...c.errorUtil.errToObj(a) });
    }
    base64(a) {
      return this._addCheck({ kind: "base64", ...c.errorUtil.errToObj(a) });
    }
    ip(a) {
      return this._addCheck({ kind: "ip", ...c.errorUtil.errToObj(a) });
    }
    datetime(a) {
      var d, y;
      return typeof a == "string" ? this._addCheck({
        kind: "datetime",
        precision: null,
        offset: !1,
        local: !1,
        message: a
      }) : this._addCheck({
        kind: "datetime",
        precision: typeof (a == null ? void 0 : a.precision) > "u" ? null : a == null ? void 0 : a.precision,
        offset: (d = a == null ? void 0 : a.offset) !== null && d !== void 0 ? d : !1,
        local: (y = a == null ? void 0 : a.local) !== null && y !== void 0 ? y : !1,
        ...c.errorUtil.errToObj(a == null ? void 0 : a.message)
      });
    }
    date(a) {
      return this._addCheck({ kind: "date", message: a });
    }
    time(a) {
      return typeof a == "string" ? this._addCheck({
        kind: "time",
        precision: null,
        message: a
      }) : this._addCheck({
        kind: "time",
        precision: typeof (a == null ? void 0 : a.precision) > "u" ? null : a == null ? void 0 : a.precision,
        ...c.errorUtil.errToObj(a == null ? void 0 : a.message)
      });
    }
    duration(a) {
      return this._addCheck({ kind: "duration", ...c.errorUtil.errToObj(a) });
    }
    regex(a, d) {
      return this._addCheck({
        kind: "regex",
        regex: a,
        ...c.errorUtil.errToObj(d)
      });
    }
    includes(a, d) {
      return this._addCheck({
        kind: "includes",
        value: a,
        position: d == null ? void 0 : d.position,
        ...c.errorUtil.errToObj(d == null ? void 0 : d.message)
      });
    }
    startsWith(a, d) {
      return this._addCheck({
        kind: "startsWith",
        value: a,
        ...c.errorUtil.errToObj(d)
      });
    }
    endsWith(a, d) {
      return this._addCheck({
        kind: "endsWith",
        value: a,
        ...c.errorUtil.errToObj(d)
      });
    }
    min(a, d) {
      return this._addCheck({
        kind: "min",
        value: a,
        ...c.errorUtil.errToObj(d)
      });
    }
    max(a, d) {
      return this._addCheck({
        kind: "max",
        value: a,
        ...c.errorUtil.errToObj(d)
      });
    }
    length(a, d) {
      return this._addCheck({
        kind: "length",
        value: a,
        ...c.errorUtil.errToObj(d)
      });
    }
    /**
     * @deprecated Use z.string().min(1) instead.
     * @see {@link ZodString.min}
     */
    nonempty(a) {
      return this.min(1, c.errorUtil.errToObj(a));
    }
    trim() {
      return new xe({
        ...this._def,
        checks: [...this._def.checks, { kind: "trim" }]
      });
    }
    toLowerCase() {
      return new xe({
        ...this._def,
        checks: [...this._def.checks, { kind: "toLowerCase" }]
      });
    }
    toUpperCase() {
      return new xe({
        ...this._def,
        checks: [...this._def.checks, { kind: "toUpperCase" }]
      });
    }
    get isDatetime() {
      return !!this._def.checks.find((a) => a.kind === "datetime");
    }
    get isDate() {
      return !!this._def.checks.find((a) => a.kind === "date");
    }
    get isTime() {
      return !!this._def.checks.find((a) => a.kind === "time");
    }
    get isDuration() {
      return !!this._def.checks.find((a) => a.kind === "duration");
    }
    get isEmail() {
      return !!this._def.checks.find((a) => a.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((a) => a.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((a) => a.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((a) => a.kind === "uuid");
    }
    get isNANOID() {
      return !!this._def.checks.find((a) => a.kind === "nanoid");
    }
    get isCUID() {
      return !!this._def.checks.find((a) => a.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((a) => a.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((a) => a.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((a) => a.kind === "ip");
    }
    get isBase64() {
      return !!this._def.checks.find((a) => a.kind === "base64");
    }
    get minLength() {
      let a = null;
      for (const d of this._def.checks)
        d.kind === "min" && (a === null || d.value > a) && (a = d.value);
      return a;
    }
    get maxLength() {
      let a = null;
      for (const d of this._def.checks)
        d.kind === "max" && (a === null || d.value < a) && (a = d.value);
      return a;
    }
  }
  t.ZodString = xe, xe.create = (h) => {
    var a;
    return new xe({
      checks: [],
      typeName: X.ZodString,
      coerce: (a = h == null ? void 0 : h.coerce) !== null && a !== void 0 ? a : !1,
      ...E(h)
    });
  };
  function Jn(h, a) {
    const d = (h.toString().split(".")[1] || "").length, y = (a.toString().split(".")[1] || "").length, g = d > y ? d : y, x = parseInt(h.toFixed(g).replace(".", "")), D = parseInt(a.toFixed(g).replace(".", ""));
    return x % D / Math.pow(10, g);
  }
  class ot extends v {
    constructor() {
      super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
    }
    _parse(a) {
      if (this._def.coerce && (a.data = Number(a.data)), this._getType(a) !== f.ZodParsedType.number) {
        const x = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(x, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.number,
          received: x.parsedType
        }), l.INVALID;
      }
      let y;
      const g = new l.ParseStatus();
      for (const x of this._def.checks)
        x.kind === "int" ? f.util.isInteger(a.data) || (y = this._getOrReturnCtx(a, y), (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: "integer",
          received: "float",
          message: x.message
        }), g.dirty()) : x.kind === "min" ? (x.inclusive ? a.data < x.value : a.data <= x.value) && (y = this._getOrReturnCtx(a, y), (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.too_small,
          minimum: x.value,
          type: "number",
          inclusive: x.inclusive,
          exact: !1,
          message: x.message
        }), g.dirty()) : x.kind === "max" ? (x.inclusive ? a.data > x.value : a.data >= x.value) && (y = this._getOrReturnCtx(a, y), (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.too_big,
          maximum: x.value,
          type: "number",
          inclusive: x.inclusive,
          exact: !1,
          message: x.message
        }), g.dirty()) : x.kind === "multipleOf" ? Jn(a.data, x.value) !== 0 && (y = this._getOrReturnCtx(a, y), (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.not_multiple_of,
          multipleOf: x.value,
          message: x.message
        }), g.dirty()) : x.kind === "finite" ? Number.isFinite(a.data) || (y = this._getOrReturnCtx(a, y), (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.not_finite,
          message: x.message
        }), g.dirty()) : f.util.assertNever(x);
      return { status: g.value, value: a.data };
    }
    gte(a, d) {
      return this.setLimit("min", a, !0, c.errorUtil.toString(d));
    }
    gt(a, d) {
      return this.setLimit("min", a, !1, c.errorUtil.toString(d));
    }
    lte(a, d) {
      return this.setLimit("max", a, !0, c.errorUtil.toString(d));
    }
    lt(a, d) {
      return this.setLimit("max", a, !1, c.errorUtil.toString(d));
    }
    setLimit(a, d, y, g) {
      return new ot({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind: a,
            value: d,
            inclusive: y,
            message: c.errorUtil.toString(g)
          }
        ]
      });
    }
    _addCheck(a) {
      return new ot({
        ...this._def,
        checks: [...this._def.checks, a]
      });
    }
    int(a) {
      return this._addCheck({
        kind: "int",
        message: c.errorUtil.toString(a)
      });
    }
    positive(a) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: !1,
        message: c.errorUtil.toString(a)
      });
    }
    negative(a) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: !1,
        message: c.errorUtil.toString(a)
      });
    }
    nonpositive(a) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: !0,
        message: c.errorUtil.toString(a)
      });
    }
    nonnegative(a) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: !0,
        message: c.errorUtil.toString(a)
      });
    }
    multipleOf(a, d) {
      return this._addCheck({
        kind: "multipleOf",
        value: a,
        message: c.errorUtil.toString(d)
      });
    }
    finite(a) {
      return this._addCheck({
        kind: "finite",
        message: c.errorUtil.toString(a)
      });
    }
    safe(a) {
      return this._addCheck({
        kind: "min",
        inclusive: !0,
        value: Number.MIN_SAFE_INTEGER,
        message: c.errorUtil.toString(a)
      })._addCheck({
        kind: "max",
        inclusive: !0,
        value: Number.MAX_SAFE_INTEGER,
        message: c.errorUtil.toString(a)
      });
    }
    get minValue() {
      let a = null;
      for (const d of this._def.checks)
        d.kind === "min" && (a === null || d.value > a) && (a = d.value);
      return a;
    }
    get maxValue() {
      let a = null;
      for (const d of this._def.checks)
        d.kind === "max" && (a === null || d.value < a) && (a = d.value);
      return a;
    }
    get isInt() {
      return !!this._def.checks.find((a) => a.kind === "int" || a.kind === "multipleOf" && f.util.isInteger(a.value));
    }
    get isFinite() {
      let a = null, d = null;
      for (const y of this._def.checks) {
        if (y.kind === "finite" || y.kind === "int" || y.kind === "multipleOf")
          return !0;
        y.kind === "min" ? (d === null || y.value > d) && (d = y.value) : y.kind === "max" && (a === null || y.value < a) && (a = y.value);
      }
      return Number.isFinite(d) && Number.isFinite(a);
    }
  }
  t.ZodNumber = ot, ot.create = (h) => new ot({
    checks: [],
    typeName: X.ZodNumber,
    coerce: (h == null ? void 0 : h.coerce) || !1,
    ...E(h)
  });
  class lt extends v {
    constructor() {
      super(...arguments), this.min = this.gte, this.max = this.lte;
    }
    _parse(a) {
      if (this._def.coerce && (a.data = BigInt(a.data)), this._getType(a) !== f.ZodParsedType.bigint) {
        const x = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(x, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.bigint,
          received: x.parsedType
        }), l.INVALID;
      }
      let y;
      const g = new l.ParseStatus();
      for (const x of this._def.checks)
        x.kind === "min" ? (x.inclusive ? a.data < x.value : a.data <= x.value) && (y = this._getOrReturnCtx(a, y), (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.too_small,
          type: "bigint",
          minimum: x.value,
          inclusive: x.inclusive,
          message: x.message
        }), g.dirty()) : x.kind === "max" ? (x.inclusive ? a.data > x.value : a.data >= x.value) && (y = this._getOrReturnCtx(a, y), (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.too_big,
          type: "bigint",
          maximum: x.value,
          inclusive: x.inclusive,
          message: x.message
        }), g.dirty()) : x.kind === "multipleOf" ? a.data % x.value !== BigInt(0) && (y = this._getOrReturnCtx(a, y), (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.not_multiple_of,
          multipleOf: x.value,
          message: x.message
        }), g.dirty()) : f.util.assertNever(x);
      return { status: g.value, value: a.data };
    }
    gte(a, d) {
      return this.setLimit("min", a, !0, c.errorUtil.toString(d));
    }
    gt(a, d) {
      return this.setLimit("min", a, !1, c.errorUtil.toString(d));
    }
    lte(a, d) {
      return this.setLimit("max", a, !0, c.errorUtil.toString(d));
    }
    lt(a, d) {
      return this.setLimit("max", a, !1, c.errorUtil.toString(d));
    }
    setLimit(a, d, y, g) {
      return new lt({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind: a,
            value: d,
            inclusive: y,
            message: c.errorUtil.toString(g)
          }
        ]
      });
    }
    _addCheck(a) {
      return new lt({
        ...this._def,
        checks: [...this._def.checks, a]
      });
    }
    positive(a) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: !1,
        message: c.errorUtil.toString(a)
      });
    }
    negative(a) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: !1,
        message: c.errorUtil.toString(a)
      });
    }
    nonpositive(a) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: !0,
        message: c.errorUtil.toString(a)
      });
    }
    nonnegative(a) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: !0,
        message: c.errorUtil.toString(a)
      });
    }
    multipleOf(a, d) {
      return this._addCheck({
        kind: "multipleOf",
        value: a,
        message: c.errorUtil.toString(d)
      });
    }
    get minValue() {
      let a = null;
      for (const d of this._def.checks)
        d.kind === "min" && (a === null || d.value > a) && (a = d.value);
      return a;
    }
    get maxValue() {
      let a = null;
      for (const d of this._def.checks)
        d.kind === "max" && (a === null || d.value < a) && (a = d.value);
      return a;
    }
  }
  t.ZodBigInt = lt, lt.create = (h) => {
    var a;
    return new lt({
      checks: [],
      typeName: X.ZodBigInt,
      coerce: (a = h == null ? void 0 : h.coerce) !== null && a !== void 0 ? a : !1,
      ...E(h)
    });
  };
  class er extends v {
    _parse(a) {
      if (this._def.coerce && (a.data = !!a.data), this._getType(a) !== f.ZodParsedType.boolean) {
        const y = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.boolean,
          received: y.parsedType
        }), l.INVALID;
      }
      return (0, l.OK)(a.data);
    }
  }
  t.ZodBoolean = er, er.create = (h) => new er({
    typeName: X.ZodBoolean,
    coerce: (h == null ? void 0 : h.coerce) || !1,
    ...E(h)
  });
  class bt extends v {
    _parse(a) {
      if (this._def.coerce && (a.data = new Date(a.data)), this._getType(a) !== f.ZodParsedType.date) {
        const x = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(x, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.date,
          received: x.parsedType
        }), l.INVALID;
      }
      if (isNaN(a.data.getTime())) {
        const x = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(x, {
          code: p.ZodIssueCode.invalid_date
        }), l.INVALID;
      }
      const y = new l.ParseStatus();
      let g;
      for (const x of this._def.checks)
        x.kind === "min" ? a.data.getTime() < x.value && (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          code: p.ZodIssueCode.too_small,
          message: x.message,
          inclusive: !0,
          exact: !1,
          minimum: x.value,
          type: "date"
        }), y.dirty()) : x.kind === "max" ? a.data.getTime() > x.value && (g = this._getOrReturnCtx(a, g), (0, l.addIssueToContext)(g, {
          code: p.ZodIssueCode.too_big,
          message: x.message,
          inclusive: !0,
          exact: !1,
          maximum: x.value,
          type: "date"
        }), y.dirty()) : f.util.assertNever(x);
      return {
        status: y.value,
        value: new Date(a.data.getTime())
      };
    }
    _addCheck(a) {
      return new bt({
        ...this._def,
        checks: [...this._def.checks, a]
      });
    }
    min(a, d) {
      return this._addCheck({
        kind: "min",
        value: a.getTime(),
        message: c.errorUtil.toString(d)
      });
    }
    max(a, d) {
      return this._addCheck({
        kind: "max",
        value: a.getTime(),
        message: c.errorUtil.toString(d)
      });
    }
    get minDate() {
      let a = null;
      for (const d of this._def.checks)
        d.kind === "min" && (a === null || d.value > a) && (a = d.value);
      return a != null ? new Date(a) : null;
    }
    get maxDate() {
      let a = null;
      for (const d of this._def.checks)
        d.kind === "max" && (a === null || d.value < a) && (a = d.value);
      return a != null ? new Date(a) : null;
    }
  }
  t.ZodDate = bt, bt.create = (h) => new bt({
    checks: [],
    coerce: (h == null ? void 0 : h.coerce) || !1,
    typeName: X.ZodDate,
    ...E(h)
  });
  class Or extends v {
    _parse(a) {
      if (this._getType(a) !== f.ZodParsedType.symbol) {
        const y = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.symbol,
          received: y.parsedType
        }), l.INVALID;
      }
      return (0, l.OK)(a.data);
    }
  }
  t.ZodSymbol = Or, Or.create = (h) => new Or({
    typeName: X.ZodSymbol,
    ...E(h)
  });
  class tr extends v {
    _parse(a) {
      if (this._getType(a) !== f.ZodParsedType.undefined) {
        const y = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.undefined,
          received: y.parsedType
        }), l.INVALID;
      }
      return (0, l.OK)(a.data);
    }
  }
  t.ZodUndefined = tr, tr.create = (h) => new tr({
    typeName: X.ZodUndefined,
    ...E(h)
  });
  class rr extends v {
    _parse(a) {
      if (this._getType(a) !== f.ZodParsedType.null) {
        const y = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.null,
          received: y.parsedType
        }), l.INVALID;
      }
      return (0, l.OK)(a.data);
    }
  }
  t.ZodNull = rr, rr.create = (h) => new rr({
    typeName: X.ZodNull,
    ...E(h)
  });
  class ir extends v {
    constructor() {
      super(...arguments), this._any = !0;
    }
    _parse(a) {
      return (0, l.OK)(a.data);
    }
  }
  t.ZodAny = ir, ir.create = (h) => new ir({
    typeName: X.ZodAny,
    ...E(h)
  });
  class Nt extends v {
    constructor() {
      super(...arguments), this._unknown = !0;
    }
    _parse(a) {
      return (0, l.OK)(a.data);
    }
  }
  t.ZodUnknown = Nt, Nt.create = (h) => new Nt({
    typeName: X.ZodUnknown,
    ...E(h)
  });
  class Fe extends v {
    _parse(a) {
      const d = this._getOrReturnCtx(a);
      return (0, l.addIssueToContext)(d, {
        code: p.ZodIssueCode.invalid_type,
        expected: f.ZodParsedType.never,
        received: d.parsedType
      }), l.INVALID;
    }
  }
  t.ZodNever = Fe, Fe.create = (h) => new Fe({
    typeName: X.ZodNever,
    ...E(h)
  });
  class nr extends v {
    _parse(a) {
      if (this._getType(a) !== f.ZodParsedType.undefined) {
        const y = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.void,
          received: y.parsedType
        }), l.INVALID;
      }
      return (0, l.OK)(a.data);
    }
  }
  t.ZodVoid = nr, nr.create = (h) => new nr({
    typeName: X.ZodVoid,
    ...E(h)
  });
  class _e extends v {
    _parse(a) {
      const { ctx: d, status: y } = this._processInputParams(a), g = this._def;
      if (d.parsedType !== f.ZodParsedType.array)
        return (0, l.addIssueToContext)(d, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.array,
          received: d.parsedType
        }), l.INVALID;
      if (g.exactLength !== null) {
        const D = d.data.length > g.exactLength.value, _ = d.data.length < g.exactLength.value;
        (D || _) && ((0, l.addIssueToContext)(d, {
          code: D ? p.ZodIssueCode.too_big : p.ZodIssueCode.too_small,
          minimum: _ ? g.exactLength.value : void 0,
          maximum: D ? g.exactLength.value : void 0,
          type: "array",
          inclusive: !0,
          exact: !0,
          message: g.exactLength.message
        }), y.dirty());
      }
      if (g.minLength !== null && d.data.length < g.minLength.value && ((0, l.addIssueToContext)(d, {
        code: p.ZodIssueCode.too_small,
        minimum: g.minLength.value,
        type: "array",
        inclusive: !0,
        exact: !1,
        message: g.minLength.message
      }), y.dirty()), g.maxLength !== null && d.data.length > g.maxLength.value && ((0, l.addIssueToContext)(d, {
        code: p.ZodIssueCode.too_big,
        maximum: g.maxLength.value,
        type: "array",
        inclusive: !0,
        exact: !1,
        message: g.maxLength.message
      }), y.dirty()), d.common.async)
        return Promise.all([...d.data].map((D, _) => g.type._parseAsync(new m(d, D, d.path, _)))).then((D) => l.ParseStatus.mergeArray(y, D));
      const x = [...d.data].map((D, _) => g.type._parseSync(new m(d, D, d.path, _)));
      return l.ParseStatus.mergeArray(y, x);
    }
    get element() {
      return this._def.type;
    }
    min(a, d) {
      return new _e({
        ...this._def,
        minLength: { value: a, message: c.errorUtil.toString(d) }
      });
    }
    max(a, d) {
      return new _e({
        ...this._def,
        maxLength: { value: a, message: c.errorUtil.toString(d) }
      });
    }
    length(a, d) {
      return new _e({
        ...this._def,
        exactLength: { value: a, message: c.errorUtil.toString(d) }
      });
    }
    nonempty(a) {
      return this.min(1, a);
    }
  }
  t.ZodArray = _e, _e.create = (h, a) => new _e({
    type: h,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: X.ZodArray,
    ...E(a)
  });
  function ht(h) {
    if (h instanceof le) {
      const a = {};
      for (const d in h.shape) {
        const y = h.shape[d];
        a[d] = We.create(ht(y));
      }
      return new le({
        ...h._def,
        shape: () => a
      });
    } else return h instanceof _e ? new _e({
      ...h._def,
      type: ht(h.element)
    }) : h instanceof We ? We.create(ht(h.unwrap())) : h instanceof ut ? ut.create(ht(h.unwrap())) : h instanceof Ce ? Ce.create(h.items.map((a) => ht(a))) : h;
  }
  class le extends v {
    constructor() {
      super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      const a = this._def.shape(), d = f.util.objectKeys(a);
      return this._cached = { shape: a, keys: d };
    }
    _parse(a) {
      if (this._getType(a) !== f.ZodParsedType.object) {
        const N = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(N, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.object,
          received: N.parsedType
        }), l.INVALID;
      }
      const { status: y, ctx: g } = this._processInputParams(a), { shape: x, keys: D } = this._getCached(), _ = [];
      if (!(this._def.catchall instanceof Fe && this._def.unknownKeys === "strip"))
        for (const N in g.data)
          D.includes(N) || _.push(N);
      const I = [];
      for (const N of D) {
        const W = x[N], Je = g.data[N];
        I.push({
          key: { status: "valid", value: N },
          value: W._parse(new m(g, Je, g.path, N)),
          alwaysSet: N in g.data
        });
      }
      if (this._def.catchall instanceof Fe) {
        const N = this._def.unknownKeys;
        if (N === "passthrough")
          for (const W of _)
            I.push({
              key: { status: "valid", value: W },
              value: { status: "valid", value: g.data[W] }
            });
        else if (N === "strict")
          _.length > 0 && ((0, l.addIssueToContext)(g, {
            code: p.ZodIssueCode.unrecognized_keys,
            keys: _
          }), y.dirty());
        else if (N !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
      } else {
        const N = this._def.catchall;
        for (const W of _) {
          const Je = g.data[W];
          I.push({
            key: { status: "valid", value: W },
            value: N._parse(
              new m(g, Je, g.path, W)
              //, ctx.child(key), value, getParsedType(value)
            ),
            alwaysSet: W in g.data
          });
        }
      }
      return g.common.async ? Promise.resolve().then(async () => {
        const N = [];
        for (const W of I) {
          const Je = await W.key, Mu = await W.value;
          N.push({
            key: Je,
            value: Mu,
            alwaysSet: W.alwaysSet
          });
        }
        return N;
      }).then((N) => l.ParseStatus.mergeObjectSync(y, N)) : l.ParseStatus.mergeObjectSync(y, I);
    }
    get shape() {
      return this._def.shape();
    }
    strict(a) {
      return c.errorUtil.errToObj, new le({
        ...this._def,
        unknownKeys: "strict",
        ...a !== void 0 ? {
          errorMap: (d, y) => {
            var g, x, D, _;
            const I = (D = (x = (g = this._def).errorMap) === null || x === void 0 ? void 0 : x.call(g, d, y).message) !== null && D !== void 0 ? D : y.defaultError;
            return d.code === "unrecognized_keys" ? {
              message: (_ = c.errorUtil.errToObj(a).message) !== null && _ !== void 0 ? _ : I
            } : {
              message: I
            };
          }
        } : {}
      });
    }
    strip() {
      return new le({
        ...this._def,
        unknownKeys: "strip"
      });
    }
    passthrough() {
      return new le({
        ...this._def,
        unknownKeys: "passthrough"
      });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(a) {
      return new le({
        ...this._def,
        shape: () => ({
          ...this._def.shape(),
          ...a
        })
      });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(a) {
      return new le({
        unknownKeys: a._def.unknownKeys,
        catchall: a._def.catchall,
        shape: () => ({
          ...this._def.shape(),
          ...a._def.shape()
        }),
        typeName: X.ZodObject
      });
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(a, d) {
      return this.augment({ [a]: d });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(a) {
      return new le({
        ...this._def,
        catchall: a
      });
    }
    pick(a) {
      const d = {};
      return f.util.objectKeys(a).forEach((y) => {
        a[y] && this.shape[y] && (d[y] = this.shape[y]);
      }), new le({
        ...this._def,
        shape: () => d
      });
    }
    omit(a) {
      const d = {};
      return f.util.objectKeys(this.shape).forEach((y) => {
        a[y] || (d[y] = this.shape[y]);
      }), new le({
        ...this._def,
        shape: () => d
      });
    }
    /**
     * @deprecated
     */
    deepPartial() {
      return ht(this);
    }
    partial(a) {
      const d = {};
      return f.util.objectKeys(this.shape).forEach((y) => {
        const g = this.shape[y];
        a && !a[y] ? d[y] = g : d[y] = g.optional();
      }), new le({
        ...this._def,
        shape: () => d
      });
    }
    required(a) {
      const d = {};
      return f.util.objectKeys(this.shape).forEach((y) => {
        if (a && !a[y])
          d[y] = this.shape[y];
        else {
          let x = this.shape[y];
          for (; x instanceof We; )
            x = x._def.innerType;
          d[y] = x;
        }
      }), new le({
        ...this._def,
        shape: () => d
      });
    }
    keyof() {
      return Qn(f.util.objectKeys(this.shape));
    }
  }
  t.ZodObject = le, le.create = (h, a) => new le({
    shape: () => h,
    unknownKeys: "strip",
    catchall: Fe.create(),
    typeName: X.ZodObject,
    ...E(a)
  }), le.strictCreate = (h, a) => new le({
    shape: () => h,
    unknownKeys: "strict",
    catchall: Fe.create(),
    typeName: X.ZodObject,
    ...E(a)
  }), le.lazycreate = (h, a) => new le({
    shape: h,
    unknownKeys: "strip",
    catchall: Fe.create(),
    typeName: X.ZodObject,
    ...E(a)
  });
  class Ir extends v {
    _parse(a) {
      const { ctx: d } = this._processInputParams(a), y = this._def.options;
      function g(x) {
        for (const _ of x)
          if (_.result.status === "valid")
            return _.result;
        for (const _ of x)
          if (_.result.status === "dirty")
            return d.common.issues.push(..._.ctx.common.issues), _.result;
        const D = x.map((_) => new p.ZodError(_.ctx.common.issues));
        return (0, l.addIssueToContext)(d, {
          code: p.ZodIssueCode.invalid_union,
          unionErrors: D
        }), l.INVALID;
      }
      if (d.common.async)
        return Promise.all(y.map(async (x) => {
          const D = {
            ...d,
            common: {
              ...d.common,
              issues: []
            },
            parent: null
          };
          return {
            result: await x._parseAsync({
              data: d.data,
              path: d.path,
              parent: D
            }),
            ctx: D
          };
        })).then(g);
      {
        let x;
        const D = [];
        for (const I of y) {
          const N = {
            ...d,
            common: {
              ...d.common,
              issues: []
            },
            parent: null
          }, W = I._parseSync({
            data: d.data,
            path: d.path,
            parent: N
          });
          if (W.status === "valid")
            return W;
          W.status === "dirty" && !x && (x = { result: W, ctx: N }), N.common.issues.length && D.push(N.common.issues);
        }
        if (x)
          return d.common.issues.push(...x.ctx.common.issues), x.result;
        const _ = D.map((I) => new p.ZodError(I));
        return (0, l.addIssueToContext)(d, {
          code: p.ZodIssueCode.invalid_union,
          unionErrors: _
        }), l.INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  }
  t.ZodUnion = Ir, Ir.create = (h, a) => new Ir({
    options: h,
    typeName: X.ZodUnion,
    ...E(a)
  });
  const Ze = (h) => h instanceof Mr ? Ze(h.schema) : h instanceof Re ? Ze(h.innerType()) : h instanceof Mt ? [h.value] : h instanceof gt ? h.options : h instanceof or ? f.util.objectValues(h.enum) : h instanceof lr ? Ze(h._def.innerType) : h instanceof tr ? [void 0] : h instanceof rr ? [null] : h instanceof We ? [void 0, ...Ze(h.unwrap())] : h instanceof ut ? [null, ...Ze(h.unwrap())] : h instanceof cn || h instanceof qr ? Ze(h.unwrap()) : h instanceof qt ? Ze(h._def.innerType) : [];
  class ii extends v {
    _parse(a) {
      const { ctx: d } = this._processInputParams(a);
      if (d.parsedType !== f.ZodParsedType.object)
        return (0, l.addIssueToContext)(d, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.object,
          received: d.parsedType
        }), l.INVALID;
      const y = this.discriminator, g = d.data[y], x = this.optionsMap.get(g);
      return x ? d.common.async ? x._parseAsync({
        data: d.data,
        path: d.path,
        parent: d
      }) : x._parseSync({
        data: d.data,
        path: d.path,
        parent: d
      }) : ((0, l.addIssueToContext)(d, {
        code: p.ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [y]
      }), l.INVALID);
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(a, d, y) {
      const g = /* @__PURE__ */ new Map();
      for (const x of d) {
        const D = Ze(x.shape[a]);
        if (!D.length)
          throw new Error(`A discriminator value for key \`${a}\` could not be extracted from all schema options`);
        for (const _ of D) {
          if (g.has(_))
            throw new Error(`Discriminator property ${String(a)} has duplicate value ${String(_)}`);
          g.set(_, x);
        }
      }
      return new ii({
        typeName: X.ZodDiscriminatedUnion,
        discriminator: a,
        options: d,
        optionsMap: g,
        ...E(y)
      });
    }
  }
  t.ZodDiscriminatedUnion = ii;
  function un(h, a) {
    const d = (0, f.getParsedType)(h), y = (0, f.getParsedType)(a);
    if (h === a)
      return { valid: !0, data: h };
    if (d === f.ZodParsedType.object && y === f.ZodParsedType.object) {
      const g = f.util.objectKeys(a), x = f.util.objectKeys(h).filter((_) => g.indexOf(_) !== -1), D = { ...h, ...a };
      for (const _ of x) {
        const I = un(h[_], a[_]);
        if (!I.valid)
          return { valid: !1 };
        D[_] = I.data;
      }
      return { valid: !0, data: D };
    } else if (d === f.ZodParsedType.array && y === f.ZodParsedType.array) {
      if (h.length !== a.length)
        return { valid: !1 };
      const g = [];
      for (let x = 0; x < h.length; x++) {
        const D = h[x], _ = a[x], I = un(D, _);
        if (!I.valid)
          return { valid: !1 };
        g.push(I.data);
      }
      return { valid: !0, data: g };
    } else return d === f.ZodParsedType.date && y === f.ZodParsedType.date && +h == +a ? { valid: !0, data: h } : { valid: !1 };
  }
  class Et extends v {
    _parse(a) {
      const { status: d, ctx: y } = this._processInputParams(a), g = (x, D) => {
        if ((0, l.isAborted)(x) || (0, l.isAborted)(D))
          return l.INVALID;
        const _ = un(x.value, D.value);
        return _.valid ? (((0, l.isDirty)(x) || (0, l.isDirty)(D)) && d.dirty(), { status: d.value, value: _.data }) : ((0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_intersection_types
        }), l.INVALID);
      };
      return y.common.async ? Promise.all([
        this._def.left._parseAsync({
          data: y.data,
          path: y.path,
          parent: y
        }),
        this._def.right._parseAsync({
          data: y.data,
          path: y.path,
          parent: y
        })
      ]).then(([x, D]) => g(x, D)) : g(this._def.left._parseSync({
        data: y.data,
        path: y.path,
        parent: y
      }), this._def.right._parseSync({
        data: y.data,
        path: y.path,
        parent: y
      }));
    }
  }
  t.ZodIntersection = Et, Et.create = (h, a, d) => new Et({
    left: h,
    right: a,
    typeName: X.ZodIntersection,
    ...E(d)
  });
  class Ce extends v {
    _parse(a) {
      const { status: d, ctx: y } = this._processInputParams(a);
      if (y.parsedType !== f.ZodParsedType.array)
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.array,
          received: y.parsedType
        }), l.INVALID;
      if (y.data.length < this._def.items.length)
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: !0,
          exact: !1,
          type: "array"
        }), l.INVALID;
      !this._def.rest && y.data.length > this._def.items.length && ((0, l.addIssueToContext)(y, {
        code: p.ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), d.dirty());
      const x = [...y.data].map((D, _) => {
        const I = this._def.items[_] || this._def.rest;
        return I ? I._parse(new m(y, D, y.path, _)) : null;
      }).filter((D) => !!D);
      return y.common.async ? Promise.all(x).then((D) => l.ParseStatus.mergeArray(d, D)) : l.ParseStatus.mergeArray(d, x);
    }
    get items() {
      return this._def.items;
    }
    rest(a) {
      return new Ce({
        ...this._def,
        rest: a
      });
    }
  }
  t.ZodTuple = Ce, Ce.create = (h, a) => {
    if (!Array.isArray(h))
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    return new Ce({
      items: h,
      typeName: X.ZodTuple,
      rest: null,
      ...E(a)
    });
  };
  class sr extends v {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(a) {
      const { status: d, ctx: y } = this._processInputParams(a);
      if (y.parsedType !== f.ZodParsedType.object)
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.object,
          received: y.parsedType
        }), l.INVALID;
      const g = [], x = this._def.keyType, D = this._def.valueType;
      for (const _ in y.data)
        g.push({
          key: x._parse(new m(y, _, y.path, _)),
          value: D._parse(new m(y, y.data[_], y.path, _)),
          alwaysSet: _ in y.data
        });
      return y.common.async ? l.ParseStatus.mergeObjectAsync(d, g) : l.ParseStatus.mergeObjectSync(d, g);
    }
    get element() {
      return this._def.valueType;
    }
    static create(a, d, y) {
      return d instanceof v ? new sr({
        keyType: a,
        valueType: d,
        typeName: X.ZodRecord,
        ...E(y)
      }) : new sr({
        keyType: xe.create(),
        valueType: a,
        typeName: X.ZodRecord,
        ...E(d)
      });
    }
  }
  t.ZodRecord = sr;
  class Nr extends v {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(a) {
      const { status: d, ctx: y } = this._processInputParams(a);
      if (y.parsedType !== f.ZodParsedType.map)
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.map,
          received: y.parsedType
        }), l.INVALID;
      const g = this._def.keyType, x = this._def.valueType, D = [...y.data.entries()].map(([_, I], N) => ({
        key: g._parse(new m(y, _, y.path, [N, "key"])),
        value: x._parse(new m(y, I, y.path, [N, "value"]))
      }));
      if (y.common.async) {
        const _ = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (const I of D) {
            const N = await I.key, W = await I.value;
            if (N.status === "aborted" || W.status === "aborted")
              return l.INVALID;
            (N.status === "dirty" || W.status === "dirty") && d.dirty(), _.set(N.value, W.value);
          }
          return { status: d.value, value: _ };
        });
      } else {
        const _ = /* @__PURE__ */ new Map();
        for (const I of D) {
          const N = I.key, W = I.value;
          if (N.status === "aborted" || W.status === "aborted")
            return l.INVALID;
          (N.status === "dirty" || W.status === "dirty") && d.dirty(), _.set(N.value, W.value);
        }
        return { status: d.value, value: _ };
      }
    }
  }
  t.ZodMap = Nr, Nr.create = (h, a, d) => new Nr({
    valueType: a,
    keyType: h,
    typeName: X.ZodMap,
    ...E(d)
  });
  class He extends v {
    _parse(a) {
      const { status: d, ctx: y } = this._processInputParams(a);
      if (y.parsedType !== f.ZodParsedType.set)
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.set,
          received: y.parsedType
        }), l.INVALID;
      const g = this._def;
      g.minSize !== null && y.data.size < g.minSize.value && ((0, l.addIssueToContext)(y, {
        code: p.ZodIssueCode.too_small,
        minimum: g.minSize.value,
        type: "set",
        inclusive: !0,
        exact: !1,
        message: g.minSize.message
      }), d.dirty()), g.maxSize !== null && y.data.size > g.maxSize.value && ((0, l.addIssueToContext)(y, {
        code: p.ZodIssueCode.too_big,
        maximum: g.maxSize.value,
        type: "set",
        inclusive: !0,
        exact: !1,
        message: g.maxSize.message
      }), d.dirty());
      const x = this._def.valueType;
      function D(I) {
        const N = /* @__PURE__ */ new Set();
        for (const W of I) {
          if (W.status === "aborted")
            return l.INVALID;
          W.status === "dirty" && d.dirty(), N.add(W.value);
        }
        return { status: d.value, value: N };
      }
      const _ = [...y.data.values()].map((I, N) => x._parse(new m(y, I, y.path, N)));
      return y.common.async ? Promise.all(_).then((I) => D(I)) : D(_);
    }
    min(a, d) {
      return new He({
        ...this._def,
        minSize: { value: a, message: c.errorUtil.toString(d) }
      });
    }
    max(a, d) {
      return new He({
        ...this._def,
        maxSize: { value: a, message: c.errorUtil.toString(d) }
      });
    }
    size(a, d) {
      return this.min(a, d).max(a, d);
    }
    nonempty(a) {
      return this.min(1, a);
    }
  }
  t.ZodSet = He, He.create = (h, a) => new He({
    valueType: h,
    minSize: null,
    maxSize: null,
    typeName: X.ZodSet,
    ...E(a)
  });
  class ar extends v {
    constructor() {
      super(...arguments), this.validate = this.implement;
    }
    _parse(a) {
      const { ctx: d } = this._processInputParams(a);
      if (d.parsedType !== f.ZodParsedType.function)
        return (0, l.addIssueToContext)(d, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.function,
          received: d.parsedType
        }), l.INVALID;
      function y(_, I) {
        return (0, l.makeIssue)({
          data: _,
          path: d.path,
          errorMaps: [
            d.common.contextualErrorMap,
            d.schemaErrorMap,
            (0, u.getErrorMap)(),
            u.defaultErrorMap
          ].filter((N) => !!N),
          issueData: {
            code: p.ZodIssueCode.invalid_arguments,
            argumentsError: I
          }
        });
      }
      function g(_, I) {
        return (0, l.makeIssue)({
          data: _,
          path: d.path,
          errorMaps: [
            d.common.contextualErrorMap,
            d.schemaErrorMap,
            (0, u.getErrorMap)(),
            u.defaultErrorMap
          ].filter((N) => !!N),
          issueData: {
            code: p.ZodIssueCode.invalid_return_type,
            returnTypeError: I
          }
        });
      }
      const x = { errorMap: d.common.contextualErrorMap }, D = d.data;
      if (this._def.returns instanceof $t) {
        const _ = this;
        return (0, l.OK)(async function(...I) {
          const N = new p.ZodError([]), W = await _._def.args.parseAsync(I, x).catch((Ta) => {
            throw N.addIssue(y(I, Ta)), N;
          }), Je = await Reflect.apply(D, this, W);
          return await _._def.returns._def.type.parseAsync(Je, x).catch((Ta) => {
            throw N.addIssue(g(Je, Ta)), N;
          });
        });
      } else {
        const _ = this;
        return (0, l.OK)(function(...I) {
          const N = _._def.args.safeParse(I, x);
          if (!N.success)
            throw new p.ZodError([y(I, N.error)]);
          const W = Reflect.apply(D, this, N.data), Je = _._def.returns.safeParse(W, x);
          if (!Je.success)
            throw new p.ZodError([g(W, Je.error)]);
          return Je.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...a) {
      return new ar({
        ...this._def,
        args: Ce.create(a).rest(Nt.create())
      });
    }
    returns(a) {
      return new ar({
        ...this._def,
        returns: a
      });
    }
    implement(a) {
      return this.parse(a);
    }
    strictImplement(a) {
      return this.parse(a);
    }
    static create(a, d, y) {
      return new ar({
        args: a || Ce.create([]).rest(Nt.create()),
        returns: d || Nt.create(),
        typeName: X.ZodFunction,
        ...E(y)
      });
    }
  }
  t.ZodFunction = ar;
  class Mr extends v {
    get schema() {
      return this._def.getter();
    }
    _parse(a) {
      const { ctx: d } = this._processInputParams(a);
      return this._def.getter()._parse({ data: d.data, path: d.path, parent: d });
    }
  }
  t.ZodLazy = Mr, Mr.create = (h, a) => new Mr({
    getter: h,
    typeName: X.ZodLazy,
    ...E(a)
  });
  class Mt extends v {
    _parse(a) {
      if (a.data !== this._def.value) {
        const d = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(d, {
          received: d.data,
          code: p.ZodIssueCode.invalid_literal,
          expected: this._def.value
        }), l.INVALID;
      }
      return { status: "valid", value: a.data };
    }
    get value() {
      return this._def.value;
    }
  }
  t.ZodLiteral = Mt, Mt.create = (h, a) => new Mt({
    value: h,
    typeName: X.ZodLiteral,
    ...E(a)
  });
  function Qn(h, a) {
    return new gt({
      values: h,
      typeName: X.ZodEnum,
      ...E(a)
    });
  }
  class gt extends v {
    constructor() {
      super(...arguments), n.set(this, void 0);
    }
    _parse(a) {
      if (typeof a.data != "string") {
        const d = this._getOrReturnCtx(a), y = this._def.values;
        return (0, l.addIssueToContext)(d, {
          expected: f.util.joinValues(y),
          received: d.parsedType,
          code: p.ZodIssueCode.invalid_type
        }), l.INVALID;
      }
      if (e(this, n, "f") || r(this, n, new Set(this._def.values), "f"), !e(this, n, "f").has(a.data)) {
        const d = this._getOrReturnCtx(a), y = this._def.values;
        return (0, l.addIssueToContext)(d, {
          received: d.data,
          code: p.ZodIssueCode.invalid_enum_value,
          options: y
        }), l.INVALID;
      }
      return (0, l.OK)(a.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const a = {};
      for (const d of this._def.values)
        a[d] = d;
      return a;
    }
    get Values() {
      const a = {};
      for (const d of this._def.values)
        a[d] = d;
      return a;
    }
    get Enum() {
      const a = {};
      for (const d of this._def.values)
        a[d] = d;
      return a;
    }
    extract(a, d = this._def) {
      return gt.create(a, {
        ...this._def,
        ...d
      });
    }
    exclude(a, d = this._def) {
      return gt.create(this.options.filter((y) => !a.includes(y)), {
        ...this._def,
        ...d
      });
    }
  }
  t.ZodEnum = gt, n = /* @__PURE__ */ new WeakMap(), gt.create = Qn;
  class or extends v {
    constructor() {
      super(...arguments), s.set(this, void 0);
    }
    _parse(a) {
      const d = f.util.getValidEnumValues(this._def.values), y = this._getOrReturnCtx(a);
      if (y.parsedType !== f.ZodParsedType.string && y.parsedType !== f.ZodParsedType.number) {
        const g = f.util.objectValues(d);
        return (0, l.addIssueToContext)(y, {
          expected: f.util.joinValues(g),
          received: y.parsedType,
          code: p.ZodIssueCode.invalid_type
        }), l.INVALID;
      }
      if (e(this, s, "f") || r(this, s, new Set(f.util.getValidEnumValues(this._def.values)), "f"), !e(this, s, "f").has(a.data)) {
        const g = f.util.objectValues(d);
        return (0, l.addIssueToContext)(y, {
          received: y.data,
          code: p.ZodIssueCode.invalid_enum_value,
          options: g
        }), l.INVALID;
      }
      return (0, l.OK)(a.data);
    }
    get enum() {
      return this._def.values;
    }
  }
  t.ZodNativeEnum = or, s = /* @__PURE__ */ new WeakMap(), or.create = (h, a) => new or({
    values: h,
    typeName: X.ZodNativeEnum,
    ...E(a)
  });
  class $t extends v {
    unwrap() {
      return this._def.type;
    }
    _parse(a) {
      const { ctx: d } = this._processInputParams(a);
      if (d.parsedType !== f.ZodParsedType.promise && d.common.async === !1)
        return (0, l.addIssueToContext)(d, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.promise,
          received: d.parsedType
        }), l.INVALID;
      const y = d.parsedType === f.ZodParsedType.promise ? d.data : Promise.resolve(d.data);
      return (0, l.OK)(y.then((g) => this._def.type.parseAsync(g, {
        path: d.path,
        errorMap: d.common.contextualErrorMap
      })));
    }
  }
  t.ZodPromise = $t, $t.create = (h, a) => new $t({
    type: h,
    typeName: X.ZodPromise,
    ...E(a)
  });
  class Re extends v {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === X.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(a) {
      const { status: d, ctx: y } = this._processInputParams(a), g = this._def.effect || null, x = {
        addIssue: (D) => {
          (0, l.addIssueToContext)(y, D), D.fatal ? d.abort() : d.dirty();
        },
        get path() {
          return y.path;
        }
      };
      if (x.addIssue = x.addIssue.bind(x), g.type === "preprocess") {
        const D = g.transform(y.data, x);
        if (y.common.async)
          return Promise.resolve(D).then(async (_) => {
            if (d.value === "aborted")
              return l.INVALID;
            const I = await this._def.schema._parseAsync({
              data: _,
              path: y.path,
              parent: y
            });
            return I.status === "aborted" ? l.INVALID : I.status === "dirty" || d.value === "dirty" ? (0, l.DIRTY)(I.value) : I;
          });
        {
          if (d.value === "aborted")
            return l.INVALID;
          const _ = this._def.schema._parseSync({
            data: D,
            path: y.path,
            parent: y
          });
          return _.status === "aborted" ? l.INVALID : _.status === "dirty" || d.value === "dirty" ? (0, l.DIRTY)(_.value) : _;
        }
      }
      if (g.type === "refinement") {
        const D = (_) => {
          const I = g.refinement(_, x);
          if (y.common.async)
            return Promise.resolve(I);
          if (I instanceof Promise)
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          return _;
        };
        if (y.common.async === !1) {
          const _ = this._def.schema._parseSync({
            data: y.data,
            path: y.path,
            parent: y
          });
          return _.status === "aborted" ? l.INVALID : (_.status === "dirty" && d.dirty(), D(_.value), { status: d.value, value: _.value });
        } else
          return this._def.schema._parseAsync({ data: y.data, path: y.path, parent: y }).then((_) => _.status === "aborted" ? l.INVALID : (_.status === "dirty" && d.dirty(), D(_.value).then(() => ({ status: d.value, value: _.value }))));
      }
      if (g.type === "transform")
        if (y.common.async === !1) {
          const D = this._def.schema._parseSync({
            data: y.data,
            path: y.path,
            parent: y
          });
          if (!(0, l.isValid)(D))
            return D;
          const _ = g.transform(D.value, x);
          if (_ instanceof Promise)
            throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
          return { status: d.value, value: _ };
        } else
          return this._def.schema._parseAsync({ data: y.data, path: y.path, parent: y }).then((D) => (0, l.isValid)(D) ? Promise.resolve(g.transform(D.value, x)).then((_) => ({ status: d.value, value: _ })) : D);
      f.util.assertNever(g);
    }
  }
  t.ZodEffects = Re, t.ZodTransformer = Re, Re.create = (h, a, d) => new Re({
    schema: h,
    typeName: X.ZodEffects,
    effect: a,
    ...E(d)
  }), Re.createWithPreprocess = (h, a, d) => new Re({
    schema: a,
    effect: { type: "preprocess", transform: h },
    typeName: X.ZodEffects,
    ...E(d)
  });
  class We extends v {
    _parse(a) {
      return this._getType(a) === f.ZodParsedType.undefined ? (0, l.OK)(void 0) : this._def.innerType._parse(a);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  t.ZodOptional = We, We.create = (h, a) => new We({
    innerType: h,
    typeName: X.ZodOptional,
    ...E(a)
  });
  class ut extends v {
    _parse(a) {
      return this._getType(a) === f.ZodParsedType.null ? (0, l.OK)(null) : this._def.innerType._parse(a);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  t.ZodNullable = ut, ut.create = (h, a) => new ut({
    innerType: h,
    typeName: X.ZodNullable,
    ...E(a)
  });
  class lr extends v {
    _parse(a) {
      const { ctx: d } = this._processInputParams(a);
      let y = d.data;
      return d.parsedType === f.ZodParsedType.undefined && (y = this._def.defaultValue()), this._def.innerType._parse({
        data: y,
        path: d.path,
        parent: d
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  }
  t.ZodDefault = lr, lr.create = (h, a) => new lr({
    innerType: h,
    typeName: X.ZodDefault,
    defaultValue: typeof a.default == "function" ? a.default : () => a.default,
    ...E(a)
  });
  class qt extends v {
    _parse(a) {
      const { ctx: d } = this._processInputParams(a), y = {
        ...d,
        common: {
          ...d.common,
          issues: []
        }
      }, g = this._def.innerType._parse({
        data: y.data,
        path: y.path,
        parent: {
          ...y
        }
      });
      return (0, l.isAsync)(g) ? g.then((x) => ({
        status: "valid",
        value: x.status === "valid" ? x.value : this._def.catchValue({
          get error() {
            return new p.ZodError(y.common.issues);
          },
          input: y.data
        })
      })) : {
        status: "valid",
        value: g.status === "valid" ? g.value : this._def.catchValue({
          get error() {
            return new p.ZodError(y.common.issues);
          },
          input: y.data
        })
      };
    }
    removeCatch() {
      return this._def.innerType;
    }
  }
  t.ZodCatch = qt, qt.create = (h, a) => new qt({
    innerType: h,
    typeName: X.ZodCatch,
    catchValue: typeof a.catch == "function" ? a.catch : () => a.catch,
    ...E(a)
  });
  class ni extends v {
    _parse(a) {
      if (this._getType(a) !== f.ZodParsedType.nan) {
        const y = this._getOrReturnCtx(a);
        return (0, l.addIssueToContext)(y, {
          code: p.ZodIssueCode.invalid_type,
          expected: f.ZodParsedType.nan,
          received: y.parsedType
        }), l.INVALID;
      }
      return { status: "valid", value: a.data };
    }
  }
  t.ZodNaN = ni, ni.create = (h) => new ni({
    typeName: X.ZodNaN,
    ...E(h)
  }), t.BRAND = Symbol("zod_brand");
  class cn extends v {
    _parse(a) {
      const { ctx: d } = this._processInputParams(a), y = d.data;
      return this._def.type._parse({
        data: y,
        path: d.path,
        parent: d
      });
    }
    unwrap() {
      return this._def.type;
    }
  }
  t.ZodBranded = cn;
  class $r extends v {
    _parse(a) {
      const { status: d, ctx: y } = this._processInputParams(a);
      if (y.common.async)
        return (async () => {
          const x = await this._def.in._parseAsync({
            data: y.data,
            path: y.path,
            parent: y
          });
          return x.status === "aborted" ? l.INVALID : x.status === "dirty" ? (d.dirty(), (0, l.DIRTY)(x.value)) : this._def.out._parseAsync({
            data: x.value,
            path: y.path,
            parent: y
          });
        })();
      {
        const g = this._def.in._parseSync({
          data: y.data,
          path: y.path,
          parent: y
        });
        return g.status === "aborted" ? l.INVALID : g.status === "dirty" ? (d.dirty(), {
          status: "dirty",
          value: g.value
        }) : this._def.out._parseSync({
          data: g.value,
          path: y.path,
          parent: y
        });
      }
    }
    static create(a, d) {
      return new $r({
        in: a,
        out: d,
        typeName: X.ZodPipeline
      });
    }
  }
  t.ZodPipeline = $r;
  class qr extends v {
    _parse(a) {
      const d = this._def.innerType._parse(a), y = (g) => ((0, l.isValid)(g) && (g.value = Object.freeze(g.value)), g);
      return (0, l.isAsync)(d) ? d.then((g) => y(g)) : y(d);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  t.ZodReadonly = qr, qr.create = (h, a) => new qr({
    innerType: h,
    typeName: X.ZodReadonly,
    ...E(a)
  });
  function Yn(h, a = {}, d) {
    return h ? ir.create().superRefine((y, g) => {
      var x, D;
      if (!h(y)) {
        const _ = typeof a == "function" ? a(y) : typeof a == "string" ? { message: a } : a, I = (D = (x = _.fatal) !== null && x !== void 0 ? x : d) !== null && D !== void 0 ? D : !0, N = typeof _ == "string" ? { message: _ } : _;
        g.addIssue({ code: "custom", ...N, fatal: I });
      }
    }) : ir.create();
  }
  t.custom = Yn, t.late = {
    object: le.lazycreate
  };
  var X;
  (function(h) {
    h.ZodString = "ZodString", h.ZodNumber = "ZodNumber", h.ZodNaN = "ZodNaN", h.ZodBigInt = "ZodBigInt", h.ZodBoolean = "ZodBoolean", h.ZodDate = "ZodDate", h.ZodSymbol = "ZodSymbol", h.ZodUndefined = "ZodUndefined", h.ZodNull = "ZodNull", h.ZodAny = "ZodAny", h.ZodUnknown = "ZodUnknown", h.ZodNever = "ZodNever", h.ZodVoid = "ZodVoid", h.ZodArray = "ZodArray", h.ZodObject = "ZodObject", h.ZodUnion = "ZodUnion", h.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", h.ZodIntersection = "ZodIntersection", h.ZodTuple = "ZodTuple", h.ZodRecord = "ZodRecord", h.ZodMap = "ZodMap", h.ZodSet = "ZodSet", h.ZodFunction = "ZodFunction", h.ZodLazy = "ZodLazy", h.ZodLiteral = "ZodLiteral", h.ZodEnum = "ZodEnum", h.ZodEffects = "ZodEffects", h.ZodNativeEnum = "ZodNativeEnum", h.ZodOptional = "ZodOptional", h.ZodNullable = "ZodNullable", h.ZodDefault = "ZodDefault", h.ZodCatch = "ZodCatch", h.ZodPromise = "ZodPromise", h.ZodBranded = "ZodBranded", h.ZodPipeline = "ZodPipeline", h.ZodReadonly = "ZodReadonly";
  })(X = t.ZodFirstPartyTypeKind || (t.ZodFirstPartyTypeKind = {}));
  const fa = (h, a = {
    message: `Input not instance of ${h.name}`
  }) => Yn((d) => d instanceof h, a);
  t.instanceof = fa;
  const si = xe.create;
  t.string = si;
  const pn = ot.create;
  t.number = pn;
  const ur = ni.create;
  t.nan = ur;
  const dn = lt.create;
  t.bigint = dn;
  const ai = er.create;
  t.boolean = ai;
  const es = bt.create;
  t.date = es;
  const ya = Or.create;
  t.symbol = ya;
  const ts = tr.create;
  t.undefined = ts;
  const ma = rr.create;
  t.null = ma;
  const rs = ir.create;
  t.any = rs;
  const is = Nt.create;
  t.unknown = is;
  const ba = Fe.create;
  t.never = ba;
  const ha = nr.create;
  t.void = ha;
  const ns = _e.create;
  t.array = ns;
  const ss = le.create;
  t.object = ss;
  const Ea = le.strictCreate;
  t.strictObject = Ea;
  const ga = Ir.create;
  t.union = ga;
  const xa = ii.create;
  t.discriminatedUnion = xa;
  const Ra = Et.create;
  t.intersection = Ra;
  const R = Ce.create;
  t.tuple = R;
  const B = sr.create;
  t.record = B;
  const j = Nr.create;
  t.map = j;
  const Z = He.create;
  t.set = Z;
  const ne = ar.create;
  t.function = ne;
  const se = Mr.create;
  t.lazy = se;
  const Y = Mt.create;
  t.literal = Y;
  const J = gt.create;
  t.enum = J;
  const Ae = or.create;
  t.nativeEnum = Ae;
  const fe = $t.create;
  t.promise = fe;
  const ye = Re.create;
  t.effect = ye, t.transformer = ye;
  const Ve = We.create;
  t.optional = Ve;
  const cr = ut.create;
  t.nullable = cr;
  const Gt = Re.createWithPreprocess;
  t.preprocess = Gt;
  const we = $r.create;
  t.pipeline = we;
  const fn = () => si().optional();
  t.ostring = fn;
  const Aa = () => pn().optional();
  t.onumber = Aa;
  const va = () => ai().optional();
  t.oboolean = va, t.coerce = {
    string: (h) => xe.create({ ...h, coerce: !0 }),
    number: (h) => ot.create({ ...h, coerce: !0 }),
    boolean: (h) => er.create({
      ...h,
      coerce: !0
    }),
    bigint: (h) => lt.create({ ...h, coerce: !0 }),
    date: (h) => bt.create({ ...h, coerce: !0 })
  }, t.NEVER = l.INVALID;
})(np);
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(n, s, u, c) {
    c === void 0 && (c = u), Object.defineProperty(n, c, { enumerable: !0, get: function() {
      return s[u];
    } });
  } : function(n, s, u, c) {
    c === void 0 && (c = u), n[c] = s[u];
  }), r = L && L.__exportStar || function(n, s) {
    for (var u in n) u !== "default" && !Object.prototype.hasOwnProperty.call(s, u) && e(s, n, u);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), r(Tt, t), r(qa, t), r(ip, t), r(_n, t), r(np, t), r(_t, t);
})(ja);
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(c, l, f, p) {
    p === void 0 && (p = f), Object.defineProperty(c, p, { enumerable: !0, get: function() {
      return l[f];
    } });
  } : function(c, l, f, p) {
    p === void 0 && (p = f), c[p] = l[f];
  }), r = L && L.__setModuleDefault || (Object.create ? function(c, l) {
    Object.defineProperty(c, "default", { enumerable: !0, value: l });
  } : function(c, l) {
    c.default = l;
  }), n = L && L.__importStar || function(c) {
    if (c && c.__esModule) return c;
    var l = {};
    if (c != null) for (var f in c) f !== "default" && Object.prototype.hasOwnProperty.call(c, f) && e(l, c, f);
    return r(l, c), l;
  }, s = L && L.__exportStar || function(c, l) {
    for (var f in c) f !== "default" && !Object.prototype.hasOwnProperty.call(l, f) && e(l, c, f);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), t.z = void 0;
  const u = n(ja);
  t.z = u, s(ja, t), t.default = u;
})(wr);
var Jr = {}, Ga = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.DisallowedDomainError = t.UnsupportedDomainError = t.ReservedHandleError = t.InvalidHandleError = t.isValidTld = t.isValidHandle = t.normalizeAndEnsureValidHandle = t.normalizeHandle = t.ensureValidHandleRegex = t.ensureValidHandle = t.DISALLOWED_TLDS = t.INVALID_HANDLE = void 0, t.INVALID_HANDLE = "handle.invalid", t.DISALLOWED_TLDS = [
    ".local",
    ".arpa",
    ".invalid",
    ".localhost",
    ".internal",
    ".example",
    ".alt",
    // policy could concievably change on ".onion" some day
    ".onion"
    // NOTE: .test is allowed in testing and devopment. In practical terms
    // "should" "never" actually resolve and get registered in production
  ];
  const e = (A) => {
    if (!/^[a-zA-Z0-9.-]*$/.test(A))
      throw new l("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");
    if (A.length > 253)
      throw new l("Handle is too long (253 chars max)");
    const E = A.split(".");
    if (E.length < 2)
      throw new l("Handle domain needs at least two parts");
    for (let v = 0; v < E.length; v++) {
      const k = E[v];
      if (k.length < 1)
        throw new l("Handle parts can not be empty");
      if (k.length > 63)
        throw new l("Handle part too long (max 63 chars)");
      if (k.endsWith("-") || k.startsWith("-"))
        throw new l("Handle parts can not start or end with hyphens");
      if (v + 1 === E.length && !/^[a-zA-Z]/.test(k))
        throw new l("Handle final component (TLD) must start with ASCII letter");
    }
  };
  t.ensureValidHandle = e;
  const r = (A) => {
    if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(A))
      throw new l("Handle didn't validate via regex");
    if (A.length > 253)
      throw new l("Handle is too long (253 chars max)");
  };
  t.ensureValidHandleRegex = r;
  const n = (A) => A.toLowerCase();
  t.normalizeHandle = n;
  const s = (A) => {
    const E = (0, t.normalizeHandle)(A);
    return (0, t.ensureValidHandle)(E), E;
  };
  t.normalizeAndEnsureValidHandle = s;
  const u = (A) => {
    try {
      (0, t.ensureValidHandle)(A);
    } catch (E) {
      if (E instanceof l)
        return !1;
      throw E;
    }
    return !0;
  };
  t.isValidHandle = u;
  const c = (A) => !t.DISALLOWED_TLDS.some((E) => A.endsWith(E));
  t.isValidTld = c;
  class l extends Error {
  }
  t.InvalidHandleError = l;
  class f extends Error {
  }
  t.ReservedHandleError = f;
  class p extends Error {
  }
  t.UnsupportedDomainError = p;
  class m extends Error {
  }
  t.DisallowedDomainError = m;
})(Ga);
var Jt = {};
Object.defineProperty(Jt, "__esModule", { value: !0 });
Jt.InvalidDidError = Jt.ensureValidDidRegex = Jt.ensureValidDid = void 0;
const vm = (t) => {
  if (!t.startsWith("did:"))
    throw new Zt('DID requires "did:" prefix');
  if (!/^[a-zA-Z0-9._:%-]*$/.test(t))
    throw new Zt("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");
  const { length: e, 1: r } = t.split(":");
  if (e < 3)
    throw new Zt("DID requires prefix, method, and method-specific content");
  if (!/^[a-z]+$/.test(r))
    throw new Zt("DID method must be lower-case letters");
  if (t.endsWith(":") || t.endsWith("%"))
    throw new Zt('DID can not end with ":" or "%"');
  if (t.length > 2 * 1024)
    throw new Zt("DID is too long (2048 chars max)");
};
Jt.ensureValidDid = vm;
const Tm = (t) => {
  if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(t))
    throw new Zt("DID didn't validate via regex");
  if (t.length > 2 * 1024)
    throw new Zt("DID is too long (2048 chars max)");
};
Jt.ensureValidDidRegex = Tm;
class Zt extends Error {
}
Jt.InvalidDidError = Zt;
var za = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.InvalidNsidError = t.ensureValidNsidRegex = t.ensureValidNsid = t.NSID = void 0;
  class e {
    static parse(c) {
      return new e(c);
    }
    static create(c, l) {
      const f = [...c.split(".").reverse(), l].join(".");
      return new e(f);
    }
    static isValid(c) {
      try {
        return e.parse(c), !0;
      } catch {
        return !1;
      }
    }
    constructor(c) {
      Object.defineProperty(this, "segments", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: []
      }), (0, t.ensureValidNsid)(c), this.segments = c.split(".");
    }
    get authority() {
      return this.segments.slice(0, this.segments.length - 1).reverse().join(".");
    }
    get name() {
      return this.segments.at(this.segments.length - 1);
    }
    toString() {
      return this.segments.join(".");
    }
  }
  t.NSID = e;
  const r = (u) => {
    const c = u;
    if (!/^[a-zA-Z0-9.-]*$/.test(c))
      throw new s("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");
    if (c.length > 317)
      throw new s("NSID is too long (317 chars max)");
    const l = c.split(".");
    if (l.length < 3)
      throw new s("NSID needs at least three parts");
    for (let f = 0; f < l.length; f++) {
      const p = l[f];
      if (p.length < 1)
        throw new s("NSID parts can not be empty");
      if (p.length > 63)
        throw new s("NSID part too long (max 63 chars)");
      if (p.endsWith("-") || p.startsWith("-"))
        throw new s("NSID parts can not start or end with hyphen");
      if (/^[0-9]/.test(p) && f === 0)
        throw new s("NSID first part may not start with a digit");
      if (!/^[a-zA-Z]+$/.test(p) && f + 1 === l.length)
        throw new s("NSID name part must be only letters");
    }
  };
  t.ensureValidNsid = r;
  const n = (u) => {
    if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(u))
      throw new s("NSID didn't validate via regex");
    if (u.length > 317)
      throw new s("NSID is too long (317 chars max)");
  };
  t.ensureValidNsidRegex = n;
  class s extends Error {
  }
  t.InvalidNsidError = s;
})(za);
var ap = {}, pi = {};
Object.defineProperty(pi, "__esModule", { value: !0 });
pi.ensureValidAtUriRegex = pi.ensureValidAtUri = void 0;
const op = Ga, lp = Jt, up = za, _m = (t) => {
  const e = t.split("#");
  if (e.length > 2)
    throw new Error('ATURI can have at most one "#", separating fragment out');
  const r = e[1] || null;
  if (t = e[0], !/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(t))
    throw new Error("Disallowed characters in ATURI (ASCII)");
  const n = t.split("/");
  if (n.length >= 3 && (n[0] !== "at:" || n[1].length !== 0))
    throw new Error('ATURI must start with "at://"');
  if (n.length < 3)
    throw new Error("ATURI requires at least method and authority sections");
  try {
    n[2].startsWith("did:") ? (0, lp.ensureValidDid)(n[2]) : (0, op.ensureValidHandle)(n[2]);
  } catch {
    throw new Error("ATURI authority must be a valid handle or DID");
  }
  if (n.length >= 4) {
    if (n[3].length === 0)
      throw new Error("ATURI can not have a slash after authority without a path segment");
    try {
      (0, up.ensureValidNsid)(n[3]);
    } catch {
      throw new Error("ATURI requires first path segment (if supplied) to be valid NSID");
    }
  }
  if (n.length >= 5 && n[4].length === 0)
    throw new Error("ATURI can not have a slash after collection, unless record key is provided");
  if (n.length >= 6)
    throw new Error("ATURI path can have at most two parts, and no trailing slash");
  if (e.length >= 2 && r == null)
    throw new Error("ATURI fragment must be non-empty and start with slash");
  if (r != null) {
    if (r.length === 0 || r[0] !== "/")
      throw new Error("ATURI fragment must be non-empty and start with slash");
    if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(r))
      throw new Error("Disallowed characters in ATURI fragment (ASCII)");
  }
  if (t.length > 8 * 1024)
    throw new Error("ATURI is far too long");
};
pi.ensureValidAtUri = _m;
const Cm = (t) => {
  const e = /^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/, r = t.match(e);
  if (!r || !r.groups)
    throw new Error("ATURI didn't validate via regex");
  const n = r.groups;
  try {
    (0, op.ensureValidHandleRegex)(n.authority);
  } catch {
    try {
      (0, lp.ensureValidDidRegex)(n.authority);
    } catch {
      throw new Error("ATURI authority must be a valid handle or DID");
    }
  }
  if (n.collection)
    try {
      (0, up.ensureValidNsidRegex)(n.collection);
    } catch {
      throw new Error("ATURI collection path segment must be a valid NSID");
    }
  if (t.length > 8 * 1024)
    throw new Error("ATURI is far too long");
};
pi.ensureValidAtUriRegex = Cm;
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(l, f, p, m) {
    m === void 0 && (m = p);
    var A = Object.getOwnPropertyDescriptor(f, p);
    (!A || ("get" in A ? !f.__esModule : A.writable || A.configurable)) && (A = { enumerable: !0, get: function() {
      return f[p];
    } }), Object.defineProperty(l, m, A);
  } : function(l, f, p, m) {
    m === void 0 && (m = p), l[m] = f[p];
  }), r = L && L.__exportStar || function(l, f) {
    for (var p in l) p !== "default" && !Object.prototype.hasOwnProperty.call(f, p) && e(f, l, p);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), t.AtUri = t.ATP_URI_REGEX = void 0, r(pi, t), t.ATP_URI_REGEX = // proto-    --did--------------   --name----------------   --path----   --query--   --hash--
  /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
  const n = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
  class s {
    constructor(f, p) {
      Object.defineProperty(this, "hash", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      }), Object.defineProperty(this, "host", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      }), Object.defineProperty(this, "pathname", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      }), Object.defineProperty(this, "searchParams", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      });
      let m;
      if (p) {
        if (m = u(p), !m)
          throw new Error(`Invalid at uri: ${p}`);
        const A = c(f);
        if (!A)
          throw new Error(`Invalid path: ${f}`);
        Object.assign(m, A);
      } else if (m = u(f), !m)
        throw new Error(`Invalid at uri: ${f}`);
      this.hash = m.hash, this.host = m.host, this.pathname = m.pathname, this.searchParams = m.searchParams;
    }
    static make(f, p, m) {
      let A = f;
      return p && (A += "/" + p), m && (A += "/" + m), new s(A);
    }
    get protocol() {
      return "at:";
    }
    get origin() {
      return `at://${this.host}`;
    }
    get hostname() {
      return this.host;
    }
    set hostname(f) {
      this.host = f;
    }
    get search() {
      return this.searchParams.toString();
    }
    set search(f) {
      this.searchParams = new URLSearchParams(f);
    }
    get collection() {
      return this.pathname.split("/").filter(Boolean)[0] || "";
    }
    set collection(f) {
      const p = this.pathname.split("/").filter(Boolean);
      p[0] = f, this.pathname = p.join("/");
    }
    get rkey() {
      return this.pathname.split("/").filter(Boolean)[1] || "";
    }
    set rkey(f) {
      const p = this.pathname.split("/").filter(Boolean);
      p[0] || (p[0] = "undefined"), p[1] = f, this.pathname = p.join("/");
    }
    get href() {
      return this.toString();
    }
    toString() {
      let f = this.pathname || "/";
      f.startsWith("/") || (f = `/${f}`);
      let p = this.searchParams.toString();
      p && !p.startsWith("?") && (p = `?${p}`);
      let m = this.hash;
      return m && !m.startsWith("#") && (m = `#${m}`), `at://${this.host}${f}${p}${m}`;
    }
  }
  t.AtUri = s;
  function u(l) {
    const f = t.ATP_URI_REGEX.exec(l);
    if (f)
      return {
        hash: f[5] || "",
        host: f[2] || "",
        pathname: f[3] || "",
        searchParams: new URLSearchParams(f[4] || "")
      };
  }
  function c(l) {
    const f = n.exec(l);
    if (f)
      return {
        hash: f[3] || "",
        pathname: f[1] || "",
        searchParams: new URLSearchParams(f[2] || "")
      };
  }
})(ap);
var cp = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.InvalidTidError = t.isValidTid = t.ensureValidTid = void 0;
  const e = (s) => {
    if (s.length !== 13)
      throw new n("TID must be 13 characters");
    if (!/^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/.test(s))
      throw new n("TID syntax not valid (regex)");
  };
  t.ensureValidTid = e;
  const r = (s) => {
    try {
      (0, t.ensureValidTid)(s);
    } catch (u) {
      if (u instanceof n)
        return !1;
      throw u;
    }
    return !0;
  };
  t.isValidTid = r;
  class n extends Error {
  }
  t.InvalidTidError = n;
})(cp);
var pp = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.InvalidRecordKeyError = t.isValidRecordKey = t.ensureValidRecordKey = void 0;
  const e = (s) => {
    if (s.length > 512 || s.length < 1)
      throw new n("record key must be 1 to 512 characters");
    if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(s))
      throw new n("record key syntax not valid (regex)");
    if (s === "." || s === "..")
      throw new n('record key can not be "." or ".."');
  };
  t.ensureValidRecordKey = e;
  const r = (s) => {
    try {
      (0, t.ensureValidRecordKey)(s);
    } catch (u) {
      if (u instanceof n)
        return !1;
      throw u;
    }
    return !0;
  };
  t.isValidRecordKey = r;
  class n extends Error {
  }
  t.InvalidRecordKeyError = n;
})(pp);
var dp = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.InvalidDatetimeError = t.normalizeDatetimeAlways = t.normalizeDatetime = t.isValidDatetime = t.ensureValidDatetime = void 0;
  const e = (c) => {
    const l = new Date(c);
    if (isNaN(l.getTime()))
      throw new u("datetime did not parse as ISO 8601");
    if (l.toISOString().startsWith("-"))
      throw new u("datetime normalized to a negative time");
    if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(c))
      throw new u("datetime didn't validate via regex");
    if (c.length > 64)
      throw new u("datetime is too long (64 chars max)");
    if (c.endsWith("-00:00"))
      throw new u('datetime can not use "-00:00" for UTC timezone');
    if (c.startsWith("000"))
      throw new u("datetime so close to year zero not allowed");
  };
  t.ensureValidDatetime = e;
  const r = (c) => {
    try {
      (0, t.ensureValidDatetime)(c);
    } catch (l) {
      if (l instanceof u)
        return !1;
      throw l;
    }
    return !0;
  };
  t.isValidDatetime = r;
  const n = (c) => {
    if ((0, t.isValidDatetime)(c)) {
      const p = new Date(c).toISOString();
      if ((0, t.isValidDatetime)(p))
        return p;
    }
    if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(c)) {
      const p = /* @__PURE__ */ new Date(c + "Z");
      if (!isNaN(p.getTime())) {
        const m = p.toISOString();
        if ((0, t.isValidDatetime)(m))
          return m;
      }
    }
    const l = new Date(c);
    if (isNaN(l.getTime()))
      throw new u("datetime did not parse as any timestamp format");
    const f = l.toISOString();
    if ((0, t.isValidDatetime)(f))
      return f;
    throw new u("datetime normalized to invalid timestamp string");
  };
  t.normalizeDatetime = n;
  const s = (c) => {
    try {
      return (0, t.normalizeDatetime)(c);
    } catch (l) {
      if (l instanceof u)
        return (/* @__PURE__ */ new Date(0)).toISOString();
      throw l;
    }
  };
  t.normalizeDatetimeAlways = s;
  class u extends Error {
  }
  t.InvalidDatetimeError = u;
})(dp);
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(n, s, u, c) {
    c === void 0 && (c = u);
    var l = Object.getOwnPropertyDescriptor(s, u);
    (!l || ("get" in l ? !s.__esModule : l.writable || l.configurable)) && (l = { enumerable: !0, get: function() {
      return s[u];
    } }), Object.defineProperty(n, c, l);
  } : function(n, s, u, c) {
    c === void 0 && (c = u), n[c] = s[u];
  }), r = L && L.__exportStar || function(n, s) {
    for (var u in n) u !== "default" && !Object.prototype.hasOwnProperty.call(s, u) && e(s, n, u);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), r(Ga, t), r(Jt, t), r(za, t), r(ap, t), r(cp, t), r(pp, t), r(dp, t);
})(Jr);
var Qr = {};
Object.defineProperty(Qr, "__esModule", { value: !0 });
Qr.toLexUri = wm;
Qr.toConcreteTypes = Sm;
Qr.requiredPropertiesRefinement = Lm;
const _a = wr;
function wm(t, e) {
  if (t.split("#").length > 2)
    throw new Error("Uri can only have one hash segment");
  if (t.startsWith("lex:"))
    return t;
  if (t.startsWith("#")) {
    if (!e)
      throw new Error(`Unable to resolve uri without anchor: ${t}`);
    return `${e}${t}`;
  }
  return `lex:${t}`;
}
function Sm(t, e) {
  return e.type === "ref" ? [t.getDefOrThrow(e.ref)] : e.type === "union" ? e.refs.map((r) => t.getDefOrThrow(r)).flat() : [e];
}
function Lm(t, e) {
  if (t.required !== void 0) {
    if (!Array.isArray(t.required)) {
      e.addIssue({
        code: _a.z.ZodIssueCode.invalid_type,
        received: typeof t.required,
        expected: "array"
      });
      return;
    }
    if (t.properties === void 0) {
      t.required.length > 0 && e.addIssue({
        code: _a.z.ZodIssueCode.custom,
        message: "Required fields defined but no properties defined"
      });
      return;
    }
    for (const r of t.required)
      t.properties[r] === void 0 && e.addIssue({
        code: _a.z.ZodIssueCode.custom,
        message: `Required field "${r}" not defined`
      });
  }
}
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.LexiconDefNotFoundError = t.InvalidLexiconError = t.ValidationError = t.discriminatedObject = t.lexiconDoc = t.lexUserType = t.lexRecord = t.lexXrpcSubscription = t.lexXrpcProcedure = t.lexXrpcQuery = t.lexXrpcError = t.lexXrpcSubscriptionMessage = t.lexXrpcBody = t.lexXrpcParameters = t.lexObject = t.lexToken = t.lexPrimitiveArray = t.lexArray = t.lexBlob = t.lexRefVariant = t.lexRefUnion = t.lexRef = t.lexIpldType = t.lexCidLink = t.lexBytes = t.lexPrimitive = t.lexUnknown = t.lexString = t.lexStringFormat = t.lexInteger = t.lexBoolean = void 0, t.isValidLexiconDoc = s, t.isObj = u, t.hasProp = c, t.isDiscriminatedObject = l, t.parseLexiconDoc = f;
  const e = wr, r = Jr, n = Qr;
  t.lexBoolean = e.z.object({
    type: e.z.literal("boolean"),
    description: e.z.string().optional(),
    default: e.z.boolean().optional(),
    const: e.z.boolean().optional()
  }).strict(), t.lexInteger = e.z.object({
    type: e.z.literal("integer"),
    description: e.z.string().optional(),
    default: e.z.number().int().optional(),
    minimum: e.z.number().int().optional(),
    maximum: e.z.number().int().optional(),
    enum: e.z.number().int().array().optional(),
    const: e.z.number().int().optional()
  }).strict(), t.lexStringFormat = e.z.enum([
    "datetime",
    "uri",
    "at-uri",
    "did",
    "handle",
    "at-identifier",
    "nsid",
    "cid",
    "language",
    "tid",
    "record-key"
  ]), t.lexString = e.z.object({
    type: e.z.literal("string"),
    format: t.lexStringFormat.optional(),
    description: e.z.string().optional(),
    default: e.z.string().optional(),
    minLength: e.z.number().int().optional(),
    maxLength: e.z.number().int().optional(),
    minGraphemes: e.z.number().int().optional(),
    maxGraphemes: e.z.number().int().optional(),
    enum: e.z.string().array().optional(),
    const: e.z.string().optional(),
    knownValues: e.z.string().array().optional()
  }).strict(), t.lexUnknown = e.z.object({
    type: e.z.literal("unknown"),
    description: e.z.string().optional()
  }).strict(), t.lexPrimitive = e.z.discriminatedUnion("type", [
    t.lexBoolean,
    t.lexInteger,
    t.lexString,
    t.lexUnknown
  ]), t.lexBytes = e.z.object({
    type: e.z.literal("bytes"),
    description: e.z.string().optional(),
    maxLength: e.z.number().optional(),
    minLength: e.z.number().optional()
  }).strict(), t.lexCidLink = e.z.object({
    type: e.z.literal("cid-link"),
    description: e.z.string().optional()
  }).strict(), t.lexIpldType = e.z.discriminatedUnion("type", [t.lexBytes, t.lexCidLink]), t.lexRef = e.z.object({
    type: e.z.literal("ref"),
    description: e.z.string().optional(),
    ref: e.z.string()
  }).strict(), t.lexRefUnion = e.z.object({
    type: e.z.literal("union"),
    description: e.z.string().optional(),
    refs: e.z.string().array(),
    closed: e.z.boolean().optional()
  }).strict(), t.lexRefVariant = e.z.discriminatedUnion("type", [t.lexRef, t.lexRefUnion]), t.lexBlob = e.z.object({
    type: e.z.literal("blob"),
    description: e.z.string().optional(),
    accept: e.z.string().array().optional(),
    maxSize: e.z.number().optional()
  }).strict(), t.lexArray = e.z.object({
    type: e.z.literal("array"),
    description: e.z.string().optional(),
    items: e.z.discriminatedUnion("type", [
      // lexPrimitive
      t.lexBoolean,
      t.lexInteger,
      t.lexString,
      t.lexUnknown,
      // lexIpldType
      t.lexBytes,
      t.lexCidLink,
      // lexRefVariant
      t.lexRef,
      t.lexRefUnion,
      // other
      t.lexBlob
    ]),
    minLength: e.z.number().int().optional(),
    maxLength: e.z.number().int().optional()
  }).strict(), t.lexPrimitiveArray = t.lexArray.merge(e.z.object({
    items: t.lexPrimitive
  }).strict()), t.lexToken = e.z.object({
    type: e.z.literal("token"),
    description: e.z.string().optional()
  }).strict(), t.lexObject = e.z.object({
    type: e.z.literal("object"),
    description: e.z.string().optional(),
    required: e.z.string().array().optional(),
    nullable: e.z.string().array().optional(),
    properties: e.z.record(e.z.discriminatedUnion("type", [
      t.lexArray,
      // lexPrimitive
      t.lexBoolean,
      t.lexInteger,
      t.lexString,
      t.lexUnknown,
      // lexIpldType
      t.lexBytes,
      t.lexCidLink,
      // lexRefVariant
      t.lexRef,
      t.lexRefUnion,
      // other
      t.lexBlob
    ]))
  }).strict().superRefine(n.requiredPropertiesRefinement), t.lexXrpcParameters = e.z.object({
    type: e.z.literal("params"),
    description: e.z.string().optional(),
    required: e.z.string().array().optional(),
    properties: e.z.record(e.z.discriminatedUnion("type", [
      t.lexPrimitiveArray,
      // lexPrimitive
      t.lexBoolean,
      t.lexInteger,
      t.lexString,
      t.lexUnknown
    ]))
  }).strict().superRefine(n.requiredPropertiesRefinement), t.lexXrpcBody = e.z.object({
    description: e.z.string().optional(),
    encoding: e.z.string(),
    // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
    schema: e.z.union([t.lexRefVariant, t.lexObject]).optional()
  }).strict(), t.lexXrpcSubscriptionMessage = e.z.object({
    description: e.z.string().optional(),
    // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
    schema: e.z.union([t.lexRefVariant, t.lexObject]).optional()
  }).strict(), t.lexXrpcError = e.z.object({
    name: e.z.string(),
    description: e.z.string().optional()
  }).strict(), t.lexXrpcQuery = e.z.object({
    type: e.z.literal("query"),
    description: e.z.string().optional(),
    parameters: t.lexXrpcParameters.optional(),
    output: t.lexXrpcBody.optional(),
    errors: t.lexXrpcError.array().optional()
  }).strict(), t.lexXrpcProcedure = e.z.object({
    type: e.z.literal("procedure"),
    description: e.z.string().optional(),
    parameters: t.lexXrpcParameters.optional(),
    input: t.lexXrpcBody.optional(),
    output: t.lexXrpcBody.optional(),
    errors: t.lexXrpcError.array().optional()
  }).strict(), t.lexXrpcSubscription = e.z.object({
    type: e.z.literal("subscription"),
    description: e.z.string().optional(),
    parameters: t.lexXrpcParameters.optional(),
    message: t.lexXrpcSubscriptionMessage.optional(),
    errors: t.lexXrpcError.array().optional()
  }).strict(), t.lexRecord = e.z.object({
    type: e.z.literal("record"),
    description: e.z.string().optional(),
    key: e.z.string().optional(),
    record: t.lexObject
  }).strict(), t.lexUserType = e.z.custom((E) => {
    if (!(!E || typeof E != "object") && E.type !== void 0)
      switch (E.type) {
        case "record":
          return t.lexRecord.parse(E);
        case "query":
          return t.lexXrpcQuery.parse(E);
        case "procedure":
          return t.lexXrpcProcedure.parse(E);
        case "subscription":
          return t.lexXrpcSubscription.parse(E);
        case "blob":
          return t.lexBlob.parse(E);
        case "array":
          return t.lexArray.parse(E);
        case "token":
          return t.lexToken.parse(E);
        case "object":
          return t.lexObject.parse(E);
        case "boolean":
          return t.lexBoolean.parse(E);
        case "integer":
          return t.lexInteger.parse(E);
        case "string":
          return t.lexString.parse(E);
        case "bytes":
          return t.lexBytes.parse(E);
        case "cid-link":
          return t.lexCidLink.parse(E);
        case "unknown":
          return t.lexUnknown.parse(E);
      }
  }, (E) => !E || typeof E != "object" ? {
    message: "Must be an object",
    fatal: !0
  } : E.type === void 0 ? {
    message: "Must have a type",
    fatal: !0
  } : typeof E.type != "string" ? {
    message: "Type property must be a string",
    fatal: !0
  } : {
    message: `Invalid type: ${E.type} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
    fatal: !0
  }), t.lexiconDoc = e.z.object({
    lexicon: e.z.literal(1),
    id: e.z.string().refine((E) => r.NSID.isValid(E), {
      message: "Must be a valid NSID"
    }),
    revision: e.z.number().optional(),
    description: e.z.string().optional(),
    defs: e.z.record(t.lexUserType)
  }).strict().superRefine((E, v) => {
    for (const k in E.defs) {
      const P = E.defs[k];
      k !== "main" && (P.type === "record" || P.type === "procedure" || P.type === "query" || P.type === "subscription") && v.addIssue({
        code: e.z.ZodIssueCode.custom,
        message: "Records, procedures, queries, and subscriptions must be the main definition."
      });
    }
  });
  function s(E) {
    return t.lexiconDoc.safeParse(E).success;
  }
  function u(E) {
    return E !== null && typeof E == "object";
  }
  function c(E, v) {
    return v in E;
  }
  t.discriminatedObject = e.z.object({ $type: e.z.string() });
  function l(E) {
    return t.discriminatedObject.safeParse(E).success;
  }
  function f(E) {
    return t.lexiconDoc.parse(E), E;
  }
  class p extends Error {
  }
  t.ValidationError = p;
  class m extends Error {
  }
  t.InvalidLexiconError = m;
  class A extends Error {
  }
  t.LexiconDefNotFoundError = A;
})(Cr);
var Bs = {}, Yr = {}, Sr = {}, Fa = {}, Ds = {}, Bt = {}, At = {};
Object.defineProperty(At, "__esModule", { value: !0 });
At.isObject = At.assure = At.create = At.is = void 0;
const km = (t, e) => e.safeParse(t).success;
At.is = km;
const Bm = (t) => (e) => t.safeParse(e).success;
At.create = Bm;
const Dm = (t, e) => t.parse(e);
At.assure = Dm;
const Pm = (t) => typeof t == "object" && t !== null;
At.isObject = Pm;
var di = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.parseIntWithFallback = t.dedupeStrs = t.range = t.chunkArray = t.errHasMsg = t.isErrnoException = t.asyncFilter = t.s32decode = t.s32encode = t.streamToBuffer = t.flattenUint8Arrays = t.bailableWait = t.wait = t.jitter = t.omit = t.noUndefinedVals = void 0;
  const e = (T) => (Object.keys(T).forEach((w) => {
    T[w] === void 0 && delete T[w];
  }), T);
  t.noUndefinedVals = e;
  function r(T, w) {
    return T && Object.fromEntries(Object.entries(T).filter((K) => !w.includes(K[0])));
  }
  t.omit = r;
  const n = (T) => Math.round((Math.random() - 0.5) * T * 2);
  t.jitter = n;
  const s = (T) => new Promise((w) => setTimeout(w, T));
  t.wait = s;
  const u = (T) => {
    let w;
    const K = new Promise((re) => {
      const ie = setTimeout(re, T);
      w = () => {
        clearTimeout(ie), re();
      };
    });
    return { bail: w, wait: () => K };
  };
  t.bailableWait = u;
  const c = (T) => {
    const w = T.reduce((ie, oe) => ie + oe.length, 0), K = new Uint8Array(w);
    let re = 0;
    return T.forEach((ie) => {
      K.set(ie, re), re += ie.length;
    }), K;
  };
  t.flattenUint8Arrays = c;
  const l = async (T) => {
    const w = [];
    for await (const K of T)
      w.push(K);
    return (0, t.flattenUint8Arrays)(w);
  };
  t.streamToBuffer = l;
  const f = "234567abcdefghijklmnopqrstuvwxyz", p = (T) => {
    let w = "";
    for (; T; ) {
      const K = T % 32;
      T = Math.floor(T / 32), w = f.charAt(K) + w;
    }
    return w;
  };
  t.s32encode = p;
  const m = (T) => {
    let w = 0;
    for (const K of T)
      w = w * 32 + f.indexOf(K);
    return w;
  };
  t.s32decode = m;
  const A = async (T, w) => {
    const K = await Promise.all(T.map((re) => w(re)));
    return T.filter((re, ie) => K[ie]);
  };
  t.asyncFilter = A;
  const E = (T) => !!T && T.code;
  t.isErrnoException = E;
  const v = (T, w) => !!T && typeof T == "object" && T.message === w;
  t.errHasMsg = v;
  const k = (T, w) => T.reduce((K, re, ie) => {
    const oe = Math.floor(ie / w);
    return K[oe] || (K[oe] = []), K[oe].push(re), K;
  }, []);
  t.chunkArray = k;
  const P = (T) => {
    const w = [];
    for (let K = 0; K < T; K++)
      w.push(K);
    return w;
  };
  t.range = P;
  const $ = (T) => [...new Set(T)];
  t.dedupeStrs = $;
  const C = (T, w) => {
    const K = parseInt(T || "", 10);
    return isNaN(K) ? w : K;
  };
  t.parseIntWithFallback = C;
})(di);
var fi = {};
Object.defineProperty(fi, "__esModule", { value: !0 });
fi.mapDefined = fi.keyBy = void 0;
const Um = (t, e) => t.reduce((r, n) => (r[n[e]] = n, r), {});
fi.keyBy = Um;
const Km = (t, e) => {
  const r = [];
  for (const n of t) {
    const s = e(n);
    s !== void 0 && r.push(s);
  }
  return r;
};
fi.mapDefined = Km;
var fp = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.handleAllSettledErrors = t.AsyncBufferFullError = t.AsyncBuffer = t.allComplete = t.createDeferrables = t.createDeferrable = t.readFromGenerator = void 0;
  const e = di, r = async (m, A, E = Promise.resolve(), v = Number.MAX_SAFE_INTEGER) => {
    const k = [];
    let P, $ = !1;
    const C = async () => {
      if (await A(k.at(-1)))
        return !0;
      const w = (0, e.bailableWait)(20);
      return await w.wait(), P = w.bail, $ ? !1 : await C();
    }, T = new Promise((w) => {
      E.then(() => {
        C().then(() => w());
      });
    });
    try {
      for (; k.length < v; ) {
        const w = await Promise.race([m.next(), T]);
        if (!w)
          break;
        const K = w;
        if (K.done)
          break;
        k.push(K.value);
      }
    } finally {
      $ = !0, P && P();
    }
    return k;
  };
  t.readFromGenerator = r;
  const n = () => {
    let m;
    const A = new Promise((E) => {
      m = () => E();
    });
    return { resolve: m, complete: A };
  };
  t.createDeferrable = n;
  const s = (m) => {
    const A = [];
    for (let E = 0; E < m; E++)
      A.push((0, t.createDeferrable)());
    return A;
  };
  t.createDeferrables = s;
  const u = async (m) => {
    await Promise.all(m.map((A) => A.complete));
  };
  t.allComplete = u;
  class c {
    constructor(A) {
      Object.defineProperty(this, "maxSize", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: A
      }), Object.defineProperty(this, "buffer", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: []
      }), Object.defineProperty(this, "promise", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      }), Object.defineProperty(this, "resolve", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      }), Object.defineProperty(this, "closed", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: !1
      }), Object.defineProperty(this, "toThrow", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      }), this.promise = Promise.resolve(), this.resolve = () => null, this.resetPromise();
    }
    get curr() {
      return this.buffer;
    }
    get size() {
      return this.buffer.length;
    }
    get isClosed() {
      return this.closed;
    }
    resetPromise() {
      this.promise = new Promise((A) => this.resolve = A);
    }
    push(A) {
      this.buffer.push(A), this.resolve();
    }
    pushMany(A) {
      A.forEach((E) => this.buffer.push(E)), this.resolve();
    }
    async *events() {
      for (; ; ) {
        if (this.closed && this.buffer.length === 0) {
          if (this.toThrow)
            throw this.toThrow;
          return;
        }
        if (await this.promise, this.toThrow)
          throw this.toThrow;
        if (this.maxSize && this.size > this.maxSize)
          throw new l(this.maxSize);
        const [A, ...E] = this.buffer;
        A ? (this.buffer = E, yield A) : this.resetPromise();
      }
    }
    throw(A) {
      this.toThrow = A, this.closed = !0, this.resolve();
    }
    close() {
      this.closed = !0, this.resolve();
    }
  }
  t.AsyncBuffer = c;
  class l extends Error {
    constructor(A) {
      super(`ReachedMaxBufferSize: ${A}`);
    }
  }
  t.AsyncBufferFullError = l;
  const f = (m) => {
    const A = m.filter(p).map((E) => E.reason);
    if (A.length !== 0)
      throw A.length === 1 ? A[0] : new AggregateError(A, "Multiple errors: " + A.map((E) => E == null ? void 0 : E.message).join(`
`));
  };
  t.handleAllSettledErrors = f;
  const p = (m) => m.status === "rejected";
})(fp);
var Cn = {};
Object.defineProperty(Cn, "__esModule", { value: !0 });
Cn.TID = void 0;
const ls = di, zu = 13;
let Ca = 0, Fu = 0, us = null;
function Xu(t) {
  return t.replaceAll("-", "");
}
class Ht {
  constructor(e) {
    Object.defineProperty(this, "str", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    });
    const r = Xu(e);
    if (r.length !== zu)
      throw new Error(`Poorly formatted TID: ${r.length} length`);
    this.str = r;
  }
  static next(e) {
    const r = Math.max(Date.now(), Ca);
    r === Ca && Fu++, Ca = r;
    const n = r * 1e3 + Fu;
    us === null && (us = Math.floor(Math.random() * 32));
    const s = Ht.fromTime(n, us);
    return !e || s.newerThan(e) ? s : Ht.fromTime(e.timestamp() + 1, us);
  }
  static nextStr(e) {
    return Ht.next(e ? new Ht(e) : void 0).toString();
  }
  static fromTime(e, r) {
    const n = `${(0, ls.s32encode)(e)}${(0, ls.s32encode)(r).padStart(2, "2")}`;
    return new Ht(n);
  }
  static fromStr(e) {
    return new Ht(e);
  }
  static oldestFirst(e, r) {
    return e.compareTo(r);
  }
  static newestFirst(e, r) {
    return r.compareTo(e);
  }
  static is(e) {
    return Xu(e).length === zu;
  }
  timestamp() {
    return (0, ls.s32decode)(this.str.slice(0, 11));
  }
  clockid() {
    return (0, ls.s32decode)(this.str.slice(11, 13));
  }
  formatted() {
    const e = this.toString();
    return `${e.slice(0, 4)}-${e.slice(4, 7)}-${e.slice(7, 11)}-${e.slice(11, 13)}`;
  }
  toString() {
    return this.str;
  }
  // newer > older
  compareTo(e) {
    return this.str > e.str ? 1 : this.str < e.str ? -1 : 0;
  }
  equals(e) {
    return this.str === e.str;
  }
  newerThan(e) {
    return this.compareTo(e) > 0;
  }
  olderThan(e) {
    return this.compareTo(e) < 0;
  }
}
Cn.TID = Ht;
Cn.default = Ht;
var yp = {}, jm = mp, Zu = 128, Vm = 127, Om = ~Vm, Im = Math.pow(2, 31);
function mp(t, e, r) {
  e = e || [], r = r || 0;
  for (var n = r; t >= Im; )
    e[r++] = t & 255 | Zu, t /= 128;
  for (; t & Om; )
    e[r++] = t & 255 | Zu, t >>>= 7;
  return e[r] = t | 0, mp.bytes = r - n + 1, e;
}
var Nm = Va, Mm = 128, Hu = 127;
function Va(t, n) {
  var r = 0, n = n || 0, s = 0, u = n, c, l = t.length;
  do {
    if (u >= l)
      throw Va.bytes = 0, new RangeError("Could not decode varint");
    c = t[u++], r += s < 28 ? (c & Hu) << s : (c & Hu) * Math.pow(2, s), s += 7;
  } while (c >= Mm);
  return Va.bytes = u - n, r;
}
var $m = Math.pow(2, 7), qm = Math.pow(2, 14), Gm = Math.pow(2, 21), zm = Math.pow(2, 28), Fm = Math.pow(2, 35), Xm = Math.pow(2, 42), Zm = Math.pow(2, 49), Hm = Math.pow(2, 56), Wm = Math.pow(2, 63), Jm = function(t) {
  return t < $m ? 1 : t < qm ? 2 : t < Gm ? 3 : t < zm ? 4 : t < Fm ? 5 : t < Xm ? 6 : t < Zm ? 7 : t < Hm ? 8 : t < Wm ? 9 : 10;
}, Qm = {
  encode: jm,
  decode: Nm,
  encodingLength: Jm
}, bs = Qm;
const Oa = (t, e = 0) => [
  bs.decode(t, e),
  bs.decode.bytes
], hs = (t, e, r = 0) => (bs.encode(t, e, r), e), Es = (t) => bs.encodingLength(t), Ym = (t, e) => {
  if (t === e)
    return !0;
  if (t.byteLength !== e.byteLength)
    return !1;
  for (let r = 0; r < t.byteLength; r++)
    if (t[r] !== e[r])
      return !1;
  return !0;
}, Xa = (t) => {
  if (t instanceof Uint8Array && t.constructor.name === "Uint8Array")
    return t;
  if (t instanceof ArrayBuffer)
    return new Uint8Array(t);
  if (ArrayBuffer.isView(t))
    return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
  throw new Error("Unknown type, must be binary type");
}, eb = (t) => new TextEncoder().encode(t), tb = (t) => new TextDecoder().decode(t), rb = (t, e) => {
  const r = e.byteLength, n = Es(t), s = n + Es(r), u = new Uint8Array(s + r);
  return hs(t, u, 0), hs(r, u, n), u.set(e, s), new Za(t, r, e, u);
}, ib = (t) => {
  const e = Xa(t), [r, n] = Oa(e), [s, u] = Oa(e.subarray(n)), c = e.subarray(n + u);
  if (c.byteLength !== s)
    throw new Error("Incorrect length");
  return new Za(r, s, c, e);
}, nb = (t, e) => t === e ? !0 : t.code === e.code && t.size === e.size && Ym(t.bytes, e.bytes);
class Za {
  constructor(e, r, n, s) {
    this.code = e, this.size = r, this.digest = n, this.bytes = s;
  }
}
function sb(t, e) {
  if (t.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var r = new Uint8Array(256), n = 0; n < r.length; n++)
    r[n] = 255;
  for (var s = 0; s < t.length; s++) {
    var u = t.charAt(s), c = u.charCodeAt(0);
    if (r[c] !== 255)
      throw new TypeError(u + " is ambiguous");
    r[c] = s;
  }
  var l = t.length, f = t.charAt(0), p = Math.log(l) / Math.log(256), m = Math.log(256) / Math.log(l);
  function A(k) {
    if (k instanceof Uint8Array || (ArrayBuffer.isView(k) ? k = new Uint8Array(k.buffer, k.byteOffset, k.byteLength) : Array.isArray(k) && (k = Uint8Array.from(k))), !(k instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (k.length === 0)
      return "";
    for (var P = 0, $ = 0, C = 0, T = k.length; C !== T && k[C] === 0; )
      C++, P++;
    for (var w = (T - C) * m + 1 >>> 0, K = new Uint8Array(w); C !== T; ) {
      for (var re = k[C], ie = 0, oe = w - 1; (re !== 0 || ie < $) && oe !== -1; oe--, ie++)
        re += 256 * K[oe] >>> 0, K[oe] = re % l >>> 0, re = re / l >>> 0;
      if (re !== 0)
        throw new Error("Non-zero carry");
      $ = ie, C++;
    }
    for (var Ge = w - $; Ge !== w && K[Ge] === 0; )
      Ge++;
    for (var Yt = f.repeat(P); Ge < w; ++Ge)
      Yt += t.charAt(K[Ge]);
    return Yt;
  }
  function E(k) {
    if (typeof k != "string")
      throw new TypeError("Expected String");
    if (k.length === 0)
      return new Uint8Array();
    var P = 0;
    if (k[P] !== " ") {
      for (var $ = 0, C = 0; k[P] === f; )
        $++, P++;
      for (var T = (k.length - P) * p + 1 >>> 0, w = new Uint8Array(T); k[P]; ) {
        var K = r[k.charCodeAt(P)];
        if (K === 255)
          return;
        for (var re = 0, ie = T - 1; (K !== 0 || re < C) && ie !== -1; ie--, re++)
          K += l * w[ie] >>> 0, w[ie] = K % 256 >>> 0, K = K / 256 >>> 0;
        if (K !== 0)
          throw new Error("Non-zero carry");
        C = re, P++;
      }
      if (k[P] !== " ") {
        for (var oe = T - C; oe !== T && w[oe] === 0; )
          oe++;
        for (var Ge = new Uint8Array($ + (T - oe)), Yt = $; oe !== T; )
          Ge[Yt++] = w[oe++];
        return Ge;
      }
    }
  }
  function v(k) {
    var P = E(k);
    if (P)
      return P;
    throw new Error(`Non-${e} character`);
  }
  return {
    encode: A,
    decodeUnsafe: E,
    decode: v
  };
}
var ab = sb, ob = ab;
class lb {
  constructor(e, r, n) {
    this.name = e, this.prefix = r, this.baseEncode = n;
  }
  encode(e) {
    if (e instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
}
class ub {
  constructor(e, r, n) {
    if (this.name = e, this.prefix = r, r.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = r.codePointAt(0), this.baseDecode = n;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e) {
    return bp(this, e);
  }
}
class cb {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return bp(this, e);
  }
  decode(e) {
    const r = e[0], n = this.decoders[r];
    if (n)
      return n.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
}
const bp = (t, e) => new cb({
  ...t.decoders || { [t.prefix]: t },
  ...e.decoders || { [e.prefix]: e }
});
class pb {
  constructor(e, r, n, s) {
    this.name = e, this.prefix = r, this.baseEncode = n, this.baseDecode = s, this.encoder = new lb(e, r, n), this.decoder = new ub(e, r, s);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
}
const Ps = ({ name: t, prefix: e, encode: r, decode: n }) => new pb(t, e, r, n), wn = ({ prefix: t, name: e, alphabet: r }) => {
  const { encode: n, decode: s } = ob(r, e);
  return Ps({
    prefix: t,
    name: e,
    encode: n,
    decode: (u) => Xa(s(u))
  });
}, db = (t, e, r, n) => {
  const s = {};
  for (let m = 0; m < e.length; ++m)
    s[e[m]] = m;
  let u = t.length;
  for (; t[u - 1] === "="; )
    --u;
  const c = new Uint8Array(u * r / 8 | 0);
  let l = 0, f = 0, p = 0;
  for (let m = 0; m < u; ++m) {
    const A = s[t[m]];
    if (A === void 0)
      throw new SyntaxError(`Non-${n} character`);
    f = f << r | A, l += r, l >= 8 && (l -= 8, c[p++] = 255 & f >> l);
  }
  if (l >= r || 255 & f << 8 - l)
    throw new SyntaxError("Unexpected end of data");
  return c;
}, fb = (t, e, r) => {
  const n = e[e.length - 1] === "=", s = (1 << r) - 1;
  let u = "", c = 0, l = 0;
  for (let f = 0; f < t.length; ++f)
    for (l = l << 8 | t[f], c += 8; c > r; )
      c -= r, u += e[s & l >> c];
  if (c && (u += e[s & l << r - c]), n)
    for (; u.length * r & 7; )
      u += "=";
  return u;
}, ve = ({ name: t, prefix: e, bitsPerChar: r, alphabet: n }) => Ps({
  prefix: e,
  name: t,
  encode(s) {
    return fb(s, n, r);
  },
  decode(s) {
    return db(s, n, r, t);
  }
}), Wt = wn({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
}), yb = wn({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
}), mb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base58btc: Wt,
  base58flickr: yb
}, Symbol.toStringTag, { value: "Module" })), Rn = ve({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
}), bb = ve({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
}), hb = ve({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
}), Eb = ve({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
}), gb = ve({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
}), xb = ve({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
}), Rb = ve({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
}), Ab = ve({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
}), vb = ve({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
}), Tb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base32: Rn,
  base32hex: gb,
  base32hexpad: Rb,
  base32hexpadupper: Ab,
  base32hexupper: xb,
  base32pad: hb,
  base32padupper: Eb,
  base32upper: bb,
  base32z: vb
}, Symbol.toStringTag, { value: "Module" }));
class Le {
  constructor(e, r, n, s) {
    this.code = r, this.version = e, this.multihash = n, this.bytes = s, this.byteOffset = s.byteOffset, this.byteLength = s.byteLength, this.asCID = this, this._baseCache = /* @__PURE__ */ new Map(), Object.defineProperties(this, {
      byteOffset: ps,
      byteLength: ps,
      code: cs,
      version: cs,
      multihash: cs,
      bytes: cs,
      _baseCache: ps,
      asCID: ps
    });
  }
  toV0() {
    switch (this.version) {
      case 0:
        return this;
      default: {
        const { code: e, multihash: r } = this;
        if (e !== hn)
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        if (r.code !== Sb)
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        return Le.createV0(r);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: e, digest: r } = this.multihash, n = rb(e, r);
        return Le.createV1(this.code, n);
      }
      case 1:
        return this;
      default:
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
    }
  }
  equals(e) {
    return e && this.code === e.code && this.version === e.version && nb(this.multihash, e.multihash);
  }
  toString(e) {
    const { bytes: r, version: n, _baseCache: s } = this;
    switch (n) {
      case 0:
        return Cb(r, s, e || Wt.encoder);
      default:
        return wb(r, s, e || Rn.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(e) {
    return kb(/^0\.0/, Bb), !!(e && (e[Ju] || e.asCID === e));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(e) {
    if (e instanceof Le)
      return e;
    if (e != null && e.asCID === e) {
      const { version: r, code: n, multihash: s, bytes: u } = e;
      return new Le(r, n, s, u || Wu(r, n, s.bytes));
    } else if (e != null && e[Ju] === !0) {
      const { version: r, multihash: n, code: s } = e, u = ib(n);
      return Le.create(r, s, u);
    } else
      return null;
  }
  static create(e, r, n) {
    if (typeof r != "number")
      throw new Error("String codecs are no longer supported");
    switch (e) {
      case 0: {
        if (r !== hn)
          throw new Error(`Version 0 CID must use dag-pb (code: ${hn}) block encoding`);
        return new Le(e, r, n, n.bytes);
      }
      case 1: {
        const s = Wu(e, r, n.bytes);
        return new Le(e, r, n, s);
      }
      default:
        throw new Error("Invalid version");
    }
  }
  static createV0(e) {
    return Le.create(0, hn, e);
  }
  static createV1(e, r) {
    return Le.create(1, e, r);
  }
  static decode(e) {
    const [r, n] = Le.decodeFirst(e);
    if (n.length)
      throw new Error("Incorrect length");
    return r;
  }
  static decodeFirst(e) {
    const r = Le.inspectBytes(e), n = r.size - r.multihashSize, s = Xa(e.subarray(n, n + r.multihashSize));
    if (s.byteLength !== r.multihashSize)
      throw new Error("Incorrect length");
    const u = s.subarray(r.multihashSize - r.digestSize), c = new Za(r.multihashCode, r.digestSize, u, s);
    return [
      r.version === 0 ? Le.createV0(c) : Le.createV1(r.codec, c),
      e.subarray(r.size)
    ];
  }
  static inspectBytes(e) {
    let r = 0;
    const n = () => {
      const [A, E] = Oa(e.subarray(r));
      return r += E, A;
    };
    let s = n(), u = hn;
    if (s === 18 ? (s = 0, r = 0) : s === 1 && (u = n()), s !== 0 && s !== 1)
      throw new RangeError(`Invalid CID version ${s}`);
    const c = r, l = n(), f = n(), p = r + f, m = p - c;
    return {
      version: s,
      codec: u,
      multihashCode: l,
      digestSize: f,
      multihashSize: m,
      size: p
    };
  }
  static parse(e, r) {
    const [n, s] = _b(e, r), u = Le.decode(s);
    return u._baseCache.set(n, e), u;
  }
}
const _b = (t, e) => {
  switch (t[0]) {
    case "Q": {
      const r = e || Wt;
      return [
        Wt.prefix,
        r.decode(`${Wt.prefix}${t}`)
      ];
    }
    case Wt.prefix: {
      const r = e || Wt;
      return [
        Wt.prefix,
        r.decode(t)
      ];
    }
    case Rn.prefix: {
      const r = e || Rn;
      return [
        Rn.prefix,
        r.decode(t)
      ];
    }
    default: {
      if (e == null)
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      return [
        t[0],
        e.decode(t)
      ];
    }
  }
}, Cb = (t, e, r) => {
  const { prefix: n } = r;
  if (n !== Wt.prefix)
    throw Error(`Cannot string encode V0 in ${r.name} encoding`);
  const s = e.get(n);
  if (s == null) {
    const u = r.encode(t).slice(1);
    return e.set(n, u), u;
  } else
    return s;
}, wb = (t, e, r) => {
  const { prefix: n } = r, s = e.get(n);
  if (s == null) {
    const u = r.encode(t);
    return e.set(n, u), u;
  } else
    return s;
}, hn = 112, Sb = 18, Wu = (t, e, r) => {
  const n = Es(t), s = n + Es(e), u = new Uint8Array(s + r.byteLength);
  return hs(t, u, 0), hs(e, u, n), u.set(r, s), u;
}, Ju = Symbol.for("@ipld/js-cid/CID"), cs = {
  writable: !1,
  configurable: !1,
  enumerable: !0
}, ps = {
  writable: !1,
  enumerable: !1,
  configurable: !1
}, Lb = "0.0.0-dev", kb = (t, e) => {
  if (t.test(Lb))
    console.warn(e);
  else
    throw new Error(e);
}, Bb = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`, Db = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CID: Le
}, Symbol.toStringTag, { value: "Module" })), Ei = /* @__PURE__ */ Yc(Db);
function Pb(t, e) {
  for (let r = 0; r < t.byteLength; r++) {
    if (t[r] < e[r])
      return -1;
    if (t[r] > e[r])
      return 1;
  }
  return t.byteLength > e.byteLength ? 1 : t.byteLength < e.byteLength ? -1 : 0;
}
function Ub(t, e) {
  e || (e = t.reduce((s, u) => s + u.length, 0));
  const r = new Uint8Array(e);
  let n = 0;
  for (const s of t)
    r.set(s, n), n += s.length;
  return r;
}
function Kb(t, e) {
  if (t === e)
    return !0;
  if (t.byteLength !== e.byteLength)
    return !1;
  for (let r = 0; r < t.byteLength; r++)
    if (t[r] !== e[r])
      return !1;
  return !0;
}
const jb = Ps({
  prefix: "\0",
  name: "identity",
  encode: (t) => tb(t),
  decode: (t) => eb(t)
}), Vb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  identity: jb
}, Symbol.toStringTag, { value: "Module" })), Ob = ve({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
}), Ib = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base2: Ob
}, Symbol.toStringTag, { value: "Module" })), Nb = ve({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
}), Mb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base8: Nb
}, Symbol.toStringTag, { value: "Module" })), $b = wn({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
}), qb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base10: $b
}, Symbol.toStringTag, { value: "Module" })), Gb = ve({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
}), zb = ve({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
}), Fb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base16: Gb,
  base16upper: zb
}, Symbol.toStringTag, { value: "Module" })), Xb = wn({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
}), Zb = wn({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
}), Hb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base36: Xb,
  base36upper: Zb
}, Symbol.toStringTag, { value: "Module" })), Wb = ve({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
}), Jb = ve({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
}), Qb = ve({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
}), Yb = ve({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
}), eh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base64: Wb,
  base64pad: Jb,
  base64url: Qb,
  base64urlpad: Yb
}, Symbol.toStringTag, { value: "Module" })), hp = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"), th = hp.reduce((t, e, r) => (t[r] = e, t), []), rh = hp.reduce((t, e, r) => (t[e.codePointAt(0)] = r, t), []);
function ih(t) {
  return t.reduce((e, r) => (e += th[r], e), "");
}
function nh(t) {
  const e = [];
  for (const r of t) {
    const n = rh[r.codePointAt(0)];
    if (n === void 0)
      throw new Error(`Non-base256emoji character: ${r}`);
    e.push(n);
  }
  return new Uint8Array(e);
}
const sh = Ps({
  prefix: "🚀",
  name: "base256emoji",
  encode: ih,
  decode: nh
}), ah = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base256emoji: sh
}, Symbol.toStringTag, { value: "Module" }));
new TextEncoder();
new TextDecoder();
const Qu = {
  ...Vb,
  ...Ib,
  ...Mb,
  ...qb,
  ...Fb,
  ...Tb,
  ...Hb,
  ...mb,
  ...eh,
  ...ah
};
function Ep(t, e, r, n) {
  return {
    name: t,
    prefix: e,
    encoder: {
      name: t,
      prefix: e,
      encode: r
    },
    decoder: { decode: n }
  };
}
const Yu = Ep("utf8", "u", (t) => "u" + new TextDecoder("utf8").decode(t), (t) => new TextEncoder().encode(t.substring(1))), wa = Ep("ascii", "a", (t) => {
  let e = "a";
  for (let r = 0; r < t.length; r++)
    e += String.fromCharCode(t[r]);
  return e;
}, (t) => {
  t = t.substring(1);
  const e = new Uint8Array(t.length);
  for (let r = 0; r < t.length; r++)
    e[r] = t.charCodeAt(r);
  return e;
}), gp = {
  utf8: Yu,
  "utf-8": Yu,
  hex: Qu.base16,
  latin1: wa,
  ascii: wa,
  binary: wa,
  ...Qu
};
function oh(t, e = "utf8") {
  const r = gp[e];
  if (!r)
    throw new Error(`Unsupported encoding "${e}"`);
  return r.decoder.decode(`${r.prefix}${t}`);
}
function lh(t, e = "utf8") {
  const r = gp[e];
  if (!r)
    throw new Error(`Unsupported encoding "${e}"`);
  return r.encoder.encode(t).substring(1);
}
function uh(t, e) {
  if (t.length !== e.length)
    throw new Error("Inputs should have the same length");
  const r = new Uint8Array(t.length);
  for (let n = 0; n < t.length; n++)
    r[n] = t[n] ^ e[n];
  return r;
}
const ch = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  compare: Pb,
  concat: Ub,
  equals: Kb,
  fromString: oh,
  toString: lh,
  xor: uh
}, Symbol.toStringTag, { value: "Module" })), xp = /* @__PURE__ */ Yc(ch);
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(p, m, A, E) {
    E === void 0 && (E = A);
    var v = Object.getOwnPropertyDescriptor(m, A);
    (!v || ("get" in v ? !m.__esModule : v.writable || v.configurable)) && (v = { enumerable: !0, get: function() {
      return m[A];
    } }), Object.defineProperty(p, E, v);
  } : function(p, m, A, E) {
    E === void 0 && (E = A), p[E] = m[A];
  }), r = L && L.__setModuleDefault || (Object.create ? function(p, m) {
    Object.defineProperty(p, "default", { enumerable: !0, value: m });
  } : function(p, m) {
    p.default = m;
  }), n = L && L.__importStar || function(p) {
    if (p && p.__esModule) return p;
    var m = {};
    if (p != null) for (var A in p) A !== "default" && Object.prototype.hasOwnProperty.call(p, A) && e(m, p, A);
    return r(m, p), m;
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), t.ipldEquals = t.ipldToJson = t.jsonToIpld = void 0;
  const s = Ei, u = n(xp), c = (p) => {
    if (Array.isArray(p))
      return p.map((m) => (0, t.jsonToIpld)(m));
    if (p && typeof p == "object") {
      if (typeof p.$link == "string" && Object.keys(p).length === 1)
        return s.CID.parse(p.$link);
      if (typeof p.$bytes == "string" && Object.keys(p).length === 1)
        return u.fromString(p.$bytes, "base64");
      const m = {};
      for (const A of Object.keys(p))
        m[A] = (0, t.jsonToIpld)(p[A]);
      return m;
    }
    return p;
  };
  t.jsonToIpld = c;
  const l = (p) => {
    if (Array.isArray(p))
      return p.map((m) => (0, t.ipldToJson)(m));
    if (p && typeof p == "object") {
      if (p instanceof Uint8Array)
        return {
          $bytes: u.toString(p, "base64")
        };
      if (s.CID.asCID(p))
        return {
          $link: p.toString()
        };
      const m = {};
      for (const A of Object.keys(p))
        m[A] = (0, t.ipldToJson)(p[A]);
      return m;
    }
    return p;
  };
  t.ipldToJson = l;
  const f = (p, m) => {
    var A;
    if (Array.isArray(p) && Array.isArray(m)) {
      if (p.length !== m.length)
        return !1;
      for (let E = 0; E < p.length; E++)
        if (!(0, t.ipldEquals)(p[E], m[E]))
          return !1;
      return !0;
    }
    if (p && m && typeof p == "object" && typeof m == "object") {
      if (p instanceof Uint8Array && m instanceof Uint8Array)
        return u.equals(p, m);
      if (s.CID.asCID(p) && s.CID.asCID(m))
        return (A = s.CID.asCID(p)) == null ? void 0 : A.equals(s.CID.asCID(m));
      if (Object.keys(p).length !== Object.keys(m).length)
        return !1;
      for (const E of Object.keys(p))
        if (!(0, t.ipldEquals)(p[E], m[E]))
          return !1;
      return !0;
    }
    return p === m;
  };
  t.ipldEquals = f;
})(yp);
var yi = {};
Object.defineProperty(yi, "__esModule", { value: !0 });
yi.backoffMs = yi.retry = void 0;
const ph = di;
async function dh(t, e = {}) {
  const { maxRetries: r = 3, retryable: n = () => !0, getWaitMs: s = Rp } = e;
  let u = 0, c;
  for (; !c; )
    try {
      return await t();
    } catch (l) {
      const f = s(u);
      u < r && f !== null && n(l) ? (u += 1, f !== 0 && await (0, ph.wait)(f)) : c = l;
    }
  throw c;
}
yi.retry = dh;
function Rp(t, e = 100, r = 1e3) {
  const n = Math.pow(2, t) * e, s = Math.min(n, r);
  return fh(s);
}
yi.backoffMs = Rp;
function fh(t) {
  const e = t * 0.15;
  return t + yh(-e, e);
}
function yh(t, e) {
  return Math.random() * (e - t) + t;
}
var Ap = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.def = t.schema = void 0;
  const e = Ei, r = wr, n = r.z.any().refine((s) => e.CID.asCID(s) !== null, {
    message: "Not a CID"
  }).transform((s) => e.CID.asCID(s));
  t.schema = {
    cid: n,
    bytes: r.z.instanceof(Uint8Array),
    string: r.z.string(),
    array: r.z.array(r.z.unknown()),
    map: r.z.record(r.z.string(), r.z.unknown()),
    unknown: r.z.unknown()
  }, t.def = {
    cid: {
      name: "cid",
      schema: t.schema.cid
    },
    bytes: {
      name: "bytes",
      schema: t.schema.bytes
    },
    string: {
      name: "string",
      schema: t.schema.string
    },
    map: {
      name: "map",
      schema: t.schema.map
    },
    unknown: {
      name: "unknown",
      schema: t.schema.unknown
    }
  };
})(Ap);
var vp = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.addHoursToDate = t.lessThanAgoMs = t.DAY = t.HOUR = t.MINUTE = t.SECOND = void 0, t.SECOND = 1e3, t.MINUTE = t.SECOND * 60, t.HOUR = t.MINUTE * 60, t.DAY = t.HOUR * 24;
  const e = (n, s) => Date.now() < n.getTime() + s;
  t.lessThanAgoMs = e;
  const r = (n, s) => {
    const u = s ? new Date(s) : /* @__PURE__ */ new Date();
    return u.setHours(u.getHours() + n), u;
  };
  t.addHoursToDate = r;
})(vp);
var Ie = {}, Ha = {}, Wa = {}, Ja = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.EXTENDED_PICTOGRAPHIC = t.CLUSTER_BREAK = void 0, function(e) {
    e[e.CR = 0] = "CR", e[e.LF = 1] = "LF", e[e.CONTROL = 2] = "CONTROL", e[e.EXTEND = 3] = "EXTEND", e[e.REGIONAL_INDICATOR = 4] = "REGIONAL_INDICATOR", e[e.SPACINGMARK = 5] = "SPACINGMARK", e[e.L = 6] = "L", e[e.V = 7] = "V", e[e.T = 8] = "T", e[e.LV = 9] = "LV", e[e.LVT = 10] = "LVT", e[e.OTHER = 11] = "OTHER", e[e.PREPEND = 12] = "PREPEND", e[e.E_BASE = 13] = "E_BASE", e[e.E_MODIFIER = 14] = "E_MODIFIER", e[e.ZWJ = 15] = "ZWJ", e[e.GLUE_AFTER_ZWJ = 16] = "GLUE_AFTER_ZWJ", e[e.E_BASE_GAZ = 17] = "E_BASE_GAZ";
  }(t.CLUSTER_BREAK || (t.CLUSTER_BREAK = {})), t.EXTENDED_PICTOGRAPHIC = 101;
})(Ja);
var Qa = {};
Object.defineProperty(Qa, "__esModule", { value: !0 });
const Q = Ja, zt = 0, Sa = 1, mh = 2, bh = 3, hh = 4;
class Eh {
  /**
   * Check if the the character at the position {pos} of the string is surrogate
   * @param str {string}
   * @param pos {number}
   * @returns {boolean}
   */
  static isSurrogate(e, r) {
    return 55296 <= e.charCodeAt(r) && e.charCodeAt(r) <= 56319 && 56320 <= e.charCodeAt(r + 1) && e.charCodeAt(r + 1) <= 57343;
  }
  /**
   * The String.prototype.codePointAt polyfill
   * Private function, gets a Unicode code point from a JavaScript UTF-16 string
   * handling surrogate pairs appropriately
   * @param str {string}
   * @param idx {number}
   * @returns {number}
   */
  static codePointAt(e, r) {
    r === void 0 && (r = 0);
    const n = e.charCodeAt(r);
    if (55296 <= n && n <= 56319 && r < e.length - 1) {
      const s = n, u = e.charCodeAt(r + 1);
      return 56320 <= u && u <= 57343 ? (s - 55296) * 1024 + (u - 56320) + 65536 : s;
    }
    if (56320 <= n && n <= 57343 && r >= 1) {
      const s = e.charCodeAt(r - 1), u = n;
      return 55296 <= s && s <= 56319 ? (s - 55296) * 1024 + (u - 56320) + 65536 : u;
    }
    return n;
  }
  //
  /**
   * Private function, returns whether a break is allowed between the two given grapheme breaking classes
   * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
   * @param start {number}
   * @param mid {Array<number>}
   * @param end {number}
   * @param startEmoji {number}
   * @param midEmoji {Array<number>}
   * @param endEmoji {number}
   * @returns {number}
   */
  static shouldBreak(e, r, n, s, u, c) {
    const l = [e].concat(r).concat([n]), f = [s].concat(u).concat([c]), p = l[l.length - 2], m = n, A = c, E = l.lastIndexOf(Q.CLUSTER_BREAK.REGIONAL_INDICATOR);
    if (E > 0 && l.slice(1, E).every(function(k) {
      return k === Q.CLUSTER_BREAK.REGIONAL_INDICATOR;
    }) && [Q.CLUSTER_BREAK.PREPEND, Q.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(p) === -1)
      return l.filter(function(k) {
        return k === Q.CLUSTER_BREAK.REGIONAL_INDICATOR;
      }).length % 2 === 1 ? bh : hh;
    if (p === Q.CLUSTER_BREAK.CR && m === Q.CLUSTER_BREAK.LF)
      return zt;
    if (p === Q.CLUSTER_BREAK.CONTROL || p === Q.CLUSTER_BREAK.CR || p === Q.CLUSTER_BREAK.LF)
      return Sa;
    if (m === Q.CLUSTER_BREAK.CONTROL || m === Q.CLUSTER_BREAK.CR || m === Q.CLUSTER_BREAK.LF)
      return Sa;
    if (p === Q.CLUSTER_BREAK.L && (m === Q.CLUSTER_BREAK.L || m === Q.CLUSTER_BREAK.V || m === Q.CLUSTER_BREAK.LV || m === Q.CLUSTER_BREAK.LVT))
      return zt;
    if ((p === Q.CLUSTER_BREAK.LV || p === Q.CLUSTER_BREAK.V) && (m === Q.CLUSTER_BREAK.V || m === Q.CLUSTER_BREAK.T))
      return zt;
    if ((p === Q.CLUSTER_BREAK.LVT || p === Q.CLUSTER_BREAK.T) && m === Q.CLUSTER_BREAK.T)
      return zt;
    if (m === Q.CLUSTER_BREAK.EXTEND || m === Q.CLUSTER_BREAK.ZWJ)
      return zt;
    if (m === Q.CLUSTER_BREAK.SPACINGMARK)
      return zt;
    if (p === Q.CLUSTER_BREAK.PREPEND)
      return zt;
    const v = f.slice(0, -1).lastIndexOf(Q.EXTENDED_PICTOGRAPHIC);
    return v !== -1 && f[v] === Q.EXTENDED_PICTOGRAPHIC && l.slice(v + 1, -2).every(function(k) {
      return k === Q.CLUSTER_BREAK.EXTEND;
    }) && p === Q.CLUSTER_BREAK.ZWJ && A === Q.EXTENDED_PICTOGRAPHIC ? zt : r.indexOf(Q.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1 ? mh : p === Q.CLUSTER_BREAK.REGIONAL_INDICATOR && m === Q.CLUSTER_BREAK.REGIONAL_INDICATOR ? zt : Sa;
  }
}
Qa.default = Eh;
var Ya = {};
Object.defineProperty(Ya, "__esModule", { value: !0 });
class gh {
  constructor(e, r) {
    this._index = 0, this._str = e, this._nextBreak = r;
  }
  [Symbol.iterator]() {
    return this;
  }
  next() {
    let e;
    if ((e = this._nextBreak(this._str, this._index)) < this._str.length) {
      const r = this._str.slice(this._index, e);
      return this._index = e, { value: r, done: !1 };
    }
    if (this._index < this._str.length) {
      const r = this._str.slice(this._index);
      return this._index = this._str.length, { value: r, done: !1 };
    }
    return { value: void 0, done: !0 };
  }
}
Ya.default = gh;
var Tp = L && L.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(Wa, "__esModule", { value: !0 });
const i = Ja, ds = Tp(Qa), xh = Tp(Ya);
class Xt {
  /**
   * Returns the next grapheme break in the string after the given index
   * @param string {string}
   * @param index {number}
   * @returns {number}
   */
  static nextBreak(e, r) {
    if (r === void 0 && (r = 0), r < 0)
      return 0;
    if (r >= e.length - 1)
      return e.length;
    const n = ds.default.codePointAt(e, r), s = Xt.getGraphemeBreakProperty(n), u = Xt.getEmojiProperty(n), c = [], l = [];
    for (let f = r + 1; f < e.length; f++) {
      if (ds.default.isSurrogate(e, f - 1))
        continue;
      const p = ds.default.codePointAt(e, f), m = Xt.getGraphemeBreakProperty(p), A = Xt.getEmojiProperty(p);
      if (ds.default.shouldBreak(s, c, m, u, l, A))
        return f;
      c.push(m), l.push(A);
    }
    return e.length;
  }
  /**
   * Breaks the given string into an array of grapheme clusters
   * @param str {string}
   * @returns {string[]}
   */
  splitGraphemes(e) {
    const r = [];
    let n = 0, s;
    for (; (s = Xt.nextBreak(e, n)) < e.length; )
      r.push(e.slice(n, s)), n = s;
    return n < e.length && r.push(e.slice(n)), r;
  }
  /**
   * Returns an iterator of grapheme clusters in the given string
   * @param str {string}
   * @returns {GraphemerIterator}
   */
  iterateGraphemes(e) {
    return new xh.default(e, Xt.nextBreak);
  }
  /**
   * Returns the number of grapheme clusters in the given string
   * @param str {string}
   * @returns {number}
   */
  countGraphemes(e) {
    let r = 0, n = 0, s;
    for (; (s = Xt.nextBreak(e, n)) < e.length; )
      n = s, r++;
    return n < e.length && r++, r;
  }
  /**
   * Given a Unicode code point, determines this symbol's grapheme break property
   * @param code {number} Unicode code point
   * @returns {number}
   */
  static getGraphemeBreakProperty(e) {
    if (e < 48905) {
      if (e < 44116) {
        if (e < 4141) {
          if (e < 2818) {
            if (e < 2363)
              if (e < 1759) {
                if (e < 1471) {
                  if (e < 127) {
                    if (e < 11) {
                      if (e < 10) {
                        if (0 <= e && e <= 9)
                          return i.CLUSTER_BREAK.CONTROL;
                      } else if (e === 10)
                        return i.CLUSTER_BREAK.LF;
                    } else if (e < 13) {
                      if (11 <= e && e <= 12)
                        return i.CLUSTER_BREAK.CONTROL;
                    } else if (e < 14) {
                      if (e === 13)
                        return i.CLUSTER_BREAK.CR;
                    } else if (14 <= e && e <= 31)
                      return i.CLUSTER_BREAK.CONTROL;
                  } else if (e < 768) {
                    if (e < 173) {
                      if (127 <= e && e <= 159)
                        return i.CLUSTER_BREAK.CONTROL;
                    } else if (e === 173)
                      return i.CLUSTER_BREAK.CONTROL;
                  } else if (e < 1155) {
                    if (768 <= e && e <= 879)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1425) {
                    if (1155 <= e && e <= 1161)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (1425 <= e && e <= 1469)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 1552) {
                  if (e < 1476) {
                    if (e < 1473) {
                      if (e === 1471)
                        return i.CLUSTER_BREAK.EXTEND;
                    } else if (1473 <= e && e <= 1474)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1479) {
                    if (1476 <= e && e <= 1477)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1536) {
                    if (e === 1479)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (1536 <= e && e <= 1541)
                    return i.CLUSTER_BREAK.PREPEND;
                } else if (e < 1648) {
                  if (e < 1564) {
                    if (1552 <= e && e <= 1562)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1611) {
                    if (e === 1564)
                      return i.CLUSTER_BREAK.CONTROL;
                  } else if (1611 <= e && e <= 1631)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 1750) {
                  if (e === 1648)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 1757) {
                  if (1750 <= e && e <= 1756)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 1757)
                  return i.CLUSTER_BREAK.PREPEND;
              } else if (e < 2075) {
                if (e < 1840)
                  if (e < 1770) {
                    if (e < 1767) {
                      if (1759 <= e && e <= 1764)
                        return i.CLUSTER_BREAK.EXTEND;
                    } else if (1767 <= e && e <= 1768)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1807) {
                    if (1770 <= e && e <= 1773)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else {
                    if (e === 1807)
                      return i.CLUSTER_BREAK.PREPEND;
                    if (e === 1809)
                      return i.CLUSTER_BREAK.EXTEND;
                  }
                else if (e < 2027) {
                  if (e < 1958) {
                    if (1840 <= e && e <= 1866)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (1958 <= e && e <= 1968)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2045) {
                  if (2027 <= e && e <= 2035)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2070) {
                  if (e === 2045)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (2070 <= e && e <= 2073)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2200) {
                if (e < 2089) {
                  if (e < 2085) {
                    if (2075 <= e && e <= 2083)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (2085 <= e && e <= 2087)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2137) {
                  if (2089 <= e && e <= 2093)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2192) {
                  if (2137 <= e && e <= 2139)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (2192 <= e && e <= 2193)
                  return i.CLUSTER_BREAK.PREPEND;
              } else if (e < 2275) {
                if (e < 2250) {
                  if (2200 <= e && e <= 2207)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2274) {
                  if (2250 <= e && e <= 2273)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 2274)
                  return i.CLUSTER_BREAK.PREPEND;
              } else if (e < 2307) {
                if (2275 <= e && e <= 2306)
                  return i.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 2307)
                  return i.CLUSTER_BREAK.SPACINGMARK;
                if (e === 2362)
                  return i.CLUSTER_BREAK.EXTEND;
              }
            else if (e < 2561) {
              if (e < 2434) {
                if (e < 2381) {
                  if (e < 2366) {
                    if (e === 2363)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                    if (e === 2364)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2369) {
                    if (2366 <= e && e <= 2368)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 2377) {
                    if (2369 <= e && e <= 2376)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (2377 <= e && e <= 2380)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 2385) {
                  if (e < 2382) {
                    if (e === 2381)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (2382 <= e && e <= 2383)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 2402) {
                  if (2385 <= e && e <= 2391)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2433) {
                  if (2402 <= e && e <= 2403)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 2433)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2503) {
                if (e < 2494) {
                  if (e < 2492) {
                    if (2434 <= e && e <= 2435)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e === 2492)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2495) {
                  if (e === 2494)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2497) {
                  if (2495 <= e && e <= 2496)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (2497 <= e && e <= 2500)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2519) {
                if (e < 2507) {
                  if (2503 <= e && e <= 2504)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 2509) {
                  if (2507 <= e && e <= 2508)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e === 2509)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2530) {
                if (e === 2519)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2558) {
                if (2530 <= e && e <= 2531)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e === 2558)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 2691) {
              if (e < 2631) {
                if (e < 2620) {
                  if (e < 2563) {
                    if (2561 <= e && e <= 2562)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e === 2563)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 2622) {
                  if (e === 2620)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2625) {
                  if (2622 <= e && e <= 2624)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (2625 <= e && e <= 2626)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2672) {
                if (e < 2635) {
                  if (2631 <= e && e <= 2632)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2641) {
                  if (2635 <= e && e <= 2637)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 2641)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2677) {
                if (2672 <= e && e <= 2673)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2689) {
                if (e === 2677)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (2689 <= e && e <= 2690)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 2761) {
              if (e < 2750) {
                if (e === 2691)
                  return i.CLUSTER_BREAK.SPACINGMARK;
                if (e === 2748)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 2753) {
                if (2750 <= e && e <= 2752)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 2759) {
                if (2753 <= e && e <= 2757)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (2759 <= e && e <= 2760)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 2786) {
              if (e < 2763) {
                if (e === 2761)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 2765) {
                if (2763 <= e && e <= 2764)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e === 2765)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 2810) {
              if (2786 <= e && e <= 2787)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 2817) {
              if (2810 <= e && e <= 2815)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e === 2817)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 3315) {
            if (e < 3076) {
              if (e < 2946) {
                if (e < 2887) {
                  if (e < 2878) {
                    if (e < 2876) {
                      if (2818 <= e && e <= 2819)
                        return i.CLUSTER_BREAK.SPACINGMARK;
                    } else if (e === 2876)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2880) {
                    if (2878 <= e && e <= 2879)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2881) {
                    if (e === 2880)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                  } else if (2881 <= e && e <= 2884)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2893) {
                  if (e < 2891) {
                    if (2887 <= e && e <= 2888)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                  } else if (2891 <= e && e <= 2892)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 2901) {
                  if (e === 2893)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 2914) {
                  if (2901 <= e && e <= 2903)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (2914 <= e && e <= 2915)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3014) {
                if (e < 3007) {
                  if (e === 2946 || e === 3006)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 3008) {
                  if (e === 3007)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 3009) {
                  if (e === 3008)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (3009 <= e && e <= 3010)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3031) {
                if (e < 3018) {
                  if (3014 <= e && e <= 3016)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 3021) {
                  if (3018 <= e && e <= 3020)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e === 3021)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3072) {
                if (e === 3031)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3073) {
                if (e === 3072)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (3073 <= e && e <= 3075)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 3262) {
              if (e < 3146) {
                if (e < 3134) {
                  if (e === 3076 || e === 3132)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 3137) {
                  if (3134 <= e && e <= 3136)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 3142) {
                  if (3137 <= e && e <= 3140)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (3142 <= e && e <= 3144)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3201) {
                if (e < 3157) {
                  if (3146 <= e && e <= 3149)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 3170) {
                  if (3157 <= e && e <= 3158)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (3170 <= e && e <= 3171)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3202) {
                if (e === 3201)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3260) {
                if (3202 <= e && e <= 3203)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e === 3260)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 3270) {
              if (e < 3264) {
                if (e === 3262)
                  return i.CLUSTER_BREAK.SPACINGMARK;
                if (e === 3263)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3266) {
                if (3264 <= e && e <= 3265)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3267) {
                if (e === 3266)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (3267 <= e && e <= 3268)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 3276) {
              if (e < 3271) {
                if (e === 3270)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3274) {
                if (3271 <= e && e <= 3272)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (3274 <= e && e <= 3275)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 3285) {
              if (3276 <= e && e <= 3277)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 3298) {
              if (3285 <= e && e <= 3286)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (3298 <= e && e <= 3299)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 3551) {
            if (e < 3406) {
              if (e < 3391) {
                if (e < 3330) {
                  if (e < 3328) {
                    if (e === 3315)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                  } else if (3328 <= e && e <= 3329)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 3387) {
                  if (3330 <= e && e <= 3331)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 3390) {
                  if (3387 <= e && e <= 3388)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 3390)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3398) {
                if (e < 3393) {
                  if (3391 <= e && e <= 3392)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (3393 <= e && e <= 3396)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3402) {
                if (3398 <= e && e <= 3400)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3405) {
                if (3402 <= e && e <= 3404)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e === 3405)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 3530) {
              if (e < 3426) {
                if (e === 3406)
                  return i.CLUSTER_BREAK.PREPEND;
                if (e === 3415)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3457) {
                if (3426 <= e && e <= 3427)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3458) {
                if (e === 3457)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (3458 <= e && e <= 3459)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 3538) {
              if (e < 3535) {
                if (e === 3530)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3536) {
                if (e === 3535)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (3536 <= e && e <= 3537)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 3542) {
              if (3538 <= e && e <= 3540)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 3544) {
              if (e === 3542)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (3544 <= e && e <= 3550)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 3893) {
            if (e < 3655) {
              if (e < 3633) {
                if (e < 3570) {
                  if (e === 3551)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (3570 <= e && e <= 3571)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3635) {
                if (e === 3633)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 3636) {
                if (e === 3635)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (3636 <= e && e <= 3642)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 3764)
              if (e < 3761) {
                if (3655 <= e && e <= 3662)
                  return i.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 3761)
                  return i.CLUSTER_BREAK.EXTEND;
                if (e === 3763)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              }
            else if (e < 3784) {
              if (3764 <= e && e <= 3772)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 3864) {
              if (3784 <= e && e <= 3790)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (3864 <= e && e <= 3865)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 3967) {
            if (e < 3897) {
              if (e === 3893 || e === 3895)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 3902) {
              if (e === 3897)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 3953) {
              if (3902 <= e && e <= 3903)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (3953 <= e && e <= 3966)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 3981) {
            if (e < 3968) {
              if (e === 3967)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 3974) {
              if (3968 <= e && e <= 3972)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (3974 <= e && e <= 3975)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 3993) {
            if (3981 <= e && e <= 3991)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 4038) {
            if (3993 <= e && e <= 4028)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e === 4038)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 7204) {
          if (e < 6448) {
            if (e < 5938) {
              if (e < 4226) {
                if (e < 4157) {
                  if (e < 4146) {
                    if (e < 4145) {
                      if (4141 <= e && e <= 4144)
                        return i.CLUSTER_BREAK.EXTEND;
                    } else if (e === 4145)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 4153) {
                    if (4146 <= e && e <= 4151)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e < 4155) {
                    if (4153 <= e && e <= 4154)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (4155 <= e && e <= 4156)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 4184) {
                  if (e < 4182) {
                    if (4157 <= e && e <= 4158)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (4182 <= e && e <= 4183)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 4190) {
                  if (4184 <= e && e <= 4185)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 4209) {
                  if (4190 <= e && e <= 4192)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (4209 <= e && e <= 4212)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 4352) {
                if (e < 4229) {
                  if (e === 4226)
                    return i.CLUSTER_BREAK.EXTEND;
                  if (e === 4228)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 4237) {
                  if (4229 <= e && e <= 4230)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 4237 || e === 4253)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 4957) {
                if (e < 4448) {
                  if (4352 <= e && e <= 4447)
                    return i.CLUSTER_BREAK.L;
                } else if (e < 4520) {
                  if (4448 <= e && e <= 4519)
                    return i.CLUSTER_BREAK.V;
                } else if (4520 <= e && e <= 4607)
                  return i.CLUSTER_BREAK.T;
              } else if (e < 5906) {
                if (4957 <= e && e <= 4959)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 5909) {
                if (5906 <= e && e <= 5908)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e === 5909)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 6089) {
              if (e < 6070) {
                if (e < 5970) {
                  if (e < 5940) {
                    if (5938 <= e && e <= 5939)
                      return i.CLUSTER_BREAK.EXTEND;
                  } else if (e === 5940)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 6002) {
                  if (5970 <= e && e <= 5971)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 6068) {
                  if (6002 <= e && e <= 6003)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (6068 <= e && e <= 6069)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6078) {
                if (e < 6071) {
                  if (e === 6070)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (6071 <= e && e <= 6077)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6086) {
                if (6078 <= e && e <= 6085)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 6087) {
                if (e === 6086)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (6087 <= e && e <= 6088)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 6277)
              if (e < 6155) {
                if (e < 6109) {
                  if (6089 <= e && e <= 6099)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 6109)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6158) {
                if (6155 <= e && e <= 6157)
                  return i.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 6158)
                  return i.CLUSTER_BREAK.CONTROL;
                if (e === 6159)
                  return i.CLUSTER_BREAK.EXTEND;
              }
            else if (e < 6435) {
              if (e < 6313) {
                if (6277 <= e && e <= 6278)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6432) {
                if (e === 6313)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (6432 <= e && e <= 6434)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 6439) {
              if (6435 <= e && e <= 6438)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 6441) {
              if (6439 <= e && e <= 6440)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (6441 <= e && e <= 6443)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 6971) {
            if (e < 6744)
              if (e < 6681) {
                if (e < 6451) {
                  if (e < 6450) {
                    if (6448 <= e && e <= 6449)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e === 6450)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 6457) {
                  if (6451 <= e && e <= 6456)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 6679) {
                  if (6457 <= e && e <= 6459)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (6679 <= e && e <= 6680)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6741) {
                if (e < 6683) {
                  if (6681 <= e && e <= 6682)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e === 6683)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6742) {
                if (e === 6741)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else {
                if (e === 6742)
                  return i.CLUSTER_BREAK.EXTEND;
                if (e === 6743)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              }
            else if (e < 6771) {
              if (e < 6754) {
                if (e < 6752) {
                  if (6744 <= e && e <= 6750)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 6752)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6757) {
                if (e === 6754)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6765) {
                if (6757 <= e && e <= 6764)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (6765 <= e && e <= 6770)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 6912) {
              if (e < 6783) {
                if (6771 <= e && e <= 6780)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6832) {
                if (e === 6783)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (6832 <= e && e <= 6862)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 6916) {
              if (6912 <= e && e <= 6915)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 6964) {
              if (e === 6916)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (6964 <= e && e <= 6970)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 7080) {
            if (e < 7019) {
              if (e < 6973) {
                if (e === 6971)
                  return i.CLUSTER_BREAK.SPACINGMARK;
                if (e === 6972)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 6978) {
                if (6973 <= e && e <= 6977)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 6979) {
                if (e === 6978)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (6979 <= e && e <= 6980)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 7073) {
              if (e < 7040) {
                if (7019 <= e && e <= 7027)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 7042) {
                if (7040 <= e && e <= 7041)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e === 7042)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 7074) {
              if (e === 7073)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 7078) {
              if (7074 <= e && e <= 7077)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (7078 <= e && e <= 7079)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 7144)
            if (e < 7083) {
              if (e < 7082) {
                if (7080 <= e && e <= 7081)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e === 7082)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 7142) {
              if (7083 <= e && e <= 7085)
                return i.CLUSTER_BREAK.EXTEND;
            } else {
              if (e === 7142)
                return i.CLUSTER_BREAK.EXTEND;
              if (e === 7143)
                return i.CLUSTER_BREAK.SPACINGMARK;
            }
          else if (e < 7150) {
            if (e < 7146) {
              if (7144 <= e && e <= 7145)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 7149) {
              if (7146 <= e && e <= 7148)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e === 7149)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 7151) {
            if (e === 7150)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 7154) {
            if (7151 <= e && e <= 7153)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (7154 <= e && e <= 7155)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 43346) {
          if (e < 11647) {
            if (e < 7415) {
              if (e < 7380) {
                if (e < 7220) {
                  if (e < 7212) {
                    if (7204 <= e && e <= 7211)
                      return i.CLUSTER_BREAK.SPACINGMARK;
                  } else if (7212 <= e && e <= 7219)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e < 7222) {
                  if (7220 <= e && e <= 7221)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 7376) {
                  if (7222 <= e && e <= 7223)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (7376 <= e && e <= 7378)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 7394) {
                if (e < 7393) {
                  if (7380 <= e && e <= 7392)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 7393)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 7405) {
                if (7394 <= e && e <= 7400)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e === 7405 || e === 7412)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 8205)
              if (e < 7616) {
                if (e < 7416) {
                  if (e === 7415)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (7416 <= e && e <= 7417)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 8203) {
                if (7616 <= e && e <= 7679)
                  return i.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 8203)
                  return i.CLUSTER_BREAK.CONTROL;
                if (e === 8204)
                  return i.CLUSTER_BREAK.EXTEND;
              }
            else if (e < 8288) {
              if (e < 8206) {
                if (e === 8205)
                  return i.CLUSTER_BREAK.ZWJ;
              } else if (e < 8232) {
                if (8206 <= e && e <= 8207)
                  return i.CLUSTER_BREAK.CONTROL;
              } else if (8232 <= e && e <= 8238)
                return i.CLUSTER_BREAK.CONTROL;
            } else if (e < 8400) {
              if (8288 <= e && e <= 8303)
                return i.CLUSTER_BREAK.CONTROL;
            } else if (e < 11503) {
              if (8400 <= e && e <= 8432)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (11503 <= e && e <= 11505)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 43043) {
            if (e < 42612) {
              if (e < 12330) {
                if (e < 11744) {
                  if (e === 11647)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (11744 <= e && e <= 11775)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 12441) {
                if (12330 <= e && e <= 12335)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 42607) {
                if (12441 <= e && e <= 12442)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (42607 <= e && e <= 42610)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 43010) {
              if (e < 42654) {
                if (42612 <= e && e <= 42621)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 42736) {
                if (42654 <= e && e <= 42655)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (42736 <= e && e <= 42737)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 43014) {
              if (e === 43010)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e === 43014 || e === 43019)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 43188) {
            if (e < 43047) {
              if (e < 43045) {
                if (43043 <= e && e <= 43044)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (43045 <= e && e <= 43046)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 43052) {
              if (e === 43047)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 43136) {
              if (e === 43052)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (43136 <= e && e <= 43137)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 43263) {
            if (e < 43204) {
              if (43188 <= e && e <= 43203)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 43232) {
              if (43204 <= e && e <= 43205)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (43232 <= e && e <= 43249)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 43302) {
            if (e === 43263)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 43335) {
            if (43302 <= e && e <= 43309)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (43335 <= e && e <= 43345)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 43698) {
          if (e < 43493) {
            if (e < 43444)
              if (e < 43392) {
                if (e < 43360) {
                  if (43346 <= e && e <= 43347)
                    return i.CLUSTER_BREAK.SPACINGMARK;
                } else if (43360 <= e && e <= 43388)
                  return i.CLUSTER_BREAK.L;
              } else if (e < 43395) {
                if (43392 <= e && e <= 43394)
                  return i.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 43395)
                  return i.CLUSTER_BREAK.SPACINGMARK;
                if (e === 43443)
                  return i.CLUSTER_BREAK.EXTEND;
              }
            else if (e < 43450) {
              if (e < 43446) {
                if (43444 <= e && e <= 43445)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (43446 <= e && e <= 43449)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 43452) {
              if (43450 <= e && e <= 43451)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 43454) {
              if (43452 <= e && e <= 43453)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (43454 <= e && e <= 43456)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 43573) {
            if (e < 43567) {
              if (e < 43561) {
                if (e === 43493)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (43561 <= e && e <= 43566)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 43569) {
              if (43567 <= e && e <= 43568)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 43571) {
              if (43569 <= e && e <= 43570)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (43571 <= e && e <= 43572)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 43597) {
            if (e < 43587) {
              if (43573 <= e && e <= 43574)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e === 43587 || e === 43596)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 43644) {
            if (e === 43597)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e === 43644 || e === 43696)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 44006) {
          if (e < 43756)
            if (e < 43710) {
              if (e < 43703) {
                if (43698 <= e && e <= 43700)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (43703 <= e && e <= 43704)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 43713) {
              if (43710 <= e && e <= 43711)
                return i.CLUSTER_BREAK.EXTEND;
            } else {
              if (e === 43713)
                return i.CLUSTER_BREAK.EXTEND;
              if (e === 43755)
                return i.CLUSTER_BREAK.SPACINGMARK;
            }
          else if (e < 43766) {
            if (e < 43758) {
              if (43756 <= e && e <= 43757)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 43765) {
              if (43758 <= e && e <= 43759)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e === 43765)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 44003) {
            if (e === 43766)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 44005) {
            if (44003 <= e && e <= 44004)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e === 44005)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 44032)
          if (e < 44009) {
            if (e < 44008) {
              if (44006 <= e && e <= 44007)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e === 44008)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 44012) {
            if (44009 <= e && e <= 44010)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else {
            if (e === 44012)
              return i.CLUSTER_BREAK.SPACINGMARK;
            if (e === 44013)
              return i.CLUSTER_BREAK.EXTEND;
          }
        else if (e < 44061) {
          if (e < 44033) {
            if (e === 44032)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 44060) {
            if (44033 <= e && e <= 44059)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 44060)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 44088) {
          if (44061 <= e && e <= 44087)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 44089) {
          if (e === 44088)
            return i.CLUSTER_BREAK.LV;
        } else if (44089 <= e && e <= 44115)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 46497) {
        if (e < 45293) {
          if (e < 44704) {
            if (e < 44397) {
              if (e < 44256) {
                if (e < 44173) {
                  if (e < 44144) {
                    if (e < 44117) {
                      if (e === 44116)
                        return i.CLUSTER_BREAK.LV;
                    } else if (44117 <= e && e <= 44143)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e < 44145) {
                    if (e === 44144)
                      return i.CLUSTER_BREAK.LV;
                  } else if (e < 44172) {
                    if (44145 <= e && e <= 44171)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e === 44172)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 44201) {
                  if (e < 44200) {
                    if (44173 <= e && e <= 44199)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e === 44200)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 44228) {
                  if (44201 <= e && e <= 44227)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 44229) {
                  if (e === 44228)
                    return i.CLUSTER_BREAK.LV;
                } else if (44229 <= e && e <= 44255)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 44313) {
                if (e < 44284) {
                  if (e < 44257) {
                    if (e === 44256)
                      return i.CLUSTER_BREAK.LV;
                  } else if (44257 <= e && e <= 44283)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 44285) {
                  if (e === 44284)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 44312) {
                  if (44285 <= e && e <= 44311)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 44312)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 44368) {
                if (e < 44340) {
                  if (44313 <= e && e <= 44339)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 44341) {
                  if (e === 44340)
                    return i.CLUSTER_BREAK.LV;
                } else if (44341 <= e && e <= 44367)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 44369) {
                if (e === 44368)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 44396) {
                if (44369 <= e && e <= 44395)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 44396)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 44537) {
              if (e < 44480) {
                if (e < 44425) {
                  if (e < 44424) {
                    if (44397 <= e && e <= 44423)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e === 44424)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 44452) {
                  if (44425 <= e && e <= 44451)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 44453) {
                  if (e === 44452)
                    return i.CLUSTER_BREAK.LV;
                } else if (44453 <= e && e <= 44479)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 44508) {
                if (e < 44481) {
                  if (e === 44480)
                    return i.CLUSTER_BREAK.LV;
                } else if (44481 <= e && e <= 44507)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 44509) {
                if (e === 44508)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 44536) {
                if (44509 <= e && e <= 44535)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 44536)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 44620) {
              if (e < 44565) {
                if (e < 44564) {
                  if (44537 <= e && e <= 44563)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 44564)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 44592) {
                if (44565 <= e && e <= 44591)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 44593) {
                if (e === 44592)
                  return i.CLUSTER_BREAK.LV;
              } else if (44593 <= e && e <= 44619)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 44649) {
              if (e < 44621) {
                if (e === 44620)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 44648) {
                if (44621 <= e && e <= 44647)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 44648)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 44676) {
              if (44649 <= e && e <= 44675)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 44677) {
              if (e === 44676)
                return i.CLUSTER_BREAK.LV;
            } else if (44677 <= e && e <= 44703)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 44985) {
            if (e < 44844) {
              if (e < 44761) {
                if (e < 44732) {
                  if (e < 44705) {
                    if (e === 44704)
                      return i.CLUSTER_BREAK.LV;
                  } else if (44705 <= e && e <= 44731)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 44733) {
                  if (e === 44732)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 44760) {
                  if (44733 <= e && e <= 44759)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 44760)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 44789) {
                if (e < 44788) {
                  if (44761 <= e && e <= 44787)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 44788)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 44816) {
                if (44789 <= e && e <= 44815)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 44817) {
                if (e === 44816)
                  return i.CLUSTER_BREAK.LV;
              } else if (44817 <= e && e <= 44843)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 44901) {
              if (e < 44872) {
                if (e < 44845) {
                  if (e === 44844)
                    return i.CLUSTER_BREAK.LV;
                } else if (44845 <= e && e <= 44871)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 44873) {
                if (e === 44872)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 44900) {
                if (44873 <= e && e <= 44899)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 44900)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 44956) {
              if (e < 44928) {
                if (44901 <= e && e <= 44927)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 44929) {
                if (e === 44928)
                  return i.CLUSTER_BREAK.LV;
              } else if (44929 <= e && e <= 44955)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 44957) {
              if (e === 44956)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 44984) {
              if (44957 <= e && e <= 44983)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 44984)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 45152) {
            if (e < 45068) {
              if (e < 45013) {
                if (e < 45012) {
                  if (44985 <= e && e <= 45011)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 45012)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 45040) {
                if (45013 <= e && e <= 45039)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 45041) {
                if (e === 45040)
                  return i.CLUSTER_BREAK.LV;
              } else if (45041 <= e && e <= 45067)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 45097) {
              if (e < 45069) {
                if (e === 45068)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 45096) {
                if (45069 <= e && e <= 45095)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 45096)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45124) {
              if (45097 <= e && e <= 45123)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 45125) {
              if (e === 45124)
                return i.CLUSTER_BREAK.LV;
            } else if (45125 <= e && e <= 45151)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 45209) {
            if (e < 45180) {
              if (e < 45153) {
                if (e === 45152)
                  return i.CLUSTER_BREAK.LV;
              } else if (45153 <= e && e <= 45179)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 45181) {
              if (e === 45180)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45208) {
              if (45181 <= e && e <= 45207)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 45208)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 45264) {
            if (e < 45236) {
              if (45209 <= e && e <= 45235)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 45237) {
              if (e === 45236)
                return i.CLUSTER_BREAK.LV;
            } else if (45237 <= e && e <= 45263)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 45265) {
            if (e === 45264)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 45292) {
            if (45265 <= e && e <= 45291)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 45292)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 45908) {
          if (e < 45600) {
            if (e < 45433) {
              if (e < 45376) {
                if (e < 45321) {
                  if (e < 45320) {
                    if (45293 <= e && e <= 45319)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e === 45320)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 45348) {
                  if (45321 <= e && e <= 45347)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 45349) {
                  if (e === 45348)
                    return i.CLUSTER_BREAK.LV;
                } else if (45349 <= e && e <= 45375)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 45404) {
                if (e < 45377) {
                  if (e === 45376)
                    return i.CLUSTER_BREAK.LV;
                } else if (45377 <= e && e <= 45403)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 45405) {
                if (e === 45404)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 45432) {
                if (45405 <= e && e <= 45431)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 45432)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45516) {
              if (e < 45461) {
                if (e < 45460) {
                  if (45433 <= e && e <= 45459)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 45460)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 45488) {
                if (45461 <= e && e <= 45487)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 45489) {
                if (e === 45488)
                  return i.CLUSTER_BREAK.LV;
              } else if (45489 <= e && e <= 45515)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 45545) {
              if (e < 45517) {
                if (e === 45516)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 45544) {
                if (45517 <= e && e <= 45543)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 45544)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45572) {
              if (45545 <= e && e <= 45571)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 45573) {
              if (e === 45572)
                return i.CLUSTER_BREAK.LV;
            } else if (45573 <= e && e <= 45599)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 45741) {
            if (e < 45657) {
              if (e < 45628) {
                if (e < 45601) {
                  if (e === 45600)
                    return i.CLUSTER_BREAK.LV;
                } else if (45601 <= e && e <= 45627)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 45629) {
                if (e === 45628)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 45656) {
                if (45629 <= e && e <= 45655)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 45656)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45712) {
              if (e < 45684) {
                if (45657 <= e && e <= 45683)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 45685) {
                if (e === 45684)
                  return i.CLUSTER_BREAK.LV;
              } else if (45685 <= e && e <= 45711)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 45713) {
              if (e === 45712)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45740) {
              if (45713 <= e && e <= 45739)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 45740)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 45824) {
            if (e < 45769) {
              if (e < 45768) {
                if (45741 <= e && e <= 45767)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 45768)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45796) {
              if (45769 <= e && e <= 45795)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 45797) {
              if (e === 45796)
                return i.CLUSTER_BREAK.LV;
            } else if (45797 <= e && e <= 45823)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 45853) {
            if (e < 45825) {
              if (e === 45824)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45852) {
              if (45825 <= e && e <= 45851)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 45852)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 45880) {
            if (45853 <= e && e <= 45879)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 45881) {
            if (e === 45880)
              return i.CLUSTER_BREAK.LV;
          } else if (45881 <= e && e <= 45907)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 46189) {
          if (e < 46048) {
            if (e < 45965) {
              if (e < 45936) {
                if (e < 45909) {
                  if (e === 45908)
                    return i.CLUSTER_BREAK.LV;
                } else if (45909 <= e && e <= 45935)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 45937) {
                if (e === 45936)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 45964) {
                if (45937 <= e && e <= 45963)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 45964)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 45993) {
              if (e < 45992) {
                if (45965 <= e && e <= 45991)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 45992)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 46020) {
              if (45993 <= e && e <= 46019)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 46021) {
              if (e === 46020)
                return i.CLUSTER_BREAK.LV;
            } else if (46021 <= e && e <= 46047)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 46105) {
            if (e < 46076) {
              if (e < 46049) {
                if (e === 46048)
                  return i.CLUSTER_BREAK.LV;
              } else if (46049 <= e && e <= 46075)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 46077) {
              if (e === 46076)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 46104) {
              if (46077 <= e && e <= 46103)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 46104)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 46160) {
            if (e < 46132) {
              if (46105 <= e && e <= 46131)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 46133) {
              if (e === 46132)
                return i.CLUSTER_BREAK.LV;
            } else if (46133 <= e && e <= 46159)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 46161) {
            if (e === 46160)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 46188) {
            if (46161 <= e && e <= 46187)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 46188)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 46356) {
          if (e < 46272) {
            if (e < 46217) {
              if (e < 46216) {
                if (46189 <= e && e <= 46215)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 46216)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 46244) {
              if (46217 <= e && e <= 46243)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 46245) {
              if (e === 46244)
                return i.CLUSTER_BREAK.LV;
            } else if (46245 <= e && e <= 46271)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 46301) {
            if (e < 46273) {
              if (e === 46272)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 46300) {
              if (46273 <= e && e <= 46299)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 46300)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 46328) {
            if (46301 <= e && e <= 46327)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 46329) {
            if (e === 46328)
              return i.CLUSTER_BREAK.LV;
          } else if (46329 <= e && e <= 46355)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 46413) {
          if (e < 46384) {
            if (e < 46357) {
              if (e === 46356)
                return i.CLUSTER_BREAK.LV;
            } else if (46357 <= e && e <= 46383)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 46385) {
            if (e === 46384)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 46412) {
            if (46385 <= e && e <= 46411)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 46412)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 46468) {
          if (e < 46440) {
            if (46413 <= e && e <= 46439)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 46441) {
            if (e === 46440)
              return i.CLUSTER_BREAK.LV;
          } else if (46441 <= e && e <= 46467)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 46469) {
          if (e === 46468)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 46496) {
          if (46469 <= e && e <= 46495)
            return i.CLUSTER_BREAK.LVT;
        } else if (e === 46496)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 47701) {
        if (e < 47112) {
          if (e < 46804) {
            if (e < 46637) {
              if (e < 46580) {
                if (e < 46525) {
                  if (e < 46524) {
                    if (46497 <= e && e <= 46523)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e === 46524)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 46552) {
                  if (46525 <= e && e <= 46551)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 46553) {
                  if (e === 46552)
                    return i.CLUSTER_BREAK.LV;
                } else if (46553 <= e && e <= 46579)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 46608) {
                if (e < 46581) {
                  if (e === 46580)
                    return i.CLUSTER_BREAK.LV;
                } else if (46581 <= e && e <= 46607)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 46609) {
                if (e === 46608)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 46636) {
                if (46609 <= e && e <= 46635)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 46636)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 46720) {
              if (e < 46665) {
                if (e < 46664) {
                  if (46637 <= e && e <= 46663)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 46664)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 46692) {
                if (46665 <= e && e <= 46691)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 46693) {
                if (e === 46692)
                  return i.CLUSTER_BREAK.LV;
              } else if (46693 <= e && e <= 46719)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 46749) {
              if (e < 46721) {
                if (e === 46720)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 46748) {
                if (46721 <= e && e <= 46747)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 46748)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 46776) {
              if (46749 <= e && e <= 46775)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 46777) {
              if (e === 46776)
                return i.CLUSTER_BREAK.LV;
            } else if (46777 <= e && e <= 46803)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 46945) {
            if (e < 46861) {
              if (e < 46832) {
                if (e < 46805) {
                  if (e === 46804)
                    return i.CLUSTER_BREAK.LV;
                } else if (46805 <= e && e <= 46831)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 46833) {
                if (e === 46832)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 46860) {
                if (46833 <= e && e <= 46859)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 46860)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 46916) {
              if (e < 46888) {
                if (46861 <= e && e <= 46887)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 46889) {
                if (e === 46888)
                  return i.CLUSTER_BREAK.LV;
              } else if (46889 <= e && e <= 46915)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 46917) {
              if (e === 46916)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 46944) {
              if (46917 <= e && e <= 46943)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 46944)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 47028) {
            if (e < 46973) {
              if (e < 46972) {
                if (46945 <= e && e <= 46971)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 46972)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47e3) {
              if (46973 <= e && e <= 46999)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 47001) {
              if (e === 47e3)
                return i.CLUSTER_BREAK.LV;
            } else if (47001 <= e && e <= 47027)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47057) {
            if (e < 47029) {
              if (e === 47028)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47056) {
              if (47029 <= e && e <= 47055)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 47056)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 47084) {
            if (47057 <= e && e <= 47083)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47085) {
            if (e === 47084)
              return i.CLUSTER_BREAK.LV;
          } else if (47085 <= e && e <= 47111)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 47393) {
          if (e < 47252) {
            if (e < 47169) {
              if (e < 47140) {
                if (e < 47113) {
                  if (e === 47112)
                    return i.CLUSTER_BREAK.LV;
                } else if (47113 <= e && e <= 47139)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 47141) {
                if (e === 47140)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 47168) {
                if (47141 <= e && e <= 47167)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 47168)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47197) {
              if (e < 47196) {
                if (47169 <= e && e <= 47195)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 47196)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47224) {
              if (47197 <= e && e <= 47223)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 47225) {
              if (e === 47224)
                return i.CLUSTER_BREAK.LV;
            } else if (47225 <= e && e <= 47251)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47309) {
            if (e < 47280) {
              if (e < 47253) {
                if (e === 47252)
                  return i.CLUSTER_BREAK.LV;
              } else if (47253 <= e && e <= 47279)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 47281) {
              if (e === 47280)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47308) {
              if (47281 <= e && e <= 47307)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 47308)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 47364) {
            if (e < 47336) {
              if (47309 <= e && e <= 47335)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 47337) {
              if (e === 47336)
                return i.CLUSTER_BREAK.LV;
            } else if (47337 <= e && e <= 47363)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47365) {
            if (e === 47364)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 47392) {
            if (47365 <= e && e <= 47391)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 47392)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 47560) {
          if (e < 47476) {
            if (e < 47421) {
              if (e < 47420) {
                if (47393 <= e && e <= 47419)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 47420)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47448) {
              if (47421 <= e && e <= 47447)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 47449) {
              if (e === 47448)
                return i.CLUSTER_BREAK.LV;
            } else if (47449 <= e && e <= 47475)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47505) {
            if (e < 47477) {
              if (e === 47476)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47504) {
              if (47477 <= e && e <= 47503)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 47504)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 47532) {
            if (47505 <= e && e <= 47531)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47533) {
            if (e === 47532)
              return i.CLUSTER_BREAK.LV;
          } else if (47533 <= e && e <= 47559)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 47617) {
          if (e < 47588) {
            if (e < 47561) {
              if (e === 47560)
                return i.CLUSTER_BREAK.LV;
            } else if (47561 <= e && e <= 47587)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47589) {
            if (e === 47588)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 47616) {
            if (47589 <= e && e <= 47615)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 47616)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 47672) {
          if (e < 47644) {
            if (47617 <= e && e <= 47643)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47645) {
            if (e === 47644)
              return i.CLUSTER_BREAK.LV;
          } else if (47645 <= e && e <= 47671)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 47673) {
          if (e === 47672)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 47700) {
          if (47673 <= e && e <= 47699)
            return i.CLUSTER_BREAK.LVT;
        } else if (e === 47700)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 48316) {
        if (e < 48008) {
          if (e < 47841) {
            if (e < 47784) {
              if (e < 47729) {
                if (e < 47728) {
                  if (47701 <= e && e <= 47727)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 47728)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 47756) {
                if (47729 <= e && e <= 47755)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 47757) {
                if (e === 47756)
                  return i.CLUSTER_BREAK.LV;
              } else if (47757 <= e && e <= 47783)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 47812) {
              if (e < 47785) {
                if (e === 47784)
                  return i.CLUSTER_BREAK.LV;
              } else if (47785 <= e && e <= 47811)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 47813) {
              if (e === 47812)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47840) {
              if (47813 <= e && e <= 47839)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 47840)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 47924) {
            if (e < 47869) {
              if (e < 47868) {
                if (47841 <= e && e <= 47867)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 47868)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47896) {
              if (47869 <= e && e <= 47895)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 47897) {
              if (e === 47896)
                return i.CLUSTER_BREAK.LV;
            } else if (47897 <= e && e <= 47923)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47953) {
            if (e < 47925) {
              if (e === 47924)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 47952) {
              if (47925 <= e && e <= 47951)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 47952)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 47980) {
            if (47953 <= e && e <= 47979)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 47981) {
            if (e === 47980)
              return i.CLUSTER_BREAK.LV;
          } else if (47981 <= e && e <= 48007)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48149) {
          if (e < 48065) {
            if (e < 48036) {
              if (e < 48009) {
                if (e === 48008)
                  return i.CLUSTER_BREAK.LV;
              } else if (48009 <= e && e <= 48035)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 48037) {
              if (e === 48036)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 48064) {
              if (48037 <= e && e <= 48063)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 48064)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48120) {
            if (e < 48092) {
              if (48065 <= e && e <= 48091)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 48093) {
              if (e === 48092)
                return i.CLUSTER_BREAK.LV;
            } else if (48093 <= e && e <= 48119)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 48121) {
            if (e === 48120)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48148) {
            if (48121 <= e && e <= 48147)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 48148)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 48232) {
          if (e < 48177) {
            if (e < 48176) {
              if (48149 <= e && e <= 48175)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 48176)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48204) {
            if (48177 <= e && e <= 48203)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 48205) {
            if (e === 48204)
              return i.CLUSTER_BREAK.LV;
          } else if (48205 <= e && e <= 48231)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48261) {
          if (e < 48233) {
            if (e === 48232)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48260) {
            if (48233 <= e && e <= 48259)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 48260)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 48288) {
          if (48261 <= e && e <= 48287)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48289) {
          if (e === 48288)
            return i.CLUSTER_BREAK.LV;
        } else if (48289 <= e && e <= 48315)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 48597) {
        if (e < 48456) {
          if (e < 48373) {
            if (e < 48344) {
              if (e < 48317) {
                if (e === 48316)
                  return i.CLUSTER_BREAK.LV;
              } else if (48317 <= e && e <= 48343)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 48345) {
              if (e === 48344)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 48372) {
              if (48345 <= e && e <= 48371)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 48372)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48401) {
            if (e < 48400) {
              if (48373 <= e && e <= 48399)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 48400)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48428) {
            if (48401 <= e && e <= 48427)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 48429) {
            if (e === 48428)
              return i.CLUSTER_BREAK.LV;
          } else if (48429 <= e && e <= 48455)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48513) {
          if (e < 48484) {
            if (e < 48457) {
              if (e === 48456)
                return i.CLUSTER_BREAK.LV;
            } else if (48457 <= e && e <= 48483)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 48485) {
            if (e === 48484)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48512) {
            if (48485 <= e && e <= 48511)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 48512)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 48568) {
          if (e < 48540) {
            if (48513 <= e && e <= 48539)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 48541) {
            if (e === 48540)
              return i.CLUSTER_BREAK.LV;
          } else if (48541 <= e && e <= 48567)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48569) {
          if (e === 48568)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 48596) {
          if (48569 <= e && e <= 48595)
            return i.CLUSTER_BREAK.LVT;
        } else if (e === 48596)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 48764) {
        if (e < 48680) {
          if (e < 48625) {
            if (e < 48624) {
              if (48597 <= e && e <= 48623)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 48624)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48652) {
            if (48625 <= e && e <= 48651)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 48653) {
            if (e === 48652)
              return i.CLUSTER_BREAK.LV;
          } else if (48653 <= e && e <= 48679)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48709) {
          if (e < 48681) {
            if (e === 48680)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 48708) {
            if (48681 <= e && e <= 48707)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 48708)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 48736) {
          if (48709 <= e && e <= 48735)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48737) {
          if (e === 48736)
            return i.CLUSTER_BREAK.LV;
        } else if (48737 <= e && e <= 48763)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 48821) {
        if (e < 48792) {
          if (e < 48765) {
            if (e === 48764)
              return i.CLUSTER_BREAK.LV;
          } else if (48765 <= e && e <= 48791)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48793) {
          if (e === 48792)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 48820) {
          if (48793 <= e && e <= 48819)
            return i.CLUSTER_BREAK.LVT;
        } else if (e === 48820)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 48876) {
        if (e < 48848) {
          if (48821 <= e && e <= 48847)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 48849) {
          if (e === 48848)
            return i.CLUSTER_BREAK.LV;
        } else if (48849 <= e && e <= 48875)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 48877) {
        if (e === 48876)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 48904) {
        if (48877 <= e && e <= 48903)
          return i.CLUSTER_BREAK.LVT;
      } else if (e === 48904)
        return i.CLUSTER_BREAK.LV;
    } else if (e < 53720) {
      if (e < 51312) {
        if (e < 50108) {
          if (e < 49493) {
            if (e < 49212) {
              if (e < 49045) {
                if (e < 48988) {
                  if (e < 48933) {
                    if (e < 48932) {
                      if (48905 <= e && e <= 48931)
                        return i.CLUSTER_BREAK.LVT;
                    } else if (e === 48932)
                      return i.CLUSTER_BREAK.LV;
                  } else if (e < 48960) {
                    if (48933 <= e && e <= 48959)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e < 48961) {
                    if (e === 48960)
                      return i.CLUSTER_BREAK.LV;
                  } else if (48961 <= e && e <= 48987)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 49016) {
                  if (e < 48989) {
                    if (e === 48988)
                      return i.CLUSTER_BREAK.LV;
                  } else if (48989 <= e && e <= 49015)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 49017) {
                  if (e === 49016)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 49044) {
                  if (49017 <= e && e <= 49043)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 49044)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49128) {
                if (e < 49073) {
                  if (e < 49072) {
                    if (49045 <= e && e <= 49071)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e === 49072)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 49100) {
                  if (49073 <= e && e <= 49099)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 49101) {
                  if (e === 49100)
                    return i.CLUSTER_BREAK.LV;
                } else if (49101 <= e && e <= 49127)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49157) {
                if (e < 49129) {
                  if (e === 49128)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 49156) {
                  if (49129 <= e && e <= 49155)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 49156)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49184) {
                if (49157 <= e && e <= 49183)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49185) {
                if (e === 49184)
                  return i.CLUSTER_BREAK.LV;
              } else if (49185 <= e && e <= 49211)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 49352) {
              if (e < 49269) {
                if (e < 49240) {
                  if (e < 49213) {
                    if (e === 49212)
                      return i.CLUSTER_BREAK.LV;
                  } else if (49213 <= e && e <= 49239)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 49241) {
                  if (e === 49240)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 49268) {
                  if (49241 <= e && e <= 49267)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 49268)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49297) {
                if (e < 49296) {
                  if (49269 <= e && e <= 49295)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 49296)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49324) {
                if (49297 <= e && e <= 49323)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49325) {
                if (e === 49324)
                  return i.CLUSTER_BREAK.LV;
              } else if (49325 <= e && e <= 49351)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 49409) {
              if (e < 49380) {
                if (e < 49353) {
                  if (e === 49352)
                    return i.CLUSTER_BREAK.LV;
                } else if (49353 <= e && e <= 49379)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49381) {
                if (e === 49380)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49408) {
                if (49381 <= e && e <= 49407)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 49408)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 49464) {
              if (e < 49436) {
                if (49409 <= e && e <= 49435)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49437) {
                if (e === 49436)
                  return i.CLUSTER_BREAK.LV;
              } else if (49437 <= e && e <= 49463)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 49465) {
              if (e === 49464)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 49492) {
              if (49465 <= e && e <= 49491)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 49492)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 49800) {
            if (e < 49633) {
              if (e < 49576) {
                if (e < 49521) {
                  if (e < 49520) {
                    if (49493 <= e && e <= 49519)
                      return i.CLUSTER_BREAK.LVT;
                  } else if (e === 49520)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 49548) {
                  if (49521 <= e && e <= 49547)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 49549) {
                  if (e === 49548)
                    return i.CLUSTER_BREAK.LV;
                } else if (49549 <= e && e <= 49575)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49604) {
                if (e < 49577) {
                  if (e === 49576)
                    return i.CLUSTER_BREAK.LV;
                } else if (49577 <= e && e <= 49603)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49605) {
                if (e === 49604)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49632) {
                if (49605 <= e && e <= 49631)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 49632)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 49716) {
              if (e < 49661) {
                if (e < 49660) {
                  if (49633 <= e && e <= 49659)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 49660)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49688) {
                if (49661 <= e && e <= 49687)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49689) {
                if (e === 49688)
                  return i.CLUSTER_BREAK.LV;
              } else if (49689 <= e && e <= 49715)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 49745) {
              if (e < 49717) {
                if (e === 49716)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49744) {
                if (49717 <= e && e <= 49743)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 49744)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 49772) {
              if (49745 <= e && e <= 49771)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 49773) {
              if (e === 49772)
                return i.CLUSTER_BREAK.LV;
            } else if (49773 <= e && e <= 49799)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 49941) {
            if (e < 49857) {
              if (e < 49828) {
                if (e < 49801) {
                  if (e === 49800)
                    return i.CLUSTER_BREAK.LV;
                } else if (49801 <= e && e <= 49827)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49829) {
                if (e === 49828)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 49856) {
                if (49829 <= e && e <= 49855)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 49856)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 49912) {
              if (e < 49884) {
                if (49857 <= e && e <= 49883)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 49885) {
                if (e === 49884)
                  return i.CLUSTER_BREAK.LV;
              } else if (49885 <= e && e <= 49911)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 49913) {
              if (e === 49912)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 49940) {
              if (49913 <= e && e <= 49939)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 49940)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 50024) {
            if (e < 49969) {
              if (e < 49968) {
                if (49941 <= e && e <= 49967)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 49968)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 49996) {
              if (49969 <= e && e <= 49995)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 49997) {
              if (e === 49996)
                return i.CLUSTER_BREAK.LV;
            } else if (49997 <= e && e <= 50023)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 50053) {
            if (e < 50025) {
              if (e === 50024)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 50052) {
              if (50025 <= e && e <= 50051)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 50052)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 50080) {
            if (50053 <= e && e <= 50079)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 50081) {
            if (e === 50080)
              return i.CLUSTER_BREAK.LV;
          } else if (50081 <= e && e <= 50107)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 50697) {
          if (e < 50389) {
            if (e < 50248) {
              if (e < 50165) {
                if (e < 50136) {
                  if (e < 50109) {
                    if (e === 50108)
                      return i.CLUSTER_BREAK.LV;
                  } else if (50109 <= e && e <= 50135)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 50137) {
                  if (e === 50136)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 50164) {
                  if (50137 <= e && e <= 50163)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 50164)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 50193) {
                if (e < 50192) {
                  if (50165 <= e && e <= 50191)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 50192)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 50220) {
                if (50193 <= e && e <= 50219)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 50221) {
                if (e === 50220)
                  return i.CLUSTER_BREAK.LV;
              } else if (50221 <= e && e <= 50247)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50305) {
              if (e < 50276) {
                if (e < 50249) {
                  if (e === 50248)
                    return i.CLUSTER_BREAK.LV;
                } else if (50249 <= e && e <= 50275)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 50277) {
                if (e === 50276)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 50304) {
                if (50277 <= e && e <= 50303)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 50304)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 50360) {
              if (e < 50332) {
                if (50305 <= e && e <= 50331)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 50333) {
                if (e === 50332)
                  return i.CLUSTER_BREAK.LV;
              } else if (50333 <= e && e <= 50359)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50361) {
              if (e === 50360)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 50388) {
              if (50361 <= e && e <= 50387)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 50388)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 50556) {
            if (e < 50472) {
              if (e < 50417) {
                if (e < 50416) {
                  if (50389 <= e && e <= 50415)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 50416)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 50444) {
                if (50417 <= e && e <= 50443)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 50445) {
                if (e === 50444)
                  return i.CLUSTER_BREAK.LV;
              } else if (50445 <= e && e <= 50471)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50501) {
              if (e < 50473) {
                if (e === 50472)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 50500) {
                if (50473 <= e && e <= 50499)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 50500)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 50528) {
              if (50501 <= e && e <= 50527)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50529) {
              if (e === 50528)
                return i.CLUSTER_BREAK.LV;
            } else if (50529 <= e && e <= 50555)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 50613) {
            if (e < 50584) {
              if (e < 50557) {
                if (e === 50556)
                  return i.CLUSTER_BREAK.LV;
              } else if (50557 <= e && e <= 50583)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50585) {
              if (e === 50584)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 50612) {
              if (50585 <= e && e <= 50611)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 50612)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 50668) {
            if (e < 50640) {
              if (50613 <= e && e <= 50639)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50641) {
              if (e === 50640)
                return i.CLUSTER_BREAK.LV;
            } else if (50641 <= e && e <= 50667)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 50669) {
            if (e === 50668)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 50696) {
            if (50669 <= e && e <= 50695)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 50696)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 51004) {
          if (e < 50837) {
            if (e < 50780) {
              if (e < 50725) {
                if (e < 50724) {
                  if (50697 <= e && e <= 50723)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 50724)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 50752) {
                if (50725 <= e && e <= 50751)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 50753) {
                if (e === 50752)
                  return i.CLUSTER_BREAK.LV;
              } else if (50753 <= e && e <= 50779)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50808) {
              if (e < 50781) {
                if (e === 50780)
                  return i.CLUSTER_BREAK.LV;
              } else if (50781 <= e && e <= 50807)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50809) {
              if (e === 50808)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 50836) {
              if (50809 <= e && e <= 50835)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 50836)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 50920) {
            if (e < 50865) {
              if (e < 50864) {
                if (50837 <= e && e <= 50863)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 50864)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 50892) {
              if (50865 <= e && e <= 50891)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 50893) {
              if (e === 50892)
                return i.CLUSTER_BREAK.LV;
            } else if (50893 <= e && e <= 50919)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 50949) {
            if (e < 50921) {
              if (e === 50920)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 50948) {
              if (50921 <= e && e <= 50947)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 50948)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 50976) {
            if (50949 <= e && e <= 50975)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 50977) {
            if (e === 50976)
              return i.CLUSTER_BREAK.LV;
          } else if (50977 <= e && e <= 51003)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 51145) {
          if (e < 51061) {
            if (e < 51032) {
              if (e < 51005) {
                if (e === 51004)
                  return i.CLUSTER_BREAK.LV;
              } else if (51005 <= e && e <= 51031)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 51033) {
              if (e === 51032)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 51060) {
              if (51033 <= e && e <= 51059)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 51060)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 51116) {
            if (e < 51088) {
              if (51061 <= e && e <= 51087)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 51089) {
              if (e === 51088)
                return i.CLUSTER_BREAK.LV;
            } else if (51089 <= e && e <= 51115)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 51117) {
            if (e === 51116)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 51144) {
            if (51117 <= e && e <= 51143)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 51144)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 51228) {
          if (e < 51173) {
            if (e < 51172) {
              if (51145 <= e && e <= 51171)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 51172)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 51200) {
            if (51173 <= e && e <= 51199)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 51201) {
            if (e === 51200)
              return i.CLUSTER_BREAK.LV;
          } else if (51201 <= e && e <= 51227)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 51257) {
          if (e < 51229) {
            if (e === 51228)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 51256) {
            if (51229 <= e && e <= 51255)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 51256)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 51284) {
          if (51257 <= e && e <= 51283)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 51285) {
          if (e === 51284)
            return i.CLUSTER_BREAK.LV;
        } else if (51285 <= e && e <= 51311)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 52516) {
        if (e < 51901) {
          if (e < 51593) {
            if (e < 51452) {
              if (e < 51369) {
                if (e < 51340) {
                  if (e < 51313) {
                    if (e === 51312)
                      return i.CLUSTER_BREAK.LV;
                  } else if (51313 <= e && e <= 51339)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 51341) {
                  if (e === 51340)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 51368) {
                  if (51341 <= e && e <= 51367)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 51368)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 51397) {
                if (e < 51396) {
                  if (51369 <= e && e <= 51395)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 51396)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 51424) {
                if (51397 <= e && e <= 51423)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 51425) {
                if (e === 51424)
                  return i.CLUSTER_BREAK.LV;
              } else if (51425 <= e && e <= 51451)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 51509) {
              if (e < 51480) {
                if (e < 51453) {
                  if (e === 51452)
                    return i.CLUSTER_BREAK.LV;
                } else if (51453 <= e && e <= 51479)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 51481) {
                if (e === 51480)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 51508) {
                if (51481 <= e && e <= 51507)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 51508)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 51564) {
              if (e < 51536) {
                if (51509 <= e && e <= 51535)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 51537) {
                if (e === 51536)
                  return i.CLUSTER_BREAK.LV;
              } else if (51537 <= e && e <= 51563)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 51565) {
              if (e === 51564)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 51592) {
              if (51565 <= e && e <= 51591)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 51592)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 51760) {
            if (e < 51676) {
              if (e < 51621) {
                if (e < 51620) {
                  if (51593 <= e && e <= 51619)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 51620)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 51648) {
                if (51621 <= e && e <= 51647)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 51649) {
                if (e === 51648)
                  return i.CLUSTER_BREAK.LV;
              } else if (51649 <= e && e <= 51675)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 51705) {
              if (e < 51677) {
                if (e === 51676)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 51704) {
                if (51677 <= e && e <= 51703)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 51704)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 51732) {
              if (51705 <= e && e <= 51731)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 51733) {
              if (e === 51732)
                return i.CLUSTER_BREAK.LV;
            } else if (51733 <= e && e <= 51759)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 51817) {
            if (e < 51788) {
              if (e < 51761) {
                if (e === 51760)
                  return i.CLUSTER_BREAK.LV;
              } else if (51761 <= e && e <= 51787)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 51789) {
              if (e === 51788)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 51816) {
              if (51789 <= e && e <= 51815)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 51816)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 51872) {
            if (e < 51844) {
              if (51817 <= e && e <= 51843)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 51845) {
              if (e === 51844)
                return i.CLUSTER_BREAK.LV;
            } else if (51845 <= e && e <= 51871)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 51873) {
            if (e === 51872)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 51900) {
            if (51873 <= e && e <= 51899)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 51900)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 52208) {
          if (e < 52041) {
            if (e < 51984) {
              if (e < 51929) {
                if (e < 51928) {
                  if (51901 <= e && e <= 51927)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 51928)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 51956) {
                if (51929 <= e && e <= 51955)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 51957) {
                if (e === 51956)
                  return i.CLUSTER_BREAK.LV;
              } else if (51957 <= e && e <= 51983)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52012) {
              if (e < 51985) {
                if (e === 51984)
                  return i.CLUSTER_BREAK.LV;
              } else if (51985 <= e && e <= 52011)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52013) {
              if (e === 52012)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52040) {
              if (52013 <= e && e <= 52039)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 52040)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52124) {
            if (e < 52069) {
              if (e < 52068) {
                if (52041 <= e && e <= 52067)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 52068)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52096) {
              if (52069 <= e && e <= 52095)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52097) {
              if (e === 52096)
                return i.CLUSTER_BREAK.LV;
            } else if (52097 <= e && e <= 52123)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52153) {
            if (e < 52125) {
              if (e === 52124)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52152) {
              if (52125 <= e && e <= 52151)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 52152)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52180) {
            if (52153 <= e && e <= 52179)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52181) {
            if (e === 52180)
              return i.CLUSTER_BREAK.LV;
          } else if (52181 <= e && e <= 52207)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 52349) {
          if (e < 52265) {
            if (e < 52236) {
              if (e < 52209) {
                if (e === 52208)
                  return i.CLUSTER_BREAK.LV;
              } else if (52209 <= e && e <= 52235)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52237) {
              if (e === 52236)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52264) {
              if (52237 <= e && e <= 52263)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 52264)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52320) {
            if (e < 52292) {
              if (52265 <= e && e <= 52291)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52293) {
              if (e === 52292)
                return i.CLUSTER_BREAK.LV;
            } else if (52293 <= e && e <= 52319)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52321) {
            if (e === 52320)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52348) {
            if (52321 <= e && e <= 52347)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 52348)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 52432) {
          if (e < 52377) {
            if (e < 52376) {
              if (52349 <= e && e <= 52375)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 52376)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52404) {
            if (52377 <= e && e <= 52403)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52405) {
            if (e === 52404)
              return i.CLUSTER_BREAK.LV;
          } else if (52405 <= e && e <= 52431)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 52461) {
          if (e < 52433) {
            if (e === 52432)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52460) {
            if (52433 <= e && e <= 52459)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 52460)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 52488) {
          if (52461 <= e && e <= 52487)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 52489) {
          if (e === 52488)
            return i.CLUSTER_BREAK.LV;
        } else if (52489 <= e && e <= 52515)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 53105) {
        if (e < 52797) {
          if (e < 52656) {
            if (e < 52573) {
              if (e < 52544) {
                if (e < 52517) {
                  if (e === 52516)
                    return i.CLUSTER_BREAK.LV;
                } else if (52517 <= e && e <= 52543)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 52545) {
                if (e === 52544)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 52572) {
                if (52545 <= e && e <= 52571)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 52572)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52601) {
              if (e < 52600) {
                if (52573 <= e && e <= 52599)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 52600)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52628) {
              if (52601 <= e && e <= 52627)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52629) {
              if (e === 52628)
                return i.CLUSTER_BREAK.LV;
            } else if (52629 <= e && e <= 52655)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52713) {
            if (e < 52684) {
              if (e < 52657) {
                if (e === 52656)
                  return i.CLUSTER_BREAK.LV;
              } else if (52657 <= e && e <= 52683)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52685) {
              if (e === 52684)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52712) {
              if (52685 <= e && e <= 52711)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 52712)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52768) {
            if (e < 52740) {
              if (52713 <= e && e <= 52739)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52741) {
              if (e === 52740)
                return i.CLUSTER_BREAK.LV;
            } else if (52741 <= e && e <= 52767)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52769) {
            if (e === 52768)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52796) {
            if (52769 <= e && e <= 52795)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 52796)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 52964) {
          if (e < 52880) {
            if (e < 52825) {
              if (e < 52824) {
                if (52797 <= e && e <= 52823)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 52824)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52852) {
              if (52825 <= e && e <= 52851)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 52853) {
              if (e === 52852)
                return i.CLUSTER_BREAK.LV;
            } else if (52853 <= e && e <= 52879)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52909) {
            if (e < 52881) {
              if (e === 52880)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 52908) {
              if (52881 <= e && e <= 52907)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 52908)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 52936) {
            if (52909 <= e && e <= 52935)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52937) {
            if (e === 52936)
              return i.CLUSTER_BREAK.LV;
          } else if (52937 <= e && e <= 52963)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 53021) {
          if (e < 52992) {
            if (e < 52965) {
              if (e === 52964)
                return i.CLUSTER_BREAK.LV;
            } else if (52965 <= e && e <= 52991)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 52993) {
            if (e === 52992)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 53020) {
            if (52993 <= e && e <= 53019)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 53020)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 53076) {
          if (e < 53048) {
            if (53021 <= e && e <= 53047)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 53049) {
            if (e === 53048)
              return i.CLUSTER_BREAK.LV;
          } else if (53049 <= e && e <= 53075)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 53077) {
          if (e === 53076)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 53104) {
          if (53077 <= e && e <= 53103)
            return i.CLUSTER_BREAK.LVT;
        } else if (e === 53104)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 53412) {
        if (e < 53245) {
          if (e < 53188) {
            if (e < 53133) {
              if (e < 53132) {
                if (53105 <= e && e <= 53131)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 53132)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 53160) {
              if (53133 <= e && e <= 53159)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 53161) {
              if (e === 53160)
                return i.CLUSTER_BREAK.LV;
            } else if (53161 <= e && e <= 53187)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 53216) {
            if (e < 53189) {
              if (e === 53188)
                return i.CLUSTER_BREAK.LV;
            } else if (53189 <= e && e <= 53215)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 53217) {
            if (e === 53216)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 53244) {
            if (53217 <= e && e <= 53243)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 53244)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 53328) {
          if (e < 53273) {
            if (e < 53272) {
              if (53245 <= e && e <= 53271)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 53272)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 53300) {
            if (53273 <= e && e <= 53299)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 53301) {
            if (e === 53300)
              return i.CLUSTER_BREAK.LV;
          } else if (53301 <= e && e <= 53327)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 53357) {
          if (e < 53329) {
            if (e === 53328)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 53356) {
            if (53329 <= e && e <= 53355)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 53356)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 53384) {
          if (53357 <= e && e <= 53383)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 53385) {
          if (e === 53384)
            return i.CLUSTER_BREAK.LV;
        } else if (53385 <= e && e <= 53411)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 53553) {
        if (e < 53469) {
          if (e < 53440) {
            if (e < 53413) {
              if (e === 53412)
                return i.CLUSTER_BREAK.LV;
            } else if (53413 <= e && e <= 53439)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 53441) {
            if (e === 53440)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 53468) {
            if (53441 <= e && e <= 53467)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 53468)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 53524) {
          if (e < 53496) {
            if (53469 <= e && e <= 53495)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 53497) {
            if (e === 53496)
              return i.CLUSTER_BREAK.LV;
          } else if (53497 <= e && e <= 53523)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 53525) {
          if (e === 53524)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 53552) {
          if (53525 <= e && e <= 53551)
            return i.CLUSTER_BREAK.LVT;
        } else if (e === 53552)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 53636) {
        if (e < 53581) {
          if (e < 53580) {
            if (53553 <= e && e <= 53579)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 53580)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 53608) {
          if (53581 <= e && e <= 53607)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 53609) {
          if (e === 53608)
            return i.CLUSTER_BREAK.LV;
        } else if (53609 <= e && e <= 53635)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 53665) {
        if (e < 53637) {
          if (e === 53636)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 53664) {
          if (53637 <= e && e <= 53663)
            return i.CLUSTER_BREAK.LVT;
        } else if (e === 53664)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 53692) {
        if (53665 <= e && e <= 53691)
          return i.CLUSTER_BREAK.LVT;
      } else if (e < 53693) {
        if (e === 53692)
          return i.CLUSTER_BREAK.LV;
      } else if (53693 <= e && e <= 53719)
        return i.CLUSTER_BREAK.LVT;
    } else if (e < 70459) {
      if (e < 54897) {
        if (e < 54308) {
          if (e < 54001) {
            if (e < 53860) {
              if (e < 53777) {
                if (e < 53748) {
                  if (e < 53721) {
                    if (e === 53720)
                      return i.CLUSTER_BREAK.LV;
                  } else if (53721 <= e && e <= 53747)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e < 53749) {
                  if (e === 53748)
                    return i.CLUSTER_BREAK.LV;
                } else if (e < 53776) {
                  if (53749 <= e && e <= 53775)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 53776)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 53805) {
                if (e < 53804) {
                  if (53777 <= e && e <= 53803)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 53804)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 53832) {
                if (53805 <= e && e <= 53831)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 53833) {
                if (e === 53832)
                  return i.CLUSTER_BREAK.LV;
              } else if (53833 <= e && e <= 53859)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 53917) {
              if (e < 53888) {
                if (e < 53861) {
                  if (e === 53860)
                    return i.CLUSTER_BREAK.LV;
                } else if (53861 <= e && e <= 53887)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 53889) {
                if (e === 53888)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 53916) {
                if (53889 <= e && e <= 53915)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 53916)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 53972) {
              if (e < 53944) {
                if (53917 <= e && e <= 53943)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 53945) {
                if (e === 53944)
                  return i.CLUSTER_BREAK.LV;
              } else if (53945 <= e && e <= 53971)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 53973) {
              if (e === 53972)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54e3) {
              if (53973 <= e && e <= 53999)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 54e3)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 54141) {
            if (e < 54084) {
              if (e < 54029) {
                if (e < 54028) {
                  if (54001 <= e && e <= 54027)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 54028)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 54056) {
                if (54029 <= e && e <= 54055)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 54057) {
                if (e === 54056)
                  return i.CLUSTER_BREAK.LV;
              } else if (54057 <= e && e <= 54083)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 54112) {
              if (e < 54085) {
                if (e === 54084)
                  return i.CLUSTER_BREAK.LV;
              } else if (54085 <= e && e <= 54111)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 54113) {
              if (e === 54112)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54140) {
              if (54113 <= e && e <= 54139)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 54140)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 54224) {
            if (e < 54169) {
              if (e < 54168) {
                if (54141 <= e && e <= 54167)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 54168)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54196) {
              if (54169 <= e && e <= 54195)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 54197) {
              if (e === 54196)
                return i.CLUSTER_BREAK.LV;
            } else if (54197 <= e && e <= 54223)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 54253) {
            if (e < 54225) {
              if (e === 54224)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54252) {
              if (54225 <= e && e <= 54251)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 54252)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 54280) {
            if (54253 <= e && e <= 54279)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 54281) {
            if (e === 54280)
              return i.CLUSTER_BREAK.LV;
          } else if (54281 <= e && e <= 54307)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 54589) {
          if (e < 54448) {
            if (e < 54365) {
              if (e < 54336) {
                if (e < 54309) {
                  if (e === 54308)
                    return i.CLUSTER_BREAK.LV;
                } else if (54309 <= e && e <= 54335)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 54337) {
                if (e === 54336)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 54364) {
                if (54337 <= e && e <= 54363)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 54364)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54393) {
              if (e < 54392) {
                if (54365 <= e && e <= 54391)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 54392)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54420) {
              if (54393 <= e && e <= 54419)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 54421) {
              if (e === 54420)
                return i.CLUSTER_BREAK.LV;
            } else if (54421 <= e && e <= 54447)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 54505) {
            if (e < 54476) {
              if (e < 54449) {
                if (e === 54448)
                  return i.CLUSTER_BREAK.LV;
              } else if (54449 <= e && e <= 54475)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 54477) {
              if (e === 54476)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54504) {
              if (54477 <= e && e <= 54503)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 54504)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 54560) {
            if (e < 54532) {
              if (54505 <= e && e <= 54531)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 54533) {
              if (e === 54532)
                return i.CLUSTER_BREAK.LV;
            } else if (54533 <= e && e <= 54559)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 54561) {
            if (e === 54560)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 54588) {
            if (54561 <= e && e <= 54587)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 54588)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 54756) {
          if (e < 54672) {
            if (e < 54617) {
              if (e < 54616) {
                if (54589 <= e && e <= 54615)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 54616)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54644) {
              if (54617 <= e && e <= 54643)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 54645) {
              if (e === 54644)
                return i.CLUSTER_BREAK.LV;
            } else if (54645 <= e && e <= 54671)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 54701) {
            if (e < 54673) {
              if (e === 54672)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 54700) {
              if (54673 <= e && e <= 54699)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 54700)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 54728) {
            if (54701 <= e && e <= 54727)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 54729) {
            if (e === 54728)
              return i.CLUSTER_BREAK.LV;
          } else if (54729 <= e && e <= 54755)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 54813) {
          if (e < 54784) {
            if (e < 54757) {
              if (e === 54756)
                return i.CLUSTER_BREAK.LV;
            } else if (54757 <= e && e <= 54783)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 54785) {
            if (e === 54784)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 54812) {
            if (54785 <= e && e <= 54811)
              return i.CLUSTER_BREAK.LVT;
          } else if (e === 54812)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 54868) {
          if (e < 54840) {
            if (54813 <= e && e <= 54839)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 54841) {
            if (e === 54840)
              return i.CLUSTER_BREAK.LV;
          } else if (54841 <= e && e <= 54867)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 54869) {
          if (e === 54868)
            return i.CLUSTER_BREAK.LV;
        } else if (e < 54896) {
          if (54869 <= e && e <= 54895)
            return i.CLUSTER_BREAK.LVT;
        } else if (e === 54896)
          return i.CLUSTER_BREAK.LV;
      } else if (e < 69632) {
        if (e < 55216) {
          if (e < 55037) {
            if (e < 54980) {
              if (e < 54925) {
                if (e < 54924) {
                  if (54897 <= e && e <= 54923)
                    return i.CLUSTER_BREAK.LVT;
                } else if (e === 54924)
                  return i.CLUSTER_BREAK.LV;
              } else if (e < 54952) {
                if (54925 <= e && e <= 54951)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e < 54953) {
                if (e === 54952)
                  return i.CLUSTER_BREAK.LV;
              } else if (54953 <= e && e <= 54979)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 55008) {
              if (e < 54981) {
                if (e === 54980)
                  return i.CLUSTER_BREAK.LV;
              } else if (54981 <= e && e <= 55007)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 55009) {
              if (e === 55008)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 55036) {
              if (55009 <= e && e <= 55035)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 55036)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 55120) {
            if (e < 55065) {
              if (e < 55064) {
                if (55037 <= e && e <= 55063)
                  return i.CLUSTER_BREAK.LVT;
              } else if (e === 55064)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 55092) {
              if (55065 <= e && e <= 55091)
                return i.CLUSTER_BREAK.LVT;
            } else if (e < 55093) {
              if (e === 55092)
                return i.CLUSTER_BREAK.LV;
            } else if (55093 <= e && e <= 55119)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 55149) {
            if (e < 55121) {
              if (e === 55120)
                return i.CLUSTER_BREAK.LV;
            } else if (e < 55148) {
              if (55121 <= e && e <= 55147)
                return i.CLUSTER_BREAK.LVT;
            } else if (e === 55148)
              return i.CLUSTER_BREAK.LV;
          } else if (e < 55176) {
            if (55149 <= e && e <= 55175)
              return i.CLUSTER_BREAK.LVT;
          } else if (e < 55177) {
            if (e === 55176)
              return i.CLUSTER_BREAK.LV;
          } else if (55177 <= e && e <= 55203)
            return i.CLUSTER_BREAK.LVT;
        } else if (e < 68097) {
          if (e < 65279) {
            if (e < 64286) {
              if (e < 55243) {
                if (55216 <= e && e <= 55238)
                  return i.CLUSTER_BREAK.V;
              } else if (55243 <= e && e <= 55291)
                return i.CLUSTER_BREAK.T;
            } else if (e < 65024) {
              if (e === 64286)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 65056) {
              if (65024 <= e && e <= 65039)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (65056 <= e && e <= 65071)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 66045) {
            if (e < 65438) {
              if (e === 65279)
                return i.CLUSTER_BREAK.CONTROL;
            } else if (e < 65520) {
              if (65438 <= e && e <= 65439)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (65520 <= e && e <= 65531)
              return i.CLUSTER_BREAK.CONTROL;
          } else if (e < 66272) {
            if (e === 66045)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 66422) {
            if (e === 66272)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (66422 <= e && e <= 66426)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 68325) {
          if (e < 68108) {
            if (e < 68101) {
              if (68097 <= e && e <= 68099)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (68101 <= e && e <= 68102)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 68152) {
            if (68108 <= e && e <= 68111)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 68159) {
            if (68152 <= e && e <= 68154)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e === 68159)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 69373) {
          if (e < 68900) {
            if (68325 <= e && e <= 68326)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 69291) {
            if (68900 <= e && e <= 68903)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (69291 <= e && e <= 69292)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 69446) {
          if (69373 <= e && e <= 69375)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 69506) {
          if (69446 <= e && e <= 69456)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (69506 <= e && e <= 69509)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 70016) {
        if (e < 69815) {
          if (e < 69747) {
            if (e < 69634) {
              if (e === 69632)
                return i.CLUSTER_BREAK.SPACINGMARK;
              if (e === 69633)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 69688) {
              if (e === 69634)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 69744) {
              if (69688 <= e && e <= 69702)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e === 69744)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 69762) {
            if (e < 69759) {
              if (69747 <= e && e <= 69748)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (69759 <= e && e <= 69761)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 69808) {
            if (e === 69762)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 69811) {
            if (69808 <= e && e <= 69810)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (69811 <= e && e <= 69814)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 69888)
          if (e < 69821) {
            if (e < 69817) {
              if (69815 <= e && e <= 69816)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (69817 <= e && e <= 69818)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 69826) {
            if (e === 69821)
              return i.CLUSTER_BREAK.PREPEND;
          } else {
            if (e === 69826)
              return i.CLUSTER_BREAK.EXTEND;
            if (e === 69837)
              return i.CLUSTER_BREAK.PREPEND;
          }
        else if (e < 69933) {
          if (e < 69927) {
            if (69888 <= e && e <= 69890)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 69932) {
            if (69927 <= e && e <= 69931)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e === 69932)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 69957) {
          if (69933 <= e && e <= 69940)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 70003) {
          if (69957 <= e && e <= 69958)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e === 70003)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 70194) {
        if (e < 70082) {
          if (e < 70067) {
            if (e < 70018) {
              if (70016 <= e && e <= 70017)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e === 70018)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 70070) {
            if (70067 <= e && e <= 70069)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 70079) {
            if (70070 <= e && e <= 70078)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (70079 <= e && e <= 70080)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 70095) {
          if (e < 70089) {
            if (70082 <= e && e <= 70083)
              return i.CLUSTER_BREAK.PREPEND;
          } else if (e < 70094) {
            if (70089 <= e && e <= 70092)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e === 70094)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 70188) {
          if (e === 70095)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 70191) {
          if (70188 <= e && e <= 70190)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (70191 <= e && e <= 70193)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 70209) {
        if (e < 70197) {
          if (e < 70196) {
            if (70194 <= e && e <= 70195)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e === 70196)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 70198) {
          if (e === 70197)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 70206) {
          if (70198 <= e && e <= 70199)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e === 70206)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 70371) {
        if (e < 70367) {
          if (e === 70209)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 70368) {
          if (e === 70367)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (70368 <= e && e <= 70370)
          return i.CLUSTER_BREAK.SPACINGMARK;
      } else if (e < 70400) {
        if (70371 <= e && e <= 70378)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 70402) {
        if (70400 <= e && e <= 70401)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (70402 <= e && e <= 70403)
        return i.CLUSTER_BREAK.SPACINGMARK;
    } else if (e < 72343) {
      if (e < 71339) {
        if (e < 70841) {
          if (e < 70512) {
            if (e < 70471) {
              if (e < 70463) {
                if (e < 70462) {
                  if (70459 <= e && e <= 70460)
                    return i.CLUSTER_BREAK.EXTEND;
                } else if (e === 70462)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (e < 70464) {
                if (e === 70463)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 70465) {
                if (e === 70464)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (70465 <= e && e <= 70468)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 70487) {
              if (e < 70475) {
                if (70471 <= e && e <= 70472)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (70475 <= e && e <= 70477)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 70498) {
              if (e === 70487)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 70502) {
              if (70498 <= e && e <= 70499)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (70502 <= e && e <= 70508)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 70725) {
            if (e < 70712) {
              if (e < 70709) {
                if (70512 <= e && e <= 70516)
                  return i.CLUSTER_BREAK.EXTEND;
              } else if (70709 <= e && e <= 70711)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 70720) {
              if (70712 <= e && e <= 70719)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 70722) {
              if (70720 <= e && e <= 70721)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (70722 <= e && e <= 70724)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 70832) {
            if (e < 70726) {
              if (e === 70725)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e === 70726 || e === 70750)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 70833) {
            if (e === 70832)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 70835) {
            if (70833 <= e && e <= 70834)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (70835 <= e && e <= 70840)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 71096) {
          if (e < 70847)
            if (e < 70843) {
              if (e === 70841)
                return i.CLUSTER_BREAK.SPACINGMARK;
              if (e === 70842)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 70845) {
              if (70843 <= e && e <= 70844)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else {
              if (e === 70845)
                return i.CLUSTER_BREAK.EXTEND;
              if (e === 70846)
                return i.CLUSTER_BREAK.SPACINGMARK;
            }
          else if (e < 71087) {
            if (e < 70849) {
              if (70847 <= e && e <= 70848)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 70850) {
              if (e === 70849)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (70850 <= e && e <= 70851)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 71088) {
            if (e === 71087)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 71090) {
            if (71088 <= e && e <= 71089)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (71090 <= e && e <= 71093)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 71216) {
          if (e < 71102) {
            if (e < 71100) {
              if (71096 <= e && e <= 71099)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (71100 <= e && e <= 71101)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 71103) {
            if (e === 71102)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 71132) {
            if (71103 <= e && e <= 71104)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (71132 <= e && e <= 71133)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 71229) {
          if (e < 71219) {
            if (71216 <= e && e <= 71218)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 71227) {
            if (71219 <= e && e <= 71226)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (71227 <= e && e <= 71228)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 71230) {
          if (e === 71229)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 71231) {
          if (e === 71230)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (71231 <= e && e <= 71232)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 71999)
        if (e < 71463) {
          if (e < 71350) {
            if (e < 71341) {
              if (e === 71339)
                return i.CLUSTER_BREAK.EXTEND;
              if (e === 71340)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 71342) {
              if (e === 71341)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 71344) {
              if (71342 <= e && e <= 71343)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (71344 <= e && e <= 71349)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 71453) {
            if (e === 71350)
              return i.CLUSTER_BREAK.SPACINGMARK;
            if (e === 71351)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 71458) {
            if (71453 <= e && e <= 71455)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 71462) {
            if (71458 <= e && e <= 71461)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e === 71462)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 71984) {
          if (e < 71727) {
            if (e < 71724) {
              if (71463 <= e && e <= 71467)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (71724 <= e && e <= 71726)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 71736) {
            if (71727 <= e && e <= 71735)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 71737) {
            if (e === 71736)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (71737 <= e && e <= 71738)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 71995) {
          if (e < 71985) {
            if (e === 71984)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 71991) {
            if (71985 <= e && e <= 71989)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (71991 <= e && e <= 71992)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 71997) {
          if (71995 <= e && e <= 71996)
            return i.CLUSTER_BREAK.EXTEND;
        } else {
          if (e === 71997)
            return i.CLUSTER_BREAK.SPACINGMARK;
          if (e === 71998)
            return i.CLUSTER_BREAK.EXTEND;
        }
      else if (e < 72193)
        if (e < 72145)
          if (e < 72001) {
            if (e === 71999)
              return i.CLUSTER_BREAK.PREPEND;
            if (e === 72e3)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 72002) {
            if (e === 72001)
              return i.CLUSTER_BREAK.PREPEND;
          } else {
            if (e === 72002)
              return i.CLUSTER_BREAK.SPACINGMARK;
            if (e === 72003)
              return i.CLUSTER_BREAK.EXTEND;
          }
        else if (e < 72156) {
          if (e < 72148) {
            if (72145 <= e && e <= 72147)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 72154) {
            if (72148 <= e && e <= 72151)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (72154 <= e && e <= 72155)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 72160) {
          if (72156 <= e && e <= 72159)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else {
          if (e === 72160)
            return i.CLUSTER_BREAK.EXTEND;
          if (e === 72164)
            return i.CLUSTER_BREAK.SPACINGMARK;
        }
      else if (e < 72263) {
        if (e < 72249) {
          if (e < 72243) {
            if (72193 <= e && e <= 72202)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (72243 <= e && e <= 72248)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 72250) {
          if (e === 72249)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 72251) {
          if (e === 72250)
            return i.CLUSTER_BREAK.PREPEND;
        } else if (72251 <= e && e <= 72254)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 72281) {
        if (e < 72273) {
          if (e === 72263)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 72279) {
          if (72273 <= e && e <= 72278)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (72279 <= e && e <= 72280)
          return i.CLUSTER_BREAK.SPACINGMARK;
      } else if (e < 72324) {
        if (72281 <= e && e <= 72283)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 72330) {
        if (72324 <= e && e <= 72329)
          return i.CLUSTER_BREAK.PREPEND;
      } else if (72330 <= e && e <= 72342)
        return i.CLUSTER_BREAK.EXTEND;
    } else if (e < 94033) {
      if (e < 73104) {
        if (e < 72881) {
          if (e < 72766) {
            if (e < 72751) {
              if (e < 72344) {
                if (e === 72343)
                  return i.CLUSTER_BREAK.SPACINGMARK;
              } else if (72344 <= e && e <= 72345)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (e < 72752) {
              if (e === 72751)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 72760) {
              if (72752 <= e && e <= 72758)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (72760 <= e && e <= 72765)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 72850) {
            if (e === 72766)
              return i.CLUSTER_BREAK.SPACINGMARK;
            if (e === 72767)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 72873) {
            if (72850 <= e && e <= 72871)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 72874) {
            if (e === 72873)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (72874 <= e && e <= 72880)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 73018) {
          if (e < 72884) {
            if (e < 72882) {
              if (e === 72881)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (72882 <= e && e <= 72883)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 72885) {
            if (e === 72884)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 73009) {
            if (72885 <= e && e <= 72886)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (73009 <= e && e <= 73014)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 73030) {
          if (e < 73020) {
            if (e === 73018)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 73023) {
            if (73020 <= e && e <= 73021)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (73023 <= e && e <= 73029)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 73031) {
          if (e === 73030)
            return i.CLUSTER_BREAK.PREPEND;
        } else if (e < 73098) {
          if (e === 73031)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (73098 <= e && e <= 73102)
          return i.CLUSTER_BREAK.SPACINGMARK;
      } else if (e < 73526) {
        if (e < 73459)
          if (e < 73109) {
            if (e < 73107) {
              if (73104 <= e && e <= 73105)
                return i.CLUSTER_BREAK.EXTEND;
            } else if (73107 <= e && e <= 73108)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 73110) {
            if (e === 73109)
              return i.CLUSTER_BREAK.EXTEND;
          } else {
            if (e === 73110)
              return i.CLUSTER_BREAK.SPACINGMARK;
            if (e === 73111)
              return i.CLUSTER_BREAK.EXTEND;
          }
        else if (e < 73474) {
          if (e < 73461) {
            if (73459 <= e && e <= 73460)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 73472) {
            if (73461 <= e && e <= 73462)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (73472 <= e && e <= 73473)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 73475) {
          if (e === 73474)
            return i.CLUSTER_BREAK.PREPEND;
        } else if (e < 73524) {
          if (e === 73475)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (73524 <= e && e <= 73525)
          return i.CLUSTER_BREAK.SPACINGMARK;
      } else if (e < 78896)
        if (e < 73536) {
          if (e < 73534) {
            if (73526 <= e && e <= 73530)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (73534 <= e && e <= 73535)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 73537) {
          if (e === 73536)
            return i.CLUSTER_BREAK.EXTEND;
        } else {
          if (e === 73537)
            return i.CLUSTER_BREAK.SPACINGMARK;
          if (e === 73538)
            return i.CLUSTER_BREAK.EXTEND;
        }
      else if (e < 92912) {
        if (e < 78912) {
          if (78896 <= e && e <= 78911)
            return i.CLUSTER_BREAK.CONTROL;
        } else if (e < 78919) {
          if (e === 78912)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (78919 <= e && e <= 78933)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 92976) {
        if (92912 <= e && e <= 92916)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 94031) {
        if (92976 <= e && e <= 92982)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e === 94031)
        return i.CLUSTER_BREAK.EXTEND;
    } else if (e < 121476) {
      if (e < 119143)
        if (e < 113824) {
          if (e < 94180) {
            if (e < 94095) {
              if (94033 <= e && e <= 94087)
                return i.CLUSTER_BREAK.SPACINGMARK;
            } else if (94095 <= e && e <= 94098)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 94192) {
            if (e === 94180)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e < 113821) {
            if (94192 <= e && e <= 94193)
              return i.CLUSTER_BREAK.SPACINGMARK;
          } else if (113821 <= e && e <= 113822)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 118576) {
          if (e < 118528) {
            if (113824 <= e && e <= 113827)
              return i.CLUSTER_BREAK.CONTROL;
          } else if (118528 <= e && e <= 118573)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 119141) {
          if (118576 <= e && e <= 118598)
            return i.CLUSTER_BREAK.EXTEND;
        } else {
          if (e === 119141)
            return i.CLUSTER_BREAK.EXTEND;
          if (e === 119142)
            return i.CLUSTER_BREAK.SPACINGMARK;
        }
      else if (e < 119173) {
        if (e < 119150) {
          if (e < 119149) {
            if (119143 <= e && e <= 119145)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (e === 119149)
            return i.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 119155) {
          if (119150 <= e && e <= 119154)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 119163) {
          if (119155 <= e && e <= 119162)
            return i.CLUSTER_BREAK.CONTROL;
        } else if (119163 <= e && e <= 119170)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 121344) {
        if (e < 119210) {
          if (119173 <= e && e <= 119179)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 119362) {
          if (119210 <= e && e <= 119213)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (119362 <= e && e <= 119364)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 121403) {
        if (121344 <= e && e <= 121398)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 121461) {
        if (121403 <= e && e <= 121452)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e === 121461)
        return i.CLUSTER_BREAK.EXTEND;
    } else if (e < 123628) {
      if (e < 122907) {
        if (e < 121505) {
          if (e < 121499) {
            if (e === 121476)
              return i.CLUSTER_BREAK.EXTEND;
          } else if (121499 <= e && e <= 121503)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 122880) {
          if (121505 <= e && e <= 121519)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 122888) {
          if (122880 <= e && e <= 122886)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (122888 <= e && e <= 122904)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 123023) {
        if (e < 122915) {
          if (122907 <= e && e <= 122913)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (e < 122918) {
          if (122915 <= e && e <= 122916)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (122918 <= e && e <= 122922)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 123184) {
        if (e === 123023)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 123566) {
        if (123184 <= e && e <= 123190)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e === 123566)
        return i.CLUSTER_BREAK.EXTEND;
    } else if (e < 127995) {
      if (e < 125136) {
        if (e < 124140) {
          if (123628 <= e && e <= 123631)
            return i.CLUSTER_BREAK.EXTEND;
        } else if (124140 <= e && e <= 124143)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 125252) {
        if (125136 <= e && e <= 125142)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 127462) {
        if (125252 <= e && e <= 125258)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (127462 <= e && e <= 127487)
        return i.CLUSTER_BREAK.REGIONAL_INDICATOR;
    } else if (e < 917632) {
      if (e < 917504) {
        if (127995 <= e && e <= 127999)
          return i.CLUSTER_BREAK.EXTEND;
      } else if (e < 917536) {
        if (917504 <= e && e <= 917535)
          return i.CLUSTER_BREAK.CONTROL;
      } else if (917536 <= e && e <= 917631)
        return i.CLUSTER_BREAK.EXTEND;
    } else if (e < 917760) {
      if (917632 <= e && e <= 917759)
        return i.CLUSTER_BREAK.CONTROL;
    } else if (e < 918e3) {
      if (917760 <= e && e <= 917999)
        return i.CLUSTER_BREAK.EXTEND;
    } else if (918e3 <= e && e <= 921599)
      return i.CLUSTER_BREAK.CONTROL;
    return i.CLUSTER_BREAK.OTHER;
  }
  /**
   * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
   * @param code {number} Unicode code point
   * @returns {number}
   */
  static getEmojiProperty(e) {
    if (e < 10160) {
      if (e < 9728) {
        if (e < 9e3) {
          if (e < 8482) {
            if (e < 8252) {
              if (e === 169 || e === 174)
                return i.EXTENDED_PICTOGRAPHIC;
            } else if (e === 8252 || e === 8265)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e < 8596) {
            if (e === 8482 || e === 8505)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e < 8617) {
            if (8596 <= e && e <= 8601)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e < 8986) {
            if (8617 <= e && e <= 8618)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (8986 <= e && e <= 8987)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 9410) {
          if (e < 9167) {
            if (e === 9e3 || e === 9096)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e < 9193) {
            if (e === 9167)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e < 9208) {
            if (9193 <= e && e <= 9203)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (9208 <= e && e <= 9210)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 9654) {
          if (e < 9642) {
            if (e === 9410)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (9642 <= e && e <= 9643)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 9664) {
          if (e === 9654)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 9723) {
          if (e === 9664)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (9723 <= e && e <= 9726)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 10035) {
        if (e < 10004) {
          if (e < 9748) {
            if (e < 9735) {
              if (9728 <= e && e <= 9733)
                return i.EXTENDED_PICTOGRAPHIC;
            } else if (9735 <= e && e <= 9746)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e < 9872) {
            if (9748 <= e && e <= 9861)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e < 9992) {
            if (9872 <= e && e <= 9989)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (9992 <= e && e <= 10002)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 10013) {
          if (e === 10004 || e === 10006)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 10017) {
          if (e === 10013)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e === 10017 || e === 10024)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 10067) {
        if (e < 10055) {
          if (e < 10052) {
            if (10035 <= e && e <= 10036)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e === 10052)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 10060) {
          if (e === 10055)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e === 10060 || e === 10062)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 10083) {
        if (e < 10071) {
          if (10067 <= e && e <= 10069)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e === 10071)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 10133) {
        if (10083 <= e && e <= 10087)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 10145) {
        if (10133 <= e && e <= 10135)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e === 10145)
        return i.EXTENDED_PICTOGRAPHIC;
    } else if (e < 127489) {
      if (e < 12951) {
        if (e < 11035) {
          if (e < 10548) {
            if (e === 10160 || e === 10175)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e < 11013) {
            if (10548 <= e && e <= 10549)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (11013 <= e && e <= 11015)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 11093) {
          if (e < 11088) {
            if (11035 <= e && e <= 11036)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e === 11088)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 12336) {
          if (e === 11093)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e === 12336 || e === 12349)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 127340) {
        if (e < 126976) {
          if (e === 12951 || e === 12953)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 127245) {
          if (126976 <= e && e <= 127231)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 127279) {
          if (127245 <= e && e <= 127247)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e === 127279)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 127374) {
        if (e < 127358) {
          if (127340 <= e && e <= 127345)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (127358 <= e && e <= 127359)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 127377) {
        if (e === 127374)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 127405) {
        if (127377 <= e && e <= 127386)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (127405 <= e && e <= 127461)
        return i.EXTENDED_PICTOGRAPHIC;
    } else if (e < 128981) {
      if (e < 127561) {
        if (e < 127535) {
          if (e < 127514) {
            if (127489 <= e && e <= 127503)
              return i.EXTENDED_PICTOGRAPHIC;
          } else if (e === 127514)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 127538) {
          if (e === 127535)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (e < 127548) {
          if (127538 <= e && e <= 127546)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (127548 <= e && e <= 127551)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 128326) {
        if (e < 128e3) {
          if (127561 <= e && e <= 127994)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (128e3 <= e && e <= 128317)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 128640) {
        if (128326 <= e && e <= 128591)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 128884) {
        if (128640 <= e && e <= 128767)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (128884 <= e && e <= 128895)
        return i.EXTENDED_PICTOGRAPHIC;
    } else if (e < 129198) {
      if (e < 129096) {
        if (e < 129036) {
          if (128981 <= e && e <= 129023)
            return i.EXTENDED_PICTOGRAPHIC;
        } else if (129036 <= e && e <= 129039)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 129114) {
        if (129096 <= e && e <= 129103)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (e < 129160) {
        if (129114 <= e && e <= 129119)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (129160 <= e && e <= 129167)
        return i.EXTENDED_PICTOGRAPHIC;
    } else if (e < 129340) {
      if (e < 129292) {
        if (129198 <= e && e <= 129279)
          return i.EXTENDED_PICTOGRAPHIC;
      } else if (129292 <= e && e <= 129338)
        return i.EXTENDED_PICTOGRAPHIC;
    } else if (e < 129351) {
      if (129340 <= e && e <= 129349)
        return i.EXTENDED_PICTOGRAPHIC;
    } else if (e < 130048) {
      if (129351 <= e && e <= 129791)
        return i.EXTENDED_PICTOGRAPHIC;
    } else if (130048 <= e && e <= 131069)
      return i.EXTENDED_PICTOGRAPHIC;
    return i.CLUSTER_BREAK.OTHER;
  }
}
Wa.default = Xt;
var Rh = L && L.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(Ha, "__esModule", { value: !0 });
const Ah = Rh(Wa);
Ha.default = Ah.default;
var vh = L && L.__createBinding || (Object.create ? function(t, e, r, n) {
  n === void 0 && (n = r);
  var s = Object.getOwnPropertyDescriptor(e, r);
  (!s || ("get" in s ? !e.__esModule : s.writable || s.configurable)) && (s = { enumerable: !0, get: function() {
    return e[r];
  } }), Object.defineProperty(t, n, s);
} : function(t, e, r, n) {
  n === void 0 && (n = r), t[n] = e[r];
}), Th = L && L.__setModuleDefault || (Object.create ? function(t, e) {
  Object.defineProperty(t, "default", { enumerable: !0, value: e });
} : function(t, e) {
  t.default = e;
}), _h = L && L.__importStar || function(t) {
  if (t && t.__esModule) return t;
  var e = {};
  if (t != null) for (var r in t) r !== "default" && Object.prototype.hasOwnProperty.call(t, r) && vh(e, t, r);
  return Th(e, t), e;
}, Ch = L && L.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(Ie, "__esModule", { value: !0 });
Ie.validateLanguage = Ie.parseLanguage = Ie.b64UrlToUtf8 = Ie.utf8ToB64Url = Ie.graphemeLen = Ie.utf8Len = void 0;
const wh = Ch(Ha), gs = _h(xp), Sh = (t) => new TextEncoder().encode(t).byteLength;
Ie.utf8Len = Sh;
const Lh = (t) => new wh.default().countGraphemes(t);
Ie.graphemeLen = Lh;
const kh = (t) => gs.toString(gs.fromString(t, "utf8"), "base64url");
Ie.utf8ToB64Url = kh;
const Bh = (t) => gs.toString(gs.fromString(t, "base64url"), "utf8");
Ie.b64UrlToUtf8 = Bh;
const Dh = (t) => {
  const e = t.match(_p);
  if (!(e != null && e.groups))
    return null;
  const r = e.groups;
  return {
    grandfathered: r.grandfathered,
    language: r.language,
    extlang: r.extlang,
    script: r.script,
    region: r.region,
    variant: r.variant,
    extension: r.extension,
    privateUse: r.privateUseA || r.privateUseB
  };
};
Ie.parseLanguage = Dh;
const Ph = (t) => _p.test(t);
Ie.validateLanguage = Ph;
const _p = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;
var Cp = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.didDocument = t.getServiceEndpoint = t.getNotifEndpoint = t.getFeedGenEndpoint = t.getPdsEndpoint = t.getSigningDidKey = t.getVerificationMaterial = t.getSigningKey = t.getHandle = t.getDid = t.isValidDidDoc = void 0;
  const e = wr, r = (C) => t.didDocument.safeParse(C).success;
  t.isValidDidDoc = r;
  const n = (C) => {
    const T = C.id;
    if (typeof T != "string")
      throw new Error("No `id` on document");
    return T;
  };
  t.getDid = n;
  const s = (C) => {
    const T = C.alsoKnownAs;
    if (T)
      for (let w = 0; w < T.length; w++) {
        const K = T[w];
        if (K.startsWith("at://"))
          return K.slice(5);
      }
  };
  t.getHandle = s;
  const u = (C) => (0, t.getVerificationMaterial)(C, "atproto");
  t.getSigningKey = u;
  const c = (C, T) => {
    const w = E(C, "verificationMethod", `#${T}`);
    if (w && w.publicKeyMultibase)
      return {
        type: w.type,
        publicKeyMultibase: w.publicKeyMultibase
      };
  };
  t.getVerificationMaterial = c;
  const l = (C) => {
    const T = (0, t.getSigningKey)(C);
    if (T)
      return `did:key:${T.publicKeyMultibase}`;
  };
  t.getSigningDidKey = l;
  const f = (C) => (0, t.getServiceEndpoint)(C, {
    id: "#atproto_pds",
    type: "AtprotoPersonalDataServer"
  });
  t.getPdsEndpoint = f;
  const p = (C) => (0, t.getServiceEndpoint)(C, {
    id: "#bsky_fg",
    type: "BskyFeedGenerator"
  });
  t.getFeedGenEndpoint = p;
  const m = (C) => (0, t.getServiceEndpoint)(C, {
    id: "#bsky_notif",
    type: "BskyNotificationService"
  });
  t.getNotifEndpoint = m;
  const A = (C, T) => {
    const w = E(C, "service", T.id);
    if (w && !(T.type && w.type !== T.type) && typeof w.serviceEndpoint == "string")
      return v(w.serviceEndpoint);
  };
  t.getServiceEndpoint = A;
  function E(C, T, w) {
    const K = C[T];
    if (K)
      for (let re = 0; re < K.length; re++) {
        const ie = K[re], oe = ie.id;
        if (oe[0] === "#" ? oe === w : (
          // Optimized version of: itemId === `${doc.id}${id}`
          oe.length === C.id.length + w.length && oe[C.id.length] === "#" && oe.endsWith(w) && oe.startsWith(C.id)
        ))
          return ie;
      }
  }
  const v = (C) => {
    if (!(!C.startsWith("http://") && !C.startsWith("https://")) && k(C))
      return C;
  }, k = URL.canParse ?? // URL.canParse is not available in Node.js < 18.17.0
  ((C) => {
    try {
      return new URL(C), !0;
    } catch {
      return !1;
    }
  }), P = e.z.object({
    id: e.z.string(),
    type: e.z.string(),
    controller: e.z.string(),
    publicKeyMultibase: e.z.string().optional()
  }), $ = e.z.object({
    id: e.z.string(),
    type: e.z.string(),
    serviceEndpoint: e.z.union([e.z.string(), e.z.record(e.z.unknown())])
  });
  t.didDocument = e.z.object({
    id: e.z.string(),
    alsoKnownAs: e.z.array(e.z.string()).optional(),
    verificationMethod: e.z.array(P).optional(),
    service: e.z.array($).optional()
  });
})(Cp);
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(u, c, l, f) {
    f === void 0 && (f = l);
    var p = Object.getOwnPropertyDescriptor(c, l);
    (!p || ("get" in p ? !c.__esModule : p.writable || p.configurable)) && (p = { enumerable: !0, get: function() {
      return c[l];
    } }), Object.defineProperty(u, f, p);
  } : function(u, c, l, f) {
    f === void 0 && (f = l), u[f] = c[l];
  }), r = L && L.__setModuleDefault || (Object.create ? function(u, c) {
    Object.defineProperty(u, "default", { enumerable: !0, value: c });
  } : function(u, c) {
    u.default = c;
  }), n = L && L.__importStar || function(u) {
    if (u && u.__esModule) return u;
    var c = {};
    if (u != null) for (var l in u) l !== "default" && Object.prototype.hasOwnProperty.call(u, l) && e(c, u, l);
    return r(c, u), c;
  }, s = L && L.__exportStar || function(u, c) {
    for (var l in u) l !== "default" && !Object.prototype.hasOwnProperty.call(c, l) && e(c, u, l);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), t.util = t.check = void 0, t.check = n(At), t.util = n(di), s(fi, t), s(fp, t), s(di, t), s(Cn, t), s(yp, t), s(yi, t), s(Ap, t), s(vp, t), s(Ie, t), s(Cp, t);
})(Bt);
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.BlobRef = t.jsonBlobRef = t.untypedJsonBlobRef = t.typedJsonBlobRef = void 0;
  const e = Bt, r = Ei, n = wr;
  t.typedJsonBlobRef = n.z.object({
    $type: n.z.literal("blob"),
    ref: e.schema.cid,
    mimeType: n.z.string(),
    size: n.z.number()
  }).strict(), t.untypedJsonBlobRef = n.z.object({
    cid: n.z.string(),
    mimeType: n.z.string()
  }).strict(), t.jsonBlobRef = n.z.union([t.typedJsonBlobRef, t.untypedJsonBlobRef]);
  class s {
    constructor(c, l, f, p) {
      Object.defineProperty(this, "ref", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: c
      }), Object.defineProperty(this, "mimeType", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: l
      }), Object.defineProperty(this, "size", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: f
      }), Object.defineProperty(this, "original", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      }), this.original = p ?? {
        $type: "blob",
        ref: c,
        mimeType: l,
        size: f
      };
    }
    static asBlobRef(c) {
      return e.check.is(c, t.jsonBlobRef) ? s.fromJsonRef(c) : null;
    }
    static fromJsonRef(c) {
      return e.check.is(c, t.typedJsonBlobRef) ? new s(c.ref, c.mimeType, c.size) : new s(r.CID.parse(c.cid), c.mimeType, -1, c);
    }
    ipld() {
      return {
        $type: "blob",
        ref: this.ref,
        mimeType: this.mimeType,
        size: this.size
      };
    }
    toJSON() {
      return (0, e.ipldToJson)(this.ipld());
    }
  }
  t.BlobRef = s;
})(Ds);
Object.defineProperty(Fa, "__esModule", { value: !0 });
Fa.blob = jh;
const Uh = Ds, Kh = Cr;
function jh(t, e, r, n) {
  return !n || !(n instanceof Uh.BlobRef) ? {
    success: !1,
    error: new Kh.ValidationError(`${e} should be a blob ref`)
  } : { success: !0, value: n };
}
var Dt = {}, Xe = {}, wp = {};
(function(t) {
  (() => {
    var e = { d: (m, A) => {
      for (var E in A) e.o(A, E) && !e.o(m, E) && Object.defineProperty(m, E, { enumerable: !0, get: A[E] });
    }, o: (m, A) => Object.prototype.hasOwnProperty.call(m, A), r: (m) => {
      typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(m, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(m, "__esModule", { value: !0 });
    } }, r = {};
    function n(m, A) {
      return A === void 0 && (A = "-"), new RegExp("^(?!0{4}" + A + "0{2}" + A + "0{2})((?=[0-9]{4}" + A + "(((0[^2])|1[0-2])|02(?=" + A + "(([0-1][0-9])|2[0-8])))" + A + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + A + "02" + A + "29))([0-9]{4})" + A + "(?!((0[469])|11)" + A + "31)((0[1,3-9]|1[0-2])|(02(?!" + A + "3)))" + A + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(m);
    }
    function s(m) {
      var A = /\D/.exec(m);
      return A ? A[0] : "";
    }
    function u(m, A, E) {
      A === void 0 && (A = ":"), E === void 0 && (E = !1);
      var v = new RegExp("^([0-1]|2(?=([0-3])|4" + A + "00))[0-9]" + A + "[0-5][0-9](" + A + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
      if (!E || !/[Z+\-]/.test(m)) return v.test(m);
      if (/Z$/.test(m)) return v.test(m.replace("Z", ""));
      var k = m.includes("+"), P = m.split(/[+-]/), $ = P[0], C = P[1];
      return v.test($) && function(T, w, K) {
        return K === void 0 && (K = ":"), new RegExp(w ? "^(0(?!(2" + K + "4)|0" + K + "3)|1(?=([0-1]|2(?=" + K + "[04])|[34](?=" + K + "0))))([03469](?=" + K + "[03])|[17](?=" + K + "0)|2(?=" + K + "[04])|5(?=" + K + "[034])|8(?=" + K + "[04]))" + K + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + K + "[03])|[0-24-8](?=" + K + "00))" + K + "[03]0$").test(T);
      }(C, k, s(C));
    }
    function c(m) {
      var A = m.split("T"), E = A[0], v = A[1], k = n(E, s(E));
      if (!v) return !1;
      var P, $ = (P = v.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(P) ? P[0] : "");
      return k && u(v, $, !0);
    }
    function l(m, A) {
      return A === void 0 && (A = "-"), new RegExp("^[0-9]{4}" + A + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(m);
    }
    e.r(r), e.d(r, { isValidDate: () => n, isValidISODateString: () => c, isValidTime: () => u, isValidYearMonth: () => l });
    var f = t;
    for (var p in r) f[p] = r[p];
    r.__esModule && Object.defineProperty(f, "__esModule", { value: !0 });
  })();
})(wp);
Object.defineProperty(Xe, "__esModule", { value: !0 });
Xe.datetime = Nh;
Xe.uri = Mh;
Xe.atUri = $h;
Xe.did = Sp;
Xe.handle = Lp;
Xe.atIdentifier = qh;
Xe.nsid = Gh;
Xe.cid = zh;
Xe.language = Fh;
Xe.tid = Xh;
Xe.recordKey = Zh;
const Vh = wp, Oh = Ei, mt = Cr, gi = Jr, Ih = Bt;
function Nh(t, e) {
  try {
    if (!(0, Vh.isValidISODateString)(e))
      throw new Error();
  } catch {
    return {
      success: !1,
      error: new mt.ValidationError(`${t} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)
    };
  }
  return { success: !0, value: e };
}
function Mh(t, e) {
  return e.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null ? { success: !0, value: e } : {
    success: !1,
    error: new mt.ValidationError(`${t} must be a uri`)
  };
}
function $h(t, e) {
  try {
    (0, gi.ensureValidAtUri)(e);
  } catch {
    return {
      success: !1,
      error: new mt.ValidationError(`${t} must be a valid at-uri`)
    };
  }
  return { success: !0, value: e };
}
function Sp(t, e) {
  try {
    (0, gi.ensureValidDid)(e);
  } catch {
    return {
      success: !1,
      error: new mt.ValidationError(`${t} must be a valid did`)
    };
  }
  return { success: !0, value: e };
}
function Lp(t, e) {
  try {
    (0, gi.ensureValidHandle)(e);
  } catch {
    return {
      success: !1,
      error: new mt.ValidationError(`${t} must be a valid handle`)
    };
  }
  return { success: !0, value: e };
}
function qh(t, e) {
  if (e.startsWith("did:")) {
    const r = Sp(t, e);
    if (r.success)
      return r;
  } else {
    const r = Lp(t, e);
    if (r.success)
      return r;
  }
  return {
    success: !1,
    error: new mt.ValidationError(`${t} must be a valid did or a handle`)
  };
}
function Gh(t, e) {
  try {
    (0, gi.ensureValidNsid)(e);
  } catch {
    return {
      success: !1,
      error: new mt.ValidationError(`${t} must be a valid nsid`)
    };
  }
  return { success: !0, value: e };
}
function zh(t, e) {
  try {
    Oh.CID.parse(e);
  } catch {
    return {
      success: !1,
      error: new mt.ValidationError(`${t} must be a cid string`)
    };
  }
  return { success: !0, value: e };
}
function Fh(t, e) {
  return (0, Ih.validateLanguage)(e) ? { success: !0, value: e } : {
    success: !1,
    error: new mt.ValidationError(`${t} must be a well-formed BCP 47 language tag`)
  };
}
function Xh(t, e) {
  try {
    (0, gi.ensureValidTid)(e);
  } catch {
    return {
      success: !1,
      error: new mt.ValidationError(`${t} must be a valid TID (timestamp identifier)`)
    };
  }
  return { success: !0, value: e };
}
function Zh(t, e) {
  try {
    (0, gi.ensureValidRecordKey)(e);
  } catch {
    return {
      success: !1,
      error: new mt.ValidationError(`${t} must be a valid Record Key`)
    };
  }
  return { success: !0, value: e };
}
var Hh = L && L.__createBinding || (Object.create ? function(t, e, r, n) {
  n === void 0 && (n = r);
  var s = Object.getOwnPropertyDescriptor(e, r);
  (!s || ("get" in s ? !e.__esModule : s.writable || s.configurable)) && (s = { enumerable: !0, get: function() {
    return e[r];
  } }), Object.defineProperty(t, n, s);
} : function(t, e, r, n) {
  n === void 0 && (n = r), t[n] = e[r];
}), Wh = L && L.__setModuleDefault || (Object.create ? function(t, e) {
  Object.defineProperty(t, "default", { enumerable: !0, value: e });
} : function(t, e) {
  t.default = e;
}), Jh = L && L.__importStar || function(t) {
  if (t && t.__esModule) return t;
  var e = {};
  if (t != null) for (var r in t) r !== "default" && Object.prototype.hasOwnProperty.call(t, r) && Hh(e, t, r);
  return Wh(e, t), e;
};
Object.defineProperty(Dt, "__esModule", { value: !0 });
Dt.validate = Yh;
Dt.boolean = kp;
Dt.integer = Bp;
Dt.string = Dp;
Dt.bytes = Pp;
Dt.cidLink = Up;
Dt.unknown = Kp;
const ec = Bt, Qh = Ei, ct = Jh(Xe), ce = Cr;
function Yh(t, e, r, n) {
  switch (r.type) {
    case "boolean":
      return kp(t, e, r, n);
    case "integer":
      return Bp(t, e, r, n);
    case "string":
      return Dp(t, e, r, n);
    case "bytes":
      return Pp(t, e, r, n);
    case "cid-link":
      return Up(t, e, r, n);
    case "unknown":
      return Kp(t, e, r, n);
    default:
      return {
        success: !1,
        error: new ce.ValidationError(`Unexpected lexicon type: ${r.type}`)
      };
  }
}
function kp(t, e, r, n) {
  r = r;
  const s = typeof n;
  return s === "undefined" ? typeof r.default == "boolean" ? { success: !0, value: r.default } : {
    success: !1,
    error: new ce.ValidationError(`${e} must be a boolean`)
  } : s !== "boolean" ? {
    success: !1,
    error: new ce.ValidationError(`${e} must be a boolean`)
  } : typeof r.const == "boolean" && n !== r.const ? {
    success: !1,
    error: new ce.ValidationError(`${e} must be ${r.const}`)
  } : { success: !0, value: n };
}
function Bp(t, e, r, n) {
  return r = r, typeof n === "undefined" ? typeof r.default == "number" ? { success: !0, value: r.default } : {
    success: !1,
    error: new ce.ValidationError(`${e} must be an integer`)
  } : Number.isInteger(n) ? typeof r.const == "number" && n !== r.const ? {
    success: !1,
    error: new ce.ValidationError(`${e} must be ${r.const}`)
  } : Array.isArray(r.enum) && !r.enum.includes(n) ? {
    success: !1,
    error: new ce.ValidationError(`${e} must be one of (${r.enum.join("|")})`)
  } : typeof r.maximum == "number" && n > r.maximum ? {
    success: !1,
    error: new ce.ValidationError(`${e} can not be greater than ${r.maximum}`)
  } : typeof r.minimum == "number" && n < r.minimum ? {
    success: !1,
    error: new ce.ValidationError(`${e} can not be less than ${r.minimum}`)
  } : { success: !0, value: n } : {
    success: !1,
    error: new ce.ValidationError(`${e} must be an integer`)
  };
}
function Dp(t, e, r, n) {
  if (r = r, typeof n > "u")
    return typeof r.default == "string" ? { success: !0, value: r.default } : {
      success: !1,
      error: new ce.ValidationError(`${e} must be a string`)
    };
  if (typeof n != "string")
    return {
      success: !1,
      error: new ce.ValidationError(`${e} must be a string`)
    };
  if (typeof r.const == "string" && n !== r.const)
    return {
      success: !1,
      error: new ce.ValidationError(`${e} must be ${r.const}`)
    };
  if (Array.isArray(r.enum) && !r.enum.includes(n))
    return {
      success: !1,
      error: new ce.ValidationError(`${e} must be one of (${r.enum.join("|")})`)
    };
  if (typeof r.maxLength == "number" || typeof r.minLength == "number") {
    const s = (0, ec.utf8Len)(n);
    if (typeof r.maxLength == "number" && s > r.maxLength)
      return {
        success: !1,
        error: new ce.ValidationError(`${e} must not be longer than ${r.maxLength} characters`)
      };
    if (typeof r.minLength == "number" && s < r.minLength)
      return {
        success: !1,
        error: new ce.ValidationError(`${e} must not be shorter than ${r.minLength} characters`)
      };
  }
  if (typeof r.maxGraphemes == "number" || typeof r.minGraphemes == "number") {
    let s = !1, u = !1;
    if (typeof r.maxGraphemes == "number" && (n.length <= r.maxGraphemes ? s = !1 : s = !0), typeof r.minGraphemes == "number") {
      if (n.length < r.minGraphemes)
        return {
          success: !1,
          error: new ce.ValidationError(`${e} must not be shorter than ${r.minGraphemes} graphemes`)
        };
      u = !0;
    }
    if (s || u) {
      const c = (0, ec.graphemeLen)(n);
      if (typeof r.maxGraphemes == "number" && c > r.maxGraphemes)
        return {
          success: !1,
          error: new ce.ValidationError(`${e} must not be longer than ${r.maxGraphemes} graphemes`)
        };
      if (typeof r.minGraphemes == "number" && c < r.minGraphemes)
        return {
          success: !1,
          error: new ce.ValidationError(`${e} must not be shorter than ${r.minGraphemes} graphemes`)
        };
    }
  }
  if (typeof r.format == "string")
    switch (r.format) {
      case "datetime":
        return ct.datetime(e, n);
      case "uri":
        return ct.uri(e, n);
      case "at-uri":
        return ct.atUri(e, n);
      case "did":
        return ct.did(e, n);
      case "handle":
        return ct.handle(e, n);
      case "at-identifier":
        return ct.atIdentifier(e, n);
      case "nsid":
        return ct.nsid(e, n);
      case "cid":
        return ct.cid(e, n);
      case "language":
        return ct.language(e, n);
      case "tid":
        return ct.tid(e, n);
      case "record-key":
        return ct.recordKey(e, n);
    }
  return { success: !0, value: n };
}
function Pp(t, e, r, n) {
  return r = r, !n || !(n instanceof Uint8Array) ? {
    success: !1,
    error: new ce.ValidationError(`${e} must be a byte array`)
  } : typeof r.maxLength == "number" && n.byteLength > r.maxLength ? {
    success: !1,
    error: new ce.ValidationError(`${e} must not be larger than ${r.maxLength} bytes`)
  } : typeof r.minLength == "number" && n.byteLength < r.minLength ? {
    success: !1,
    error: new ce.ValidationError(`${e} must not be smaller than ${r.minLength} bytes`)
  } : { success: !0, value: n };
}
function Up(t, e, r, n) {
  return Qh.CID.asCID(n) === null ? {
    success: !1,
    error: new ce.ValidationError(`${e} must be a CID`)
  } : { success: !0, value: n };
}
function Kp(t, e, r, n) {
  return !n || typeof n != "object" ? {
    success: !1,
    error: new ce.ValidationError(`${e} must be an object`)
  } : { success: !0, value: n };
}
Object.defineProperty(Sr, "__esModule", { value: !0 });
Sr.validate = jp;
Sr.array = Vp;
Sr.object = eo;
Sr.validateOneOf = to;
const vt = Cr, Ia = Qr, e0 = Fa, oi = Dt;
function jp(t, e, r, n) {
  switch (r.type) {
    case "boolean":
      return (0, oi.boolean)(t, e, r, n);
    case "integer":
      return (0, oi.integer)(t, e, r, n);
    case "string":
      return (0, oi.string)(t, e, r, n);
    case "bytes":
      return (0, oi.bytes)(t, e, r, n);
    case "cid-link":
      return (0, oi.cidLink)(t, e, r, n);
    case "unknown":
      return (0, oi.unknown)(t, e, r, n);
    case "object":
      return eo(t, e, r, n);
    case "array":
      return Vp(t, e, r, n);
    case "blob":
      return (0, e0.blob)(t, e, r, n);
    default:
      return {
        success: !1,
        error: new vt.ValidationError(`Unexpected lexicon type: ${r.type}`)
      };
  }
}
function Vp(t, e, r, n) {
  if (!Array.isArray(n))
    return {
      success: !1,
      error: new vt.ValidationError(`${e} must be an array`)
    };
  if (typeof r.maxLength == "number" && n.length > r.maxLength)
    return {
      success: !1,
      error: new vt.ValidationError(`${e} must not have more than ${r.maxLength} elements`)
    };
  if (typeof r.minLength == "number" && n.length < r.minLength)
    return {
      success: !1,
      error: new vt.ValidationError(`${e} must not have fewer than ${r.minLength} elements`)
    };
  const s = r.items;
  for (let u = 0; u < n.length; u++) {
    const c = n[u], l = `${e}/${u}`, f = to(t, l, s, c);
    if (!f.success)
      return f;
  }
  return { success: !0, value: n };
}
function eo(t, e, r, n) {
  if (r = r, !n || typeof n != "object")
    return {
      success: !1,
      error: new vt.ValidationError(`${e} must be an object`)
    };
  const s = new Set(r.required), u = new Set(r.nullable);
  let c = n;
  if (typeof r.properties == "object")
    for (const l in r.properties) {
      if (n[l] === null && u.has(l))
        continue;
      const f = r.properties[l];
      if (typeof n[l] > "u" && !s.has(l))
        if (f.type === "integer" || f.type === "boolean" || f.type === "string") {
          if (typeof f.default > "u")
            continue;
        } else
          continue;
      const p = `${e}/${l}`, m = to(t, p, f, n[l]), A = m.success ? m.value : n[l], E = typeof A > "u";
      if (E && s.has(l))
        return {
          success: !1,
          error: new vt.ValidationError(`${e} must have the property "${l}"`)
        };
      if (!E && !m.success)
        return m;
      A !== n[l] && (c === n && (c = { ...n }), c[l] = A);
    }
  return { success: !0, value: c };
}
function to(t, e, r, n, s = !1) {
  let u, c;
  if (r.type === "union") {
    if (!(0, vt.isDiscriminatedObject)(n))
      return {
        success: !1,
        error: new vt.ValidationError(`${e} must be an object which includes the "$type" property`)
      };
    if (t0(r.refs, n.$type))
      c = (0, Ia.toConcreteTypes)(t, {
        type: "ref",
        ref: n.$type
      });
    else
      return r.closed ? {
        success: !1,
        error: new vt.ValidationError(`${e} $type must be one of ${r.refs.join(", ")}`)
      } : { success: !0, value: n };
  } else
    c = (0, Ia.toConcreteTypes)(t, r);
  for (const l of c) {
    const f = s ? eo(t, e, l, n) : jp(t, e, l, n);
    if (f.success)
      return f;
    u ?? (u = f.error);
  }
  return c.length > 1 ? {
    success: !1,
    error: new vt.ValidationError(`${e} did not match any of the expected definitions`)
  } : { success: !1, error: u };
}
const t0 = (t, e) => {
  const r = (0, Ia.toLexUri)(e);
  return t.includes(r) ? !0 : r.endsWith("#main") ? t.includes(r.replace("#main", "")) : t.includes(r + "#main");
};
var ro = {}, r0 = L && L.__createBinding || (Object.create ? function(t, e, r, n) {
  n === void 0 && (n = r);
  var s = Object.getOwnPropertyDescriptor(e, r);
  (!s || ("get" in s ? !e.__esModule : s.writable || s.configurable)) && (s = { enumerable: !0, get: function() {
    return e[r];
  } }), Object.defineProperty(t, n, s);
} : function(t, e, r, n) {
  n === void 0 && (n = r), t[n] = e[r];
}), i0 = L && L.__setModuleDefault || (Object.create ? function(t, e) {
  Object.defineProperty(t, "default", { enumerable: !0, value: e });
} : function(t, e) {
  t.default = e;
}), n0 = L && L.__importStar || function(t) {
  if (t && t.__esModule) return t;
  var e = {};
  if (t != null) for (var r in t) r !== "default" && Object.prototype.hasOwnProperty.call(t, r) && r0(e, t, r);
  return i0(e, t), e;
};
Object.defineProperty(ro, "__esModule", { value: !0 });
ro.params = l0;
const s0 = Cr, a0 = n0(Dt), o0 = Sr;
function l0(t, e, r, n) {
  const s = n && typeof n == "object" ? n : {}, u = new Set(r.required ?? []);
  let c = s;
  if (typeof r.properties == "object")
    for (const l in r.properties) {
      const f = r.properties[l], p = f.type === "array" ? (0, o0.array)(t, l, f, s[l]) : a0.validate(t, l, f, s[l]), m = p.success ? p.value : s[l], A = typeof m > "u";
      if (A && u.has(l))
        return {
          success: !1,
          error: new s0.ValidationError(`${e} must have the property "${l}"`)
        };
      if (!A && !p.success)
        return p;
      m !== s[l] && (c === s && (c = { ...s }), c[l] = m);
    }
  return { success: !0, value: c };
}
Object.defineProperty(Yr, "__esModule", { value: !0 });
Yr.assertValidRecord = c0;
Yr.assertValidXrpcParams = p0;
Yr.assertValidXrpcInput = d0;
Yr.assertValidXrpcOutput = f0;
Yr.assertValidXrpcMessage = y0;
const Op = Sr, u0 = ro;
function c0(t, e, r) {
  const n = (0, Op.object)(t, "Record", e.record, r);
  if (!n.success)
    throw n.error;
  return n.value;
}
function p0(t, e, r) {
  if (e.parameters) {
    const n = (0, u0.params)(t, "Params", e.parameters, r);
    if (!n.success)
      throw n.error;
    return n.value;
  }
}
function d0(t, e, r) {
  var n;
  if ((n = e.input) != null && n.schema)
    return io(t, "Input", e.input.schema, r, !0);
}
function f0(t, e, r) {
  var n;
  if ((n = e.output) != null && n.schema)
    return io(t, "Output", e.output.schema, r, !0);
}
function y0(t, e, r) {
  var n;
  if ((n = e.message) != null && n.schema)
    return io(t, "Message", e.message.schema, r, !0);
}
function io(t, e, r, n, s = !1) {
  const u = (0, Op.validateOneOf)(t, e, r, n, s);
  if (!u.success)
    throw u.error;
  return u.value;
}
var m0 = L && L.__createBinding || (Object.create ? function(t, e, r, n) {
  n === void 0 && (n = r);
  var s = Object.getOwnPropertyDescriptor(e, r);
  (!s || ("get" in s ? !e.__esModule : s.writable || s.configurable)) && (s = { enumerable: !0, get: function() {
    return e[r];
  } }), Object.defineProperty(t, n, s);
} : function(t, e, r, n) {
  n === void 0 && (n = r), t[n] = e[r];
}), b0 = L && L.__setModuleDefault || (Object.create ? function(t, e) {
  Object.defineProperty(t, "default", { enumerable: !0, value: e });
} : function(t, e) {
  t.default = e;
}), h0 = L && L.__importStar || function(t) {
  if (t && t.__esModule) return t;
  var e = {};
  if (t != null) for (var r in t) r !== "default" && Object.prototype.hasOwnProperty.call(t, r) && m0(e, t, r);
  return b0(e, t), e;
};
Object.defineProperty(Bs, "__esModule", { value: !0 });
Bs.Lexicons = void 0;
const xt = Cr, En = Yr, ke = Qr, tc = h0(Sr);
class E0 {
  constructor(e) {
    if (Object.defineProperty(this, "docs", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), Object.defineProperty(this, "defs", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), e)
      for (const r of e)
        this.add(r);
  }
  /**
   * @example clone a lexicon:
   * ```ts
   * const clone = new Lexicons(originalLexicon)
   * ```
   *
   * @example get docs array:
   * ```ts
   * const docs = Array.from(lexicons)
   * ```
   */
  [Symbol.iterator]() {
    return this.docs.values();
  }
  /**
   * Add a lexicon doc.
   */
  add(e) {
    const r = (0, ke.toLexUri)(e.id);
    if (this.docs.has(r))
      throw new Error(`${r} has already been registered`);
    Na(e, r), this.docs.set(r, e);
    for (const [n, s] of rc(e))
      this.defs.set(n, s);
  }
  /**
   * Remove a lexicon doc.
   */
  remove(e) {
    e = (0, ke.toLexUri)(e);
    const r = this.docs.get(e);
    if (!r)
      throw new Error(`Unable to remove "${e}": does not exist`);
    for (const [n, s] of rc(r))
      this.defs.delete(n);
    this.docs.delete(e);
  }
  /**
   * Get a lexicon doc.
   */
  get(e) {
    return e = (0, ke.toLexUri)(e), this.docs.get(e);
  }
  /**
   * Get a definition.
   */
  getDef(e) {
    return e = (0, ke.toLexUri)(e), this.defs.get(e);
  }
  getDefOrThrow(e, r) {
    const n = this.getDef(e);
    if (!n)
      throw new xt.LexiconDefNotFoundError(`Lexicon not found: ${e}`);
    if (r && !r.includes(n.type))
      throw new xt.InvalidLexiconError(`Not a ${r.join(" or ")} lexicon: ${e}`);
    return n;
  }
  /**
   * Validate a record or object.
   */
  validate(e, r) {
    e = (0, ke.toLexUri)(e);
    const n = this.getDefOrThrow(e, ["record", "object"]);
    if (!(0, xt.isObj)(r))
      throw new xt.ValidationError("Value must be an object");
    if (n.type === "record")
      return tc.object(this, "Record", n.record, r);
    if (n.type === "object")
      return tc.object(this, "Object", n, r);
    throw new xt.InvalidLexiconError("Definition must be a record or object");
  }
  /**
   * Validate a record and throw on any error.
   */
  assertValidRecord(e, r) {
    e = (0, ke.toLexUri)(e);
    const n = this.getDefOrThrow(e, ["record"]);
    if (!(0, xt.isObj)(r))
      throw new xt.ValidationError("Record must be an object");
    if (!(0, xt.hasProp)(r, "$type") || typeof r.$type != "string")
      throw new xt.ValidationError("Record/$type must be a string");
    const s = r.$type || "";
    if ((0, ke.toLexUri)(s) !== e)
      throw new xt.ValidationError(`Invalid $type: must be ${e}, got ${s}`);
    return (0, En.assertValidRecord)(this, n, r);
  }
  /**
   * Validate xrpc query params and throw on any error.
   */
  assertValidXrpcParams(e, r) {
    e = (0, ke.toLexUri)(e);
    const n = this.getDefOrThrow(e, [
      "query",
      "procedure",
      "subscription"
    ]);
    return (0, En.assertValidXrpcParams)(this, n, r);
  }
  /**
   * Validate xrpc input body and throw on any error.
   */
  assertValidXrpcInput(e, r) {
    e = (0, ke.toLexUri)(e);
    const n = this.getDefOrThrow(e, ["procedure"]);
    return (0, En.assertValidXrpcInput)(this, n, r);
  }
  /**
   * Validate xrpc output body and throw on any error.
   */
  assertValidXrpcOutput(e, r) {
    e = (0, ke.toLexUri)(e);
    const n = this.getDefOrThrow(e, ["query", "procedure"]);
    return (0, En.assertValidXrpcOutput)(this, n, r);
  }
  /**
   * Validate xrpc subscription message and throw on any error.
   */
  assertValidXrpcMessage(e, r) {
    e = (0, ke.toLexUri)(e);
    const n = this.getDefOrThrow(e, ["subscription"]);
    return (0, En.assertValidXrpcMessage)(this, n, r);
  }
  /**
   * Resolve a lex uri given a ref
   */
  resolveLexUri(e, r) {
    return e = (0, ke.toLexUri)(e), (0, ke.toLexUri)(r, e);
  }
}
Bs.Lexicons = E0;
function* rc(t) {
  for (const e in t.defs)
    yield [`lex:${t.id}#${e}`, t.defs[e]], e === "main" && (yield [`lex:${t.id}`, t.defs[e]]);
}
function Na(t, e) {
  for (const r in t)
    t.type === "ref" ? t.ref = (0, ke.toLexUri)(t.ref, e) : t.type === "union" ? t.refs = t.refs.map((n) => (0, ke.toLexUri)(n, e)) : Array.isArray(t[r]) ? t[r] = t[r].map((n) => typeof n == "string" ? n.startsWith("#") ? (0, ke.toLexUri)(n, e) : n : n && typeof n == "object" ? Na(n, e) : n) : t[r] && typeof t[r] == "object" && (t[r] = Na(t[r], e));
  return t;
}
var Ip = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.jsonStringToLex = t.jsonToLex = t.stringifyLex = t.lexToJson = t.ipldToLex = t.lexToIpld = void 0;
  const e = Bt, r = Ei, n = Ds, s = (m) => {
    if (Array.isArray(m))
      return m.map((A) => (0, t.lexToIpld)(A));
    if (m && typeof m == "object") {
      if (m instanceof n.BlobRef)
        return m.original;
      if (r.CID.asCID(m) || m instanceof Uint8Array)
        return m;
      const A = {};
      for (const E of Object.keys(m))
        A[E] = (0, t.lexToIpld)(m[E]);
      return A;
    }
    return m;
  };
  t.lexToIpld = s;
  const u = (m) => {
    if (Array.isArray(m))
      return m.map((A) => (0, t.ipldToLex)(A));
    if (m && typeof m == "object") {
      if ((m.$type === "blob" || typeof m.cid == "string" && typeof m.mimeType == "string") && e.check.is(m, n.jsonBlobRef))
        return n.BlobRef.fromJsonRef(m);
      if (r.CID.asCID(m) || m instanceof Uint8Array)
        return m;
      const A = {};
      for (const E of Object.keys(m))
        A[E] = (0, t.ipldToLex)(m[E]);
      return A;
    }
    return m;
  };
  t.ipldToLex = u;
  const c = (m) => (0, e.ipldToJson)((0, t.lexToIpld)(m));
  t.lexToJson = c;
  const l = (m) => JSON.stringify((0, t.lexToJson)(m));
  t.stringifyLex = l;
  const f = (m) => (0, t.ipldToLex)((0, e.jsonToIpld)(m));
  t.jsonToLex = f;
  const p = (m) => (0, t.jsonToLex)(JSON.parse(m));
  t.jsonStringToLex = p;
})(Ip);
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(n, s, u, c) {
    c === void 0 && (c = u);
    var l = Object.getOwnPropertyDescriptor(s, u);
    (!l || ("get" in l ? !s.__esModule : l.writable || l.configurable)) && (l = { enumerable: !0, get: function() {
      return s[u];
    } }), Object.defineProperty(n, c, l);
  } : function(n, s, u, c) {
    c === void 0 && (c = u), n[c] = s[u];
  }), r = L && L.__exportStar || function(n, s) {
    for (var u in n) u !== "default" && !Object.prototype.hasOwnProperty.call(s, u) && e(s, n, u);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), r(Cr, t), r(Bs, t), r(Ds, t), r(Ip, t);
})(Hr);
var O = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.ids = t.lexicons = t.schemas = t.schemaDict = void 0;
  const e = Hr;
  t.schemaDict = {
    ComAtprotoAdminDefs: {
      lexicon: 1,
      id: "com.atproto.admin.defs",
      defs: {
        statusAttr: {
          type: "object",
          required: ["applied"],
          properties: {
            applied: {
              type: "boolean"
            },
            ref: {
              type: "string"
            }
          }
        },
        accountView: {
          type: "object",
          required: ["did", "handle", "indexedAt"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            email: {
              type: "string"
            },
            relatedRecords: {
              type: "array",
              items: {
                type: "unknown"
              }
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            invitedBy: {
              type: "ref",
              ref: "lex:com.atproto.server.defs#inviteCode"
            },
            invites: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.server.defs#inviteCode"
              }
            },
            invitesDisabled: {
              type: "boolean"
            },
            emailConfirmedAt: {
              type: "string",
              format: "datetime"
            },
            inviteNote: {
              type: "string"
            },
            deactivatedAt: {
              type: "string",
              format: "datetime"
            },
            threatSignatures: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.admin.defs#threatSignature"
              }
            }
          }
        },
        repoRef: {
          type: "object",
          required: ["did"],
          properties: {
            did: {
              type: "string",
              format: "did"
            }
          }
        },
        repoBlobRef: {
          type: "object",
          required: ["did", "cid"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            recordUri: {
              type: "string",
              format: "at-uri"
            }
          }
        },
        threatSignature: {
          type: "object",
          required: ["property", "value"],
          properties: {
            property: {
              type: "string"
            },
            value: {
              type: "string"
            }
          }
        }
      }
    },
    ComAtprotoAdminDeleteAccount: {
      lexicon: 1,
      id: "com.atproto.admin.deleteAccount",
      defs: {
        main: {
          type: "procedure",
          description: "Delete a user account as an administrator.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminDisableAccountInvites: {
      lexicon: 1,
      id: "com.atproto.admin.disableAccountInvites",
      defs: {
        main: {
          type: "procedure",
          description: "Disable an account from receiving new invite codes, but does not invalidate existing codes.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["account"],
              properties: {
                account: {
                  type: "string",
                  format: "did"
                },
                note: {
                  type: "string",
                  description: "Optional reason for disabled invites."
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminDisableInviteCodes: {
      lexicon: 1,
      id: "com.atproto.admin.disableInviteCodes",
      defs: {
        main: {
          type: "procedure",
          description: "Disable some set of codes and/or all codes associated with a set of users.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {
                codes: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                accounts: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminEnableAccountInvites: {
      lexicon: 1,
      id: "com.atproto.admin.enableAccountInvites",
      defs: {
        main: {
          type: "procedure",
          description: "Re-enable an account's ability to receive invite codes.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["account"],
              properties: {
                account: {
                  type: "string",
                  format: "did"
                },
                note: {
                  type: "string",
                  description: "Optional reason for enabled invites."
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminGetAccountInfo: {
      lexicon: 1,
      id: "com.atproto.admin.getAccountInfo",
      defs: {
        main: {
          type: "query",
          description: "Get details about an account.",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:com.atproto.admin.defs#accountView"
            }
          }
        }
      }
    },
    ComAtprotoAdminGetAccountInfos: {
      lexicon: 1,
      id: "com.atproto.admin.getAccountInfos",
      defs: {
        main: {
          type: "query",
          description: "Get details about some accounts.",
          parameters: {
            type: "params",
            required: ["dids"],
            properties: {
              dids: {
                type: "array",
                items: {
                  type: "string",
                  format: "did"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["infos"],
              properties: {
                infos: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#accountView"
                  }
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminGetInviteCodes: {
      lexicon: 1,
      id: "com.atproto.admin.getInviteCodes",
      defs: {
        main: {
          type: "query",
          description: "Get an admin view of invite codes.",
          parameters: {
            type: "params",
            properties: {
              sort: {
                type: "string",
                knownValues: ["recent", "usage"],
                default: "recent"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 500,
                default: 100
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["codes"],
              properties: {
                cursor: {
                  type: "string"
                },
                codes: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminGetSubjectStatus: {
      lexicon: 1,
      id: "com.atproto.admin.getSubjectStatus",
      defs: {
        main: {
          type: "query",
          description: "Get the service-specific admin status of a subject (account, record, or blob).",
          parameters: {
            type: "params",
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              uri: {
                type: "string",
                format: "at-uri"
              },
              blob: {
                type: "string",
                format: "cid"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["subject"],
              properties: {
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef",
                    "lex:com.atproto.admin.defs#repoBlobRef"
                  ]
                },
                takedown: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#statusAttr"
                },
                deactivated: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#statusAttr"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminSearchAccounts: {
      lexicon: 1,
      id: "com.atproto.admin.searchAccounts",
      defs: {
        main: {
          type: "query",
          description: "Get list of accounts that matches your search query.",
          parameters: {
            type: "params",
            properties: {
              email: {
                type: "string"
              },
              cursor: {
                type: "string"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["accounts"],
              properties: {
                cursor: {
                  type: "string"
                },
                accounts: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#accountView"
                  }
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminSendEmail: {
      lexicon: 1,
      id: "com.atproto.admin.sendEmail",
      defs: {
        main: {
          type: "procedure",
          description: "Send email to a user's account email address.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["recipientDid", "content", "senderDid"],
              properties: {
                recipientDid: {
                  type: "string",
                  format: "did"
                },
                content: {
                  type: "string"
                },
                subject: {
                  type: "string"
                },
                senderDid: {
                  type: "string",
                  format: "did"
                },
                comment: {
                  type: "string",
                  description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["sent"],
              properties: {
                sent: {
                  type: "boolean"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminUpdateAccountEmail: {
      lexicon: 1,
      id: "com.atproto.admin.updateAccountEmail",
      defs: {
        main: {
          type: "procedure",
          description: "Administrative action to update an account's email.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["account", "email"],
              properties: {
                account: {
                  type: "string",
                  format: "at-identifier",
                  description: "The handle or DID of the repo."
                },
                email: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminUpdateAccountHandle: {
      lexicon: 1,
      id: "com.atproto.admin.updateAccountHandle",
      defs: {
        main: {
          type: "procedure",
          description: "Administrative action to update an account's handle.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminUpdateAccountPassword: {
      lexicon: 1,
      id: "com.atproto.admin.updateAccountPassword",
      defs: {
        main: {
          type: "procedure",
          description: "Update the password for a user account as an administrator.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did", "password"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                password: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoAdminUpdateSubjectStatus: {
      lexicon: 1,
      id: "com.atproto.admin.updateSubjectStatus",
      defs: {
        main: {
          type: "procedure",
          description: "Update the service-specific admin status of a subject (account, record, or blob).",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["subject"],
              properties: {
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef",
                    "lex:com.atproto.admin.defs#repoBlobRef"
                  ]
                },
                takedown: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#statusAttr"
                },
                deactivated: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#statusAttr"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["subject"],
              properties: {
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef",
                    "lex:com.atproto.admin.defs#repoBlobRef"
                  ]
                },
                takedown: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#statusAttr"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoIdentityGetRecommendedDidCredentials: {
      lexicon: 1,
      id: "com.atproto.identity.getRecommendedDidCredentials",
      defs: {
        main: {
          type: "query",
          description: "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {
                rotationKeys: {
                  description: "Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.",
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                alsoKnownAs: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                verificationMethods: {
                  type: "unknown"
                },
                services: {
                  type: "unknown"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoIdentityRequestPlcOperationSignature: {
      lexicon: 1,
      id: "com.atproto.identity.requestPlcOperationSignature",
      defs: {
        main: {
          type: "procedure",
          description: "Request an email with a code to in order to request a signed PLC operation. Requires Auth."
        }
      }
    },
    ComAtprotoIdentityResolveHandle: {
      lexicon: 1,
      id: "com.atproto.identity.resolveHandle",
      defs: {
        main: {
          type: "query",
          description: "Resolves a handle (domain name) to a DID.",
          parameters: {
            type: "params",
            required: ["handle"],
            properties: {
              handle: {
                type: "string",
                format: "handle",
                description: "The handle to resolve."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoIdentitySignPlcOperation: {
      lexicon: 1,
      id: "com.atproto.identity.signPlcOperation",
      defs: {
        main: {
          type: "procedure",
          description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {
                token: {
                  description: "A token received through com.atproto.identity.requestPlcOperationSignature",
                  type: "string"
                },
                rotationKeys: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                alsoKnownAs: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                verificationMethods: {
                  type: "unknown"
                },
                services: {
                  type: "unknown"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["operation"],
              properties: {
                operation: {
                  type: "unknown",
                  description: "A signed DID PLC operation."
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoIdentitySubmitPlcOperation: {
      lexicon: 1,
      id: "com.atproto.identity.submitPlcOperation",
      defs: {
        main: {
          type: "procedure",
          description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["operation"],
              properties: {
                operation: {
                  type: "unknown"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoIdentityUpdateHandle: {
      lexicon: 1,
      id: "com.atproto.identity.updateHandle",
      defs: {
        main: {
          type: "procedure",
          description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["handle"],
              properties: {
                handle: {
                  type: "string",
                  format: "handle",
                  description: "The new handle."
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoLabelDefs: {
      lexicon: 1,
      id: "com.atproto.label.defs",
      defs: {
        label: {
          type: "object",
          description: "Metadata tag on an atproto resource (eg, repo or record).",
          required: ["src", "uri", "val", "cts"],
          properties: {
            ver: {
              type: "integer",
              description: "The AT Protocol version of the label object."
            },
            src: {
              type: "string",
              format: "did",
              description: "DID of the actor who created this label."
            },
            uri: {
              type: "string",
              format: "uri",
              description: "AT URI of the record, repository (account), or other resource that this label applies to."
            },
            cid: {
              type: "string",
              format: "cid",
              description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
            },
            val: {
              type: "string",
              maxLength: 128,
              description: "The short string name of the value or type of this label."
            },
            neg: {
              type: "boolean",
              description: "If true, this is a negation label, overwriting a previous label."
            },
            cts: {
              type: "string",
              format: "datetime",
              description: "Timestamp when this label was created."
            },
            exp: {
              type: "string",
              format: "datetime",
              description: "Timestamp at which this label expires (no longer applies)."
            },
            sig: {
              type: "bytes",
              description: "Signature of dag-cbor encoded label."
            }
          }
        },
        selfLabels: {
          type: "object",
          description: "Metadata tags on an atproto record, published by the author within the record.",
          required: ["values"],
          properties: {
            values: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#selfLabel"
              },
              maxLength: 10
            }
          }
        },
        selfLabel: {
          type: "object",
          description: "Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.",
          required: ["val"],
          properties: {
            val: {
              type: "string",
              maxLength: 128,
              description: "The short string name of the value or type of this label."
            }
          }
        },
        labelValueDefinition: {
          type: "object",
          description: "Declares a label value and its expected interpretations and behaviors.",
          required: ["identifier", "severity", "blurs", "locales"],
          properties: {
            identifier: {
              type: "string",
              description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
              maxLength: 100,
              maxGraphemes: 100
            },
            severity: {
              type: "string",
              description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
              knownValues: ["inform", "alert", "none"]
            },
            blurs: {
              type: "string",
              description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
              knownValues: ["content", "media", "none"]
            },
            defaultSetting: {
              type: "string",
              description: "The default setting for this label.",
              knownValues: ["ignore", "warn", "hide"],
              default: "warn"
            },
            adultOnly: {
              type: "boolean",
              description: "Does the user need to have adult content enabled in order to configure this label?"
            },
            locales: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#labelValueDefinitionStrings"
              }
            }
          }
        },
        labelValueDefinitionStrings: {
          type: "object",
          description: "Strings which describe the label in the UI, localized into a specific language.",
          required: ["lang", "name", "description"],
          properties: {
            lang: {
              type: "string",
              description: "The code of the language these strings are written in.",
              format: "language"
            },
            name: {
              type: "string",
              description: "A short human-readable name for the label.",
              maxGraphemes: 64,
              maxLength: 640
            },
            description: {
              type: "string",
              description: "A longer description of what the label means and why it might be applied.",
              maxGraphemes: 1e4,
              maxLength: 1e5
            }
          }
        },
        labelValue: {
          type: "string",
          knownValues: [
            "!hide",
            "!no-promote",
            "!warn",
            "!no-unauthenticated",
            "dmca-violation",
            "doxxing",
            "porn",
            "sexual",
            "nudity",
            "nsfl",
            "gore"
          ]
        }
      }
    },
    ComAtprotoLabelQueryLabels: {
      lexicon: 1,
      id: "com.atproto.label.queryLabels",
      defs: {
        main: {
          type: "query",
          description: "Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.",
          parameters: {
            type: "params",
            required: ["uriPatterns"],
            properties: {
              uriPatterns: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
              },
              sources: {
                type: "array",
                items: {
                  type: "string",
                  format: "did"
                },
                description: "Optional list of label sources (DIDs) to filter on."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 250,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["labels"],
              properties: {
                cursor: {
                  type: "string"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoLabelSubscribeLabels: {
      lexicon: 1,
      id: "com.atproto.label.subscribeLabels",
      defs: {
        main: {
          type: "subscription",
          description: "Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.",
          parameters: {
            type: "params",
            properties: {
              cursor: {
                type: "integer",
                description: "The last known event seq number to backfill from."
              }
            }
          },
          message: {
            schema: {
              type: "union",
              refs: [
                "lex:com.atproto.label.subscribeLabels#labels",
                "lex:com.atproto.label.subscribeLabels#info"
              ]
            }
          },
          errors: [
            {
              name: "FutureCursor"
            }
          ]
        },
        labels: {
          type: "object",
          required: ["seq", "labels"],
          properties: {
            seq: {
              type: "integer"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            }
          }
        },
        info: {
          type: "object",
          required: ["name"],
          properties: {
            name: {
              type: "string",
              knownValues: ["OutdatedCursor"]
            },
            message: {
              type: "string"
            }
          }
        }
      }
    },
    ComAtprotoModerationCreateReport: {
      lexicon: 1,
      id: "com.atproto.moderation.createReport",
      defs: {
        main: {
          type: "procedure",
          description: "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["reasonType", "subject"],
              properties: {
                reasonType: {
                  type: "ref",
                  description: "Indicates the broad category of violation the report is for.",
                  ref: "lex:com.atproto.moderation.defs#reasonType"
                },
                reason: {
                  type: "string",
                  maxGraphemes: 2e3,
                  maxLength: 2e4,
                  description: "Additional context about the content and violation."
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: [
                "id",
                "reasonType",
                "subject",
                "reportedBy",
                "createdAt"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                reasonType: {
                  type: "ref",
                  ref: "lex:com.atproto.moderation.defs#reasonType"
                },
                reason: {
                  type: "string",
                  maxGraphemes: 2e3,
                  maxLength: 2e4
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                reportedBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoModerationDefs: {
      lexicon: 1,
      id: "com.atproto.moderation.defs",
      defs: {
        reasonType: {
          type: "string",
          knownValues: [
            "com.atproto.moderation.defs#reasonSpam",
            "com.atproto.moderation.defs#reasonViolation",
            "com.atproto.moderation.defs#reasonMisleading",
            "com.atproto.moderation.defs#reasonSexual",
            "com.atproto.moderation.defs#reasonRude",
            "com.atproto.moderation.defs#reasonOther",
            "com.atproto.moderation.defs#reasonAppeal"
          ]
        },
        reasonSpam: {
          type: "token",
          description: "Spam: frequent unwanted promotion, replies, mentions"
        },
        reasonViolation: {
          type: "token",
          description: "Direct violation of server rules, laws, terms of service"
        },
        reasonMisleading: {
          type: "token",
          description: "Misleading identity, affiliation, or content"
        },
        reasonSexual: {
          type: "token",
          description: "Unwanted or mislabeled sexual content"
        },
        reasonRude: {
          type: "token",
          description: "Rude, harassing, explicit, or otherwise unwelcoming behavior"
        },
        reasonOther: {
          type: "token",
          description: "Other: reports not falling under another report category"
        },
        reasonAppeal: {
          type: "token",
          description: "Appeal: appeal a previously taken moderation action"
        }
      }
    },
    ComAtprotoRepoApplyWrites: {
      lexicon: 1,
      id: "com.atproto.repo.applyWrites",
      defs: {
        main: {
          type: "procedure",
          description: "Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["repo", "writes"],
              properties: {
                repo: {
                  type: "string",
                  format: "at-identifier",
                  description: "The handle or DID of the repo (aka, current account)."
                },
                validate: {
                  type: "boolean",
                  description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons."
                },
                writes: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:com.atproto.repo.applyWrites#create",
                      "lex:com.atproto.repo.applyWrites#update",
                      "lex:com.atproto.repo.applyWrites#delete"
                    ],
                    closed: !0
                  }
                },
                swapCommit: {
                  type: "string",
                  description: "If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.",
                  format: "cid"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: [],
              properties: {
                commit: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.defs#commitMeta"
                },
                results: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:com.atproto.repo.applyWrites#createResult",
                      "lex:com.atproto.repo.applyWrites#updateResult",
                      "lex:com.atproto.repo.applyWrites#deleteResult"
                    ],
                    closed: !0
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "InvalidSwap",
              description: "Indicates that the 'swapCommit' parameter did not match current commit."
            }
          ]
        },
        create: {
          type: "object",
          description: "Operation which creates a new record.",
          required: ["collection", "value"],
          properties: {
            collection: {
              type: "string",
              format: "nsid"
            },
            rkey: {
              type: "string",
              maxLength: 512
            },
            value: {
              type: "unknown"
            }
          }
        },
        update: {
          type: "object",
          description: "Operation which updates an existing record.",
          required: ["collection", "rkey", "value"],
          properties: {
            collection: {
              type: "string",
              format: "nsid"
            },
            rkey: {
              type: "string"
            },
            value: {
              type: "unknown"
            }
          }
        },
        delete: {
          type: "object",
          description: "Operation which deletes an existing record.",
          required: ["collection", "rkey"],
          properties: {
            collection: {
              type: "string",
              format: "nsid"
            },
            rkey: {
              type: "string"
            }
          }
        },
        createResult: {
          type: "object",
          required: ["uri", "cid"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            validationStatus: {
              type: "string",
              knownValues: ["valid", "unknown"]
            }
          }
        },
        updateResult: {
          type: "object",
          required: ["uri", "cid"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            validationStatus: {
              type: "string",
              knownValues: ["valid", "unknown"]
            }
          }
        },
        deleteResult: {
          type: "object",
          required: [],
          properties: {}
        }
      }
    },
    ComAtprotoRepoCreateRecord: {
      lexicon: 1,
      id: "com.atproto.repo.createRecord",
      defs: {
        main: {
          type: "procedure",
          description: "Create a single new repository record. Requires auth, implemented by PDS.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["repo", "collection", "record"],
              properties: {
                repo: {
                  type: "string",
                  format: "at-identifier",
                  description: "The handle or DID of the repo (aka, current account)."
                },
                collection: {
                  type: "string",
                  format: "nsid",
                  description: "The NSID of the record collection."
                },
                rkey: {
                  type: "string",
                  description: "The Record Key.",
                  maxLength: 512
                },
                validate: {
                  type: "boolean",
                  description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                },
                record: {
                  type: "unknown",
                  description: "The record itself. Must contain a $type field."
                },
                swapCommit: {
                  type: "string",
                  format: "cid",
                  description: "Compare and swap with the previous commit by CID."
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["uri", "cid"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                commit: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.defs#commitMeta"
                },
                validationStatus: {
                  type: "string",
                  knownValues: ["valid", "unknown"]
                }
              }
            }
          },
          errors: [
            {
              name: "InvalidSwap",
              description: "Indicates that 'swapCommit' didn't match current repo commit."
            }
          ]
        }
      }
    },
    ComAtprotoRepoDefs: {
      lexicon: 1,
      id: "com.atproto.repo.defs",
      defs: {
        commitMeta: {
          type: "object",
          required: ["cid", "rev"],
          properties: {
            cid: {
              type: "string",
              format: "cid"
            },
            rev: {
              type: "string"
            }
          }
        }
      }
    },
    ComAtprotoRepoDeleteRecord: {
      lexicon: 1,
      id: "com.atproto.repo.deleteRecord",
      defs: {
        main: {
          type: "procedure",
          description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["repo", "collection", "rkey"],
              properties: {
                repo: {
                  type: "string",
                  format: "at-identifier",
                  description: "The handle or DID of the repo (aka, current account)."
                },
                collection: {
                  type: "string",
                  format: "nsid",
                  description: "The NSID of the record collection."
                },
                rkey: {
                  type: "string",
                  description: "The Record Key."
                },
                swapRecord: {
                  type: "string",
                  format: "cid",
                  description: "Compare and swap with the previous record by CID."
                },
                swapCommit: {
                  type: "string",
                  format: "cid",
                  description: "Compare and swap with the previous commit by CID."
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {
                commit: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.defs#commitMeta"
                }
              }
            }
          },
          errors: [
            {
              name: "InvalidSwap"
            }
          ]
        }
      }
    },
    ComAtprotoRepoDescribeRepo: {
      lexicon: 1,
      id: "com.atproto.repo.describeRepo",
      defs: {
        main: {
          type: "query",
          description: "Get information about an account and repository, including the list of collections. Does not require auth.",
          parameters: {
            type: "params",
            required: ["repo"],
            properties: {
              repo: {
                type: "string",
                format: "at-identifier",
                description: "The handle or DID of the repo."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: [
                "handle",
                "did",
                "didDoc",
                "collections",
                "handleIsCorrect"
              ],
              properties: {
                handle: {
                  type: "string",
                  format: "handle"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                didDoc: {
                  type: "unknown",
                  description: "The complete DID document for this account."
                },
                collections: {
                  type: "array",
                  description: "List of all the collections (NSIDs) for which this repo contains at least one record.",
                  items: {
                    type: "string",
                    format: "nsid"
                  }
                },
                handleIsCorrect: {
                  type: "boolean",
                  description: "Indicates if handle is currently valid (resolves bi-directionally)"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoRepoGetRecord: {
      lexicon: 1,
      id: "com.atproto.repo.getRecord",
      defs: {
        main: {
          type: "query",
          description: "Get a single record from a repository. Does not require auth.",
          parameters: {
            type: "params",
            required: ["repo", "collection", "rkey"],
            properties: {
              repo: {
                type: "string",
                format: "at-identifier",
                description: "The handle or DID of the repo."
              },
              collection: {
                type: "string",
                format: "nsid",
                description: "The NSID of the record collection."
              },
              rkey: {
                type: "string",
                description: "The Record Key."
              },
              cid: {
                type: "string",
                format: "cid",
                description: "The CID of the version of the record. If not specified, then return the most recent version."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["uri", "value"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                }
              }
            }
          },
          errors: [
            {
              name: "RecordNotFound"
            }
          ]
        }
      }
    },
    ComAtprotoRepoImportRepo: {
      lexicon: 1,
      id: "com.atproto.repo.importRepo",
      defs: {
        main: {
          type: "procedure",
          description: "Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.",
          input: {
            encoding: "application/vnd.ipld.car"
          }
        }
      }
    },
    ComAtprotoRepoListMissingBlobs: {
      lexicon: 1,
      id: "com.atproto.repo.listMissingBlobs",
      defs: {
        main: {
          type: "query",
          description: "Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 1e3,
                default: 500
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["blobs"],
              properties: {
                cursor: {
                  type: "string"
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.listMissingBlobs#recordBlob"
                  }
                }
              }
            }
          }
        },
        recordBlob: {
          type: "object",
          required: ["cid", "recordUri"],
          properties: {
            cid: {
              type: "string",
              format: "cid"
            },
            recordUri: {
              type: "string",
              format: "at-uri"
            }
          }
        }
      }
    },
    ComAtprotoRepoListRecords: {
      lexicon: 1,
      id: "com.atproto.repo.listRecords",
      defs: {
        main: {
          type: "query",
          description: "List a range of records in a repository, matching a specific collection. Does not require auth.",
          parameters: {
            type: "params",
            required: ["repo", "collection"],
            properties: {
              repo: {
                type: "string",
                format: "at-identifier",
                description: "The handle or DID of the repo."
              },
              collection: {
                type: "string",
                format: "nsid",
                description: "The NSID of the record type."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50,
                description: "The number of records to return."
              },
              cursor: {
                type: "string"
              },
              rkeyStart: {
                type: "string",
                description: "DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)"
              },
              rkeyEnd: {
                type: "string",
                description: "DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)"
              },
              reverse: {
                type: "boolean",
                description: "Flag to reverse the order of the returned records."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["records"],
              properties: {
                cursor: {
                  type: "string"
                },
                records: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.listRecords#record"
                  }
                }
              }
            }
          }
        },
        record: {
          type: "object",
          required: ["uri", "cid", "value"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            value: {
              type: "unknown"
            }
          }
        }
      }
    },
    ComAtprotoRepoPutRecord: {
      lexicon: 1,
      id: "com.atproto.repo.putRecord",
      defs: {
        main: {
          type: "procedure",
          description: "Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["repo", "collection", "rkey", "record"],
              nullable: ["swapRecord"],
              properties: {
                repo: {
                  type: "string",
                  format: "at-identifier",
                  description: "The handle or DID of the repo (aka, current account)."
                },
                collection: {
                  type: "string",
                  format: "nsid",
                  description: "The NSID of the record collection."
                },
                rkey: {
                  type: "string",
                  description: "The Record Key.",
                  maxLength: 512
                },
                validate: {
                  type: "boolean",
                  description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                },
                record: {
                  type: "unknown",
                  description: "The record to write."
                },
                swapRecord: {
                  type: "string",
                  format: "cid",
                  description: "Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation"
                },
                swapCommit: {
                  type: "string",
                  format: "cid",
                  description: "Compare and swap with the previous commit by CID."
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["uri", "cid"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                commit: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.defs#commitMeta"
                },
                validationStatus: {
                  type: "string",
                  knownValues: ["valid", "unknown"]
                }
              }
            }
          },
          errors: [
            {
              name: "InvalidSwap"
            }
          ]
        }
      }
    },
    ComAtprotoRepoStrongRef: {
      lexicon: 1,
      id: "com.atproto.repo.strongRef",
      description: "A URI with a content-hash fingerprint.",
      defs: {
        main: {
          type: "object",
          required: ["uri", "cid"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            }
          }
        }
      }
    },
    ComAtprotoRepoUploadBlob: {
      lexicon: 1,
      id: "com.atproto.repo.uploadBlob",
      defs: {
        main: {
          type: "procedure",
          description: "Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.",
          input: {
            encoding: "*/*"
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["blob"],
              properties: {
                blob: {
                  type: "blob"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerActivateAccount: {
      lexicon: 1,
      id: "com.atproto.server.activateAccount",
      defs: {
        main: {
          type: "procedure",
          description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."
        }
      }
    },
    ComAtprotoServerCheckAccountStatus: {
      lexicon: 1,
      id: "com.atproto.server.checkAccountStatus",
      defs: {
        main: {
          type: "query",
          description: "Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: [
                "activated",
                "validDid",
                "repoCommit",
                "repoRev",
                "repoBlocks",
                "indexedRecords",
                "privateStateValues",
                "expectedBlobs",
                "importedBlobs"
              ],
              properties: {
                activated: {
                  type: "boolean"
                },
                validDid: {
                  type: "boolean"
                },
                repoCommit: {
                  type: "string",
                  format: "cid"
                },
                repoRev: {
                  type: "string"
                },
                repoBlocks: {
                  type: "integer"
                },
                indexedRecords: {
                  type: "integer"
                },
                privateStateValues: {
                  type: "integer"
                },
                expectedBlobs: {
                  type: "integer"
                },
                importedBlobs: {
                  type: "integer"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerConfirmEmail: {
      lexicon: 1,
      id: "com.atproto.server.confirmEmail",
      defs: {
        main: {
          type: "procedure",
          description: "Confirm an email using a token from com.atproto.server.requestEmailConfirmation.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["email", "token"],
              properties: {
                email: {
                  type: "string"
                },
                token: {
                  type: "string"
                }
              }
            }
          },
          errors: [
            {
              name: "AccountNotFound"
            },
            {
              name: "ExpiredToken"
            },
            {
              name: "InvalidToken"
            },
            {
              name: "InvalidEmail"
            }
          ]
        }
      }
    },
    ComAtprotoServerCreateAccount: {
      lexicon: 1,
      id: "com.atproto.server.createAccount",
      defs: {
        main: {
          type: "procedure",
          description: "Create an account. Implemented by PDS.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["handle"],
              properties: {
                email: {
                  type: "string"
                },
                handle: {
                  type: "string",
                  format: "handle",
                  description: "Requested handle for the account."
                },
                did: {
                  type: "string",
                  format: "did",
                  description: "Pre-existing atproto DID, being imported to a new account."
                },
                inviteCode: {
                  type: "string"
                },
                verificationCode: {
                  type: "string"
                },
                verificationPhone: {
                  type: "string"
                },
                password: {
                  type: "string",
                  description: "Initial account password. May need to meet instance-specific password strength requirements."
                },
                recoveryKey: {
                  type: "string",
                  description: "DID PLC rotation key (aka, recovery key) to be included in PLC creation operation."
                },
                plcOp: {
                  type: "unknown",
                  description: "A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented."
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              description: "Account login session returned on successful account creation.",
              required: ["accessJwt", "refreshJwt", "handle", "did"],
              properties: {
                accessJwt: {
                  type: "string"
                },
                refreshJwt: {
                  type: "string"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the new account."
                },
                didDoc: {
                  type: "unknown",
                  description: "Complete DID document."
                }
              }
            }
          },
          errors: [
            {
              name: "InvalidHandle"
            },
            {
              name: "InvalidPassword"
            },
            {
              name: "InvalidInviteCode"
            },
            {
              name: "HandleNotAvailable"
            },
            {
              name: "UnsupportedDomain"
            },
            {
              name: "UnresolvableDid"
            },
            {
              name: "IncompatibleDidDoc"
            }
          ]
        }
      }
    },
    ComAtprotoServerCreateAppPassword: {
      lexicon: 1,
      id: "com.atproto.server.createAppPassword",
      defs: {
        main: {
          type: "procedure",
          description: "Create an App Password.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  description: "A short name for the App Password, to help distinguish them."
                },
                privileged: {
                  type: "boolean",
                  description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients."
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:com.atproto.server.createAppPassword#appPassword"
            }
          },
          errors: [
            {
              name: "AccountTakedown"
            }
          ]
        },
        appPassword: {
          type: "object",
          required: ["name", "password", "createdAt"],
          properties: {
            name: {
              type: "string"
            },
            password: {
              type: "string"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            privileged: {
              type: "boolean"
            }
          }
        }
      }
    },
    ComAtprotoServerCreateInviteCode: {
      lexicon: 1,
      id: "com.atproto.server.createInviteCode",
      defs: {
        main: {
          type: "procedure",
          description: "Create an invite code.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["useCount"],
              properties: {
                useCount: {
                  type: "integer"
                },
                forAccount: {
                  type: "string",
                  format: "did"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["code"],
              properties: {
                code: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerCreateInviteCodes: {
      lexicon: 1,
      id: "com.atproto.server.createInviteCodes",
      defs: {
        main: {
          type: "procedure",
          description: "Create invite codes.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["codeCount", "useCount"],
              properties: {
                codeCount: {
                  type: "integer",
                  default: 1
                },
                useCount: {
                  type: "integer"
                },
                forAccounts: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["codes"],
              properties: {
                codes: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.createInviteCodes#accountCodes"
                  }
                }
              }
            }
          }
        },
        accountCodes: {
          type: "object",
          required: ["account", "codes"],
          properties: {
            account: {
              type: "string"
            },
            codes: {
              type: "array",
              items: {
                type: "string"
              }
            }
          }
        }
      }
    },
    ComAtprotoServerCreateSession: {
      lexicon: 1,
      id: "com.atproto.server.createSession",
      defs: {
        main: {
          type: "procedure",
          description: "Create an authentication session.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["identifier", "password"],
              properties: {
                identifier: {
                  type: "string",
                  description: "Handle or other identifier supported by the server for the authenticating user."
                },
                password: {
                  type: "string"
                },
                authFactorToken: {
                  type: "string"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["accessJwt", "refreshJwt", "handle", "did"],
              properties: {
                accessJwt: {
                  type: "string"
                },
                refreshJwt: {
                  type: "string"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                didDoc: {
                  type: "unknown"
                },
                email: {
                  type: "string"
                },
                emailConfirmed: {
                  type: "boolean"
                },
                emailAuthFactor: {
                  type: "boolean"
                },
                active: {
                  type: "boolean"
                },
                status: {
                  type: "string",
                  description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                  knownValues: ["takendown", "suspended", "deactivated"]
                }
              }
            }
          },
          errors: [
            {
              name: "AccountTakedown"
            },
            {
              name: "AuthFactorTokenRequired"
            }
          ]
        }
      }
    },
    ComAtprotoServerDeactivateAccount: {
      lexicon: 1,
      id: "com.atproto.server.deactivateAccount",
      defs: {
        main: {
          type: "procedure",
          description: "Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {
                deleteAfter: {
                  type: "string",
                  format: "datetime",
                  description: "A recommendation to server as to how long they should hold onto the deactivated account before deleting."
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerDefs: {
      lexicon: 1,
      id: "com.atproto.server.defs",
      defs: {
        inviteCode: {
          type: "object",
          required: [
            "code",
            "available",
            "disabled",
            "forAccount",
            "createdBy",
            "createdAt",
            "uses"
          ],
          properties: {
            code: {
              type: "string"
            },
            available: {
              type: "integer"
            },
            disabled: {
              type: "boolean"
            },
            forAccount: {
              type: "string"
            },
            createdBy: {
              type: "string"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            uses: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.server.defs#inviteCodeUse"
              }
            }
          }
        },
        inviteCodeUse: {
          type: "object",
          required: ["usedBy", "usedAt"],
          properties: {
            usedBy: {
              type: "string",
              format: "did"
            },
            usedAt: {
              type: "string",
              format: "datetime"
            }
          }
        }
      }
    },
    ComAtprotoServerDeleteAccount: {
      lexicon: 1,
      id: "com.atproto.server.deleteAccount",
      defs: {
        main: {
          type: "procedure",
          description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did", "password", "token"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                password: {
                  type: "string"
                },
                token: {
                  type: "string"
                }
              }
            }
          },
          errors: [
            {
              name: "ExpiredToken"
            },
            {
              name: "InvalidToken"
            }
          ]
        }
      }
    },
    ComAtprotoServerDeleteSession: {
      lexicon: 1,
      id: "com.atproto.server.deleteSession",
      defs: {
        main: {
          type: "procedure",
          description: "Delete the current session. Requires auth."
        }
      }
    },
    ComAtprotoServerDescribeServer: {
      lexicon: 1,
      id: "com.atproto.server.describeServer",
      defs: {
        main: {
          type: "query",
          description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did", "availableUserDomains"],
              properties: {
                inviteCodeRequired: {
                  type: "boolean",
                  description: "If true, an invite code must be supplied to create an account on this instance."
                },
                phoneVerificationRequired: {
                  type: "boolean",
                  description: "If true, a phone verification token must be supplied to create an account on this instance."
                },
                availableUserDomains: {
                  type: "array",
                  description: "List of domain suffixes that can be used in account handles.",
                  items: {
                    type: "string"
                  }
                },
                links: {
                  type: "ref",
                  description: "URLs of service policy documents.",
                  ref: "lex:com.atproto.server.describeServer#links"
                },
                contact: {
                  type: "ref",
                  description: "Contact information",
                  ref: "lex:com.atproto.server.describeServer#contact"
                },
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        },
        links: {
          type: "object",
          properties: {
            privacyPolicy: {
              type: "string",
              format: "uri"
            },
            termsOfService: {
              type: "string",
              format: "uri"
            }
          }
        },
        contact: {
          type: "object",
          properties: {
            email: {
              type: "string"
            }
          }
        }
      }
    },
    ComAtprotoServerGetAccountInviteCodes: {
      lexicon: 1,
      id: "com.atproto.server.getAccountInviteCodes",
      defs: {
        main: {
          type: "query",
          description: "Get all invite codes for the current account. Requires auth.",
          parameters: {
            type: "params",
            properties: {
              includeUsed: {
                type: "boolean",
                default: !0
              },
              createAvailable: {
                type: "boolean",
                default: !0,
                description: "Controls whether any new 'earned' but not 'created' invites should be created."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["codes"],
              properties: {
                codes: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "DuplicateCreate"
            }
          ]
        }
      }
    },
    ComAtprotoServerGetServiceAuth: {
      lexicon: 1,
      id: "com.atproto.server.getServiceAuth",
      defs: {
        main: {
          type: "query",
          description: "Get a signed token on behalf of the requesting DID for the requested service.",
          parameters: {
            type: "params",
            required: ["aud"],
            properties: {
              aud: {
                type: "string",
                format: "did",
                description: "The DID of the service that the token will be used to authenticate with"
              },
              exp: {
                type: "integer",
                description: "The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope."
              },
              lxm: {
                type: "string",
                format: "nsid",
                description: "Lexicon (XRPC) method to bind the requested token to"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["token"],
              properties: {
                token: {
                  type: "string"
                }
              }
            }
          },
          errors: [
            {
              name: "BadExpiration",
              description: "Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes."
            }
          ]
        }
      }
    },
    ComAtprotoServerGetSession: {
      lexicon: 1,
      id: "com.atproto.server.getSession",
      defs: {
        main: {
          type: "query",
          description: "Get information about the current auth session. Requires auth.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["handle", "did"],
              properties: {
                handle: {
                  type: "string",
                  format: "handle"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                email: {
                  type: "string"
                },
                emailConfirmed: {
                  type: "boolean"
                },
                emailAuthFactor: {
                  type: "boolean"
                },
                didDoc: {
                  type: "unknown"
                },
                active: {
                  type: "boolean"
                },
                status: {
                  type: "string",
                  description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                  knownValues: ["takendown", "suspended", "deactivated"]
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerListAppPasswords: {
      lexicon: 1,
      id: "com.atproto.server.listAppPasswords",
      defs: {
        main: {
          type: "query",
          description: "List all App Passwords.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["passwords"],
              properties: {
                passwords: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.listAppPasswords#appPassword"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "AccountTakedown"
            }
          ]
        },
        appPassword: {
          type: "object",
          required: ["name", "createdAt"],
          properties: {
            name: {
              type: "string"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            privileged: {
              type: "boolean"
            }
          }
        }
      }
    },
    ComAtprotoServerRefreshSession: {
      lexicon: 1,
      id: "com.atproto.server.refreshSession",
      defs: {
        main: {
          type: "procedure",
          description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["accessJwt", "refreshJwt", "handle", "did"],
              properties: {
                accessJwt: {
                  type: "string"
                },
                refreshJwt: {
                  type: "string"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                didDoc: {
                  type: "unknown"
                },
                active: {
                  type: "boolean"
                },
                status: {
                  type: "string",
                  description: "Hosting status of the account. If not specified, then assume 'active'.",
                  knownValues: ["takendown", "suspended", "deactivated"]
                }
              }
            }
          },
          errors: [
            {
              name: "AccountTakedown"
            }
          ]
        }
      }
    },
    ComAtprotoServerRequestAccountDelete: {
      lexicon: 1,
      id: "com.atproto.server.requestAccountDelete",
      defs: {
        main: {
          type: "procedure",
          description: "Initiate a user account deletion via email."
        }
      }
    },
    ComAtprotoServerRequestEmailConfirmation: {
      lexicon: 1,
      id: "com.atproto.server.requestEmailConfirmation",
      defs: {
        main: {
          type: "procedure",
          description: "Request an email with a code to confirm ownership of email."
        }
      }
    },
    ComAtprotoServerRequestEmailUpdate: {
      lexicon: 1,
      id: "com.atproto.server.requestEmailUpdate",
      defs: {
        main: {
          type: "procedure",
          description: "Request a token in order to update email.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["tokenRequired"],
              properties: {
                tokenRequired: {
                  type: "boolean"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerRequestPasswordReset: {
      lexicon: 1,
      id: "com.atproto.server.requestPasswordReset",
      defs: {
        main: {
          type: "procedure",
          description: "Initiate a user account password reset via email.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["email"],
              properties: {
                email: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerReserveSigningKey: {
      lexicon: 1,
      id: "com.atproto.server.reserveSigningKey",
      defs: {
        main: {
          type: "procedure",
          description: "Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID to reserve a key for."
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["signingKey"],
              properties: {
                signingKey: {
                  type: "string",
                  description: "The public key for the reserved signing key, in did:key serialization."
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerResetPassword: {
      lexicon: 1,
      id: "com.atproto.server.resetPassword",
      defs: {
        main: {
          type: "procedure",
          description: "Reset a user account password using a token.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["token", "password"],
              properties: {
                token: {
                  type: "string"
                },
                password: {
                  type: "string"
                }
              }
            }
          },
          errors: [
            {
              name: "ExpiredToken"
            },
            {
              name: "InvalidToken"
            }
          ]
        }
      }
    },
    ComAtprotoServerRevokeAppPassword: {
      lexicon: 1,
      id: "com.atproto.server.revokeAppPassword",
      defs: {
        main: {
          type: "procedure",
          description: "Revoke an App Password by name.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoServerUpdateEmail: {
      lexicon: 1,
      id: "com.atproto.server.updateEmail",
      defs: {
        main: {
          type: "procedure",
          description: "Update an account's email.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["email"],
              properties: {
                email: {
                  type: "string"
                },
                emailAuthFactor: {
                  type: "boolean"
                },
                token: {
                  type: "string",
                  description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
                }
              }
            }
          },
          errors: [
            {
              name: "ExpiredToken"
            },
            {
              name: "InvalidToken"
            },
            {
              name: "TokenRequired"
            }
          ]
        }
      }
    },
    ComAtprotoSyncGetBlob: {
      lexicon: 1,
      id: "com.atproto.sync.getBlob",
      defs: {
        main: {
          type: "query",
          description: "Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.",
          parameters: {
            type: "params",
            required: ["did", "cid"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the account."
              },
              cid: {
                type: "string",
                format: "cid",
                description: "The CID of the blob to fetch"
              }
            }
          },
          output: {
            encoding: "*/*"
          },
          errors: [
            {
              name: "BlobNotFound"
            },
            {
              name: "RepoNotFound"
            },
            {
              name: "RepoTakendown"
            },
            {
              name: "RepoSuspended"
            },
            {
              name: "RepoDeactivated"
            }
          ]
        }
      }
    },
    ComAtprotoSyncGetBlocks: {
      lexicon: 1,
      id: "com.atproto.sync.getBlocks",
      defs: {
        main: {
          type: "query",
          description: "Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.",
          parameters: {
            type: "params",
            required: ["did", "cids"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the repo."
              },
              cids: {
                type: "array",
                items: {
                  type: "string",
                  format: "cid"
                }
              }
            }
          },
          output: {
            encoding: "application/vnd.ipld.car"
          },
          errors: [
            {
              name: "BlockNotFound"
            },
            {
              name: "RepoNotFound"
            },
            {
              name: "RepoTakendown"
            },
            {
              name: "RepoSuspended"
            },
            {
              name: "RepoDeactivated"
            }
          ]
        }
      }
    },
    ComAtprotoSyncGetCheckout: {
      lexicon: 1,
      id: "com.atproto.sync.getCheckout",
      defs: {
        main: {
          type: "query",
          description: "DEPRECATED - please use com.atproto.sync.getRepo instead",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the repo."
              }
            }
          },
          output: {
            encoding: "application/vnd.ipld.car"
          }
        }
      }
    },
    ComAtprotoSyncGetHead: {
      lexicon: 1,
      id: "com.atproto.sync.getHead",
      defs: {
        main: {
          type: "query",
          description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the repo."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["root"],
              properties: {
                root: {
                  type: "string",
                  format: "cid"
                }
              }
            }
          },
          errors: [
            {
              name: "HeadNotFound"
            }
          ]
        }
      }
    },
    ComAtprotoSyncGetLatestCommit: {
      lexicon: 1,
      id: "com.atproto.sync.getLatestCommit",
      defs: {
        main: {
          type: "query",
          description: "Get the current commit CID & revision of the specified repo. Does not require auth.",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the repo."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["cid", "rev"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                rev: {
                  type: "string"
                }
              }
            }
          },
          errors: [
            {
              name: "RepoNotFound"
            },
            {
              name: "RepoTakendown"
            },
            {
              name: "RepoSuspended"
            },
            {
              name: "RepoDeactivated"
            }
          ]
        }
      }
    },
    ComAtprotoSyncGetRecord: {
      lexicon: 1,
      id: "com.atproto.sync.getRecord",
      defs: {
        main: {
          type: "query",
          description: "Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.",
          parameters: {
            type: "params",
            required: ["did", "collection", "rkey"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the repo."
              },
              collection: {
                type: "string",
                format: "nsid"
              },
              rkey: {
                type: "string",
                description: "Record Key"
              },
              commit: {
                type: "string",
                format: "cid",
                description: "DEPRECATED: referenced a repo commit by CID, and retrieved record as of that commit"
              }
            }
          },
          output: {
            encoding: "application/vnd.ipld.car"
          },
          errors: [
            {
              name: "RecordNotFound"
            },
            {
              name: "RepoNotFound"
            },
            {
              name: "RepoTakendown"
            },
            {
              name: "RepoSuspended"
            },
            {
              name: "RepoDeactivated"
            }
          ]
        }
      }
    },
    ComAtprotoSyncGetRepo: {
      lexicon: 1,
      id: "com.atproto.sync.getRepo",
      defs: {
        main: {
          type: "query",
          description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the repo."
              },
              since: {
                type: "string",
                description: "The revision ('rev') of the repo to create a diff from."
              }
            }
          },
          output: {
            encoding: "application/vnd.ipld.car"
          },
          errors: [
            {
              name: "RepoNotFound"
            },
            {
              name: "RepoTakendown"
            },
            {
              name: "RepoSuspended"
            },
            {
              name: "RepoDeactivated"
            }
          ]
        }
      }
    },
    ComAtprotoSyncGetRepoStatus: {
      lexicon: 1,
      id: "com.atproto.sync.getRepoStatus",
      defs: {
        main: {
          type: "query",
          description: "Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the repo."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did", "active"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                active: {
                  type: "boolean"
                },
                status: {
                  type: "string",
                  description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                  knownValues: ["takendown", "suspended", "deactivated"]
                },
                rev: {
                  type: "string",
                  description: "Optional field, the current rev of the repo, if active=true"
                }
              }
            }
          },
          errors: [
            {
              name: "RepoNotFound"
            }
          ]
        }
      }
    },
    ComAtprotoSyncListBlobs: {
      lexicon: 1,
      id: "com.atproto.sync.listBlobs",
      defs: {
        main: {
          type: "query",
          description: "List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did",
                description: "The DID of the repo."
              },
              since: {
                type: "string",
                description: "Optional revision of the repo to list blobs since."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 1e3,
                default: 500
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["cids"],
              properties: {
                cursor: {
                  type: "string"
                },
                cids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "RepoNotFound"
            },
            {
              name: "RepoTakendown"
            },
            {
              name: "RepoSuspended"
            },
            {
              name: "RepoDeactivated"
            }
          ]
        }
      }
    },
    ComAtprotoSyncListRepos: {
      lexicon: 1,
      id: "com.atproto.sync.listRepos",
      defs: {
        main: {
          type: "query",
          description: "Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 1e3,
                default: 500
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["repos"],
              properties: {
                cursor: {
                  type: "string"
                },
                repos: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.sync.listRepos#repo"
                  }
                }
              }
            }
          }
        },
        repo: {
          type: "object",
          required: ["did", "head", "rev"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            head: {
              type: "string",
              format: "cid",
              description: "Current repo commit CID"
            },
            rev: {
              type: "string"
            },
            active: {
              type: "boolean"
            },
            status: {
              type: "string",
              description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
              knownValues: ["takendown", "suspended", "deactivated"]
            }
          }
        }
      }
    },
    ComAtprotoSyncNotifyOfUpdate: {
      lexicon: 1,
      id: "com.atproto.sync.notifyOfUpdate",
      defs: {
        main: {
          type: "procedure",
          description: "Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["hostname"],
              properties: {
                hostname: {
                  type: "string",
                  description: "Hostname of the current service (usually a PDS) that is notifying of update."
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoSyncRequestCrawl: {
      lexicon: 1,
      id: "com.atproto.sync.requestCrawl",
      defs: {
        main: {
          type: "procedure",
          description: "Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["hostname"],
              properties: {
                hostname: {
                  type: "string",
                  description: "Hostname of the current service (eg, PDS) that is requesting to be crawled."
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoSyncSubscribeRepos: {
      lexicon: 1,
      id: "com.atproto.sync.subscribeRepos",
      defs: {
        main: {
          type: "subscription",
          description: "Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.",
          parameters: {
            type: "params",
            properties: {
              cursor: {
                type: "integer",
                description: "The last known event seq number to backfill from."
              }
            }
          },
          message: {
            schema: {
              type: "union",
              refs: [
                "lex:com.atproto.sync.subscribeRepos#commit",
                "lex:com.atproto.sync.subscribeRepos#identity",
                "lex:com.atproto.sync.subscribeRepos#account",
                "lex:com.atproto.sync.subscribeRepos#handle",
                "lex:com.atproto.sync.subscribeRepos#migrate",
                "lex:com.atproto.sync.subscribeRepos#tombstone",
                "lex:com.atproto.sync.subscribeRepos#info"
              ]
            }
          },
          errors: [
            {
              name: "FutureCursor"
            },
            {
              name: "ConsumerTooSlow",
              description: "If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection."
            }
          ]
        },
        commit: {
          type: "object",
          description: "Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.",
          required: [
            "seq",
            "rebase",
            "tooBig",
            "repo",
            "commit",
            "rev",
            "since",
            "blocks",
            "ops",
            "blobs",
            "time"
          ],
          nullable: ["prev", "since"],
          properties: {
            seq: {
              type: "integer",
              description: "The stream sequence number of this message."
            },
            rebase: {
              type: "boolean",
              description: "DEPRECATED -- unused"
            },
            tooBig: {
              type: "boolean",
              description: "Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data."
            },
            repo: {
              type: "string",
              format: "did",
              description: "The repo this event comes from."
            },
            commit: {
              type: "cid-link",
              description: "Repo commit object CID."
            },
            prev: {
              type: "cid-link",
              description: "DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability."
            },
            rev: {
              type: "string",
              description: "The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event."
            },
            since: {
              type: "string",
              description: "The rev of the last emitted commit from this repo (if any)."
            },
            blocks: {
              type: "bytes",
              description: "CAR file containing relevant blocks, as a diff since the previous repo state.",
              maxLength: 1e6
            },
            ops: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.sync.subscribeRepos#repoOp",
                description: "List of repo mutation operations in this commit (eg, records created, updated, or deleted)."
              },
              maxLength: 200
            },
            blobs: {
              type: "array",
              items: {
                type: "cid-link",
                description: "List of new blobs (by CID) referenced by records in this commit."
              }
            },
            time: {
              type: "string",
              format: "datetime",
              description: "Timestamp of when this message was originally broadcast."
            }
          }
        },
        identity: {
          type: "object",
          description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
          required: ["seq", "did", "time"],
          properties: {
            seq: {
              type: "integer"
            },
            did: {
              type: "string",
              format: "did"
            },
            time: {
              type: "string",
              format: "datetime"
            },
            handle: {
              type: "string",
              format: "handle",
              description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details."
            }
          }
        },
        account: {
          type: "object",
          description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.",
          required: ["seq", "did", "time", "active"],
          properties: {
            seq: {
              type: "integer"
            },
            did: {
              type: "string",
              format: "did"
            },
            time: {
              type: "string",
              format: "datetime"
            },
            active: {
              type: "boolean",
              description: "Indicates that the account has a repository which can be fetched from the host that emitted this event."
            },
            status: {
              type: "string",
              description: "If active=false, this optional field indicates a reason for why the account is not active.",
              knownValues: ["takendown", "suspended", "deleted", "deactivated"]
            }
          }
        },
        handle: {
          type: "object",
          description: "DEPRECATED -- Use #identity event instead",
          required: ["seq", "did", "handle", "time"],
          properties: {
            seq: {
              type: "integer"
            },
            did: {
              type: "string",
              format: "did"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            time: {
              type: "string",
              format: "datetime"
            }
          }
        },
        migrate: {
          type: "object",
          description: "DEPRECATED -- Use #account event instead",
          required: ["seq", "did", "migrateTo", "time"],
          nullable: ["migrateTo"],
          properties: {
            seq: {
              type: "integer"
            },
            did: {
              type: "string",
              format: "did"
            },
            migrateTo: {
              type: "string"
            },
            time: {
              type: "string",
              format: "datetime"
            }
          }
        },
        tombstone: {
          type: "object",
          description: "DEPRECATED -- Use #account event instead",
          required: ["seq", "did", "time"],
          properties: {
            seq: {
              type: "integer"
            },
            did: {
              type: "string",
              format: "did"
            },
            time: {
              type: "string",
              format: "datetime"
            }
          }
        },
        info: {
          type: "object",
          required: ["name"],
          properties: {
            name: {
              type: "string",
              knownValues: ["OutdatedCursor"]
            },
            message: {
              type: "string"
            }
          }
        },
        repoOp: {
          type: "object",
          description: "A repo operation, ie a mutation of a single record.",
          required: ["action", "path", "cid"],
          nullable: ["cid"],
          properties: {
            action: {
              type: "string",
              knownValues: ["create", "update", "delete"]
            },
            path: {
              type: "string"
            },
            cid: {
              type: "cid-link",
              description: "For creates and updates, the new record CID. For deletions, null."
            }
          }
        }
      }
    },
    ComAtprotoTempAddReservedHandle: {
      lexicon: 1,
      id: "com.atproto.temp.addReservedHandle",
      defs: {
        main: {
          type: "procedure",
          description: "Add a handle to the set of reserved handles.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["handle"],
              properties: {
                handle: {
                  type: "string"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {}
            }
          }
        }
      }
    },
    ComAtprotoTempCheckSignupQueue: {
      lexicon: 1,
      id: "com.atproto.temp.checkSignupQueue",
      defs: {
        main: {
          type: "query",
          description: "Check accounts location in signup queue.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["activated"],
              properties: {
                activated: {
                  type: "boolean"
                },
                placeInQueue: {
                  type: "integer"
                },
                estimatedTimeMs: {
                  type: "integer"
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoTempFetchLabels: {
      lexicon: 1,
      id: "com.atproto.temp.fetchLabels",
      defs: {
        main: {
          type: "query",
          description: "DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.",
          parameters: {
            type: "params",
            properties: {
              since: {
                type: "integer"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 250,
                default: 50
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["labels"],
              properties: {
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            }
          }
        }
      }
    },
    ComAtprotoTempRequestPhoneVerification: {
      lexicon: 1,
      id: "com.atproto.temp.requestPhoneVerification",
      defs: {
        main: {
          type: "procedure",
          description: "Request a verification code to be sent to the supplied phone number",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["phoneNumber"],
              properties: {
                phoneNumber: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    AppBskyActorDefs: {
      lexicon: 1,
      id: "app.bsky.actor.defs",
      defs: {
        profileViewBasic: {
          type: "object",
          required: ["did", "handle"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            displayName: {
              type: "string",
              maxGraphemes: 64,
              maxLength: 640
            },
            avatar: {
              type: "string",
              format: "uri"
            },
            associated: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileAssociated"
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#viewerState"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            createdAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        profileView: {
          type: "object",
          required: ["did", "handle"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            displayName: {
              type: "string",
              maxGraphemes: 64,
              maxLength: 640
            },
            description: {
              type: "string",
              maxGraphemes: 256,
              maxLength: 2560
            },
            avatar: {
              type: "string",
              format: "uri"
            },
            associated: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileAssociated"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#viewerState"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            }
          }
        },
        profileViewDetailed: {
          type: "object",
          required: ["did", "handle"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            displayName: {
              type: "string",
              maxGraphemes: 64,
              maxLength: 640
            },
            description: {
              type: "string",
              maxGraphemes: 256,
              maxLength: 2560
            },
            avatar: {
              type: "string",
              format: "uri"
            },
            banner: {
              type: "string",
              format: "uri"
            },
            followersCount: {
              type: "integer"
            },
            followsCount: {
              type: "integer"
            },
            postsCount: {
              type: "integer"
            },
            associated: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileAssociated"
            },
            joinedViaStarterPack: {
              type: "ref",
              ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#viewerState"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            pinnedPost: {
              type: "ref",
              ref: "lex:com.atproto.repo.strongRef"
            }
          }
        },
        profileAssociated: {
          type: "object",
          properties: {
            lists: {
              type: "integer"
            },
            feedgens: {
              type: "integer"
            },
            starterPacks: {
              type: "integer"
            },
            labeler: {
              type: "boolean"
            },
            chat: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileAssociatedChat"
            }
          }
        },
        profileAssociatedChat: {
          type: "object",
          required: ["allowIncoming"],
          properties: {
            allowIncoming: {
              type: "string",
              knownValues: ["all", "none", "following"]
            }
          }
        },
        viewerState: {
          type: "object",
          description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
          properties: {
            muted: {
              type: "boolean"
            },
            mutedByList: {
              type: "ref",
              ref: "lex:app.bsky.graph.defs#listViewBasic"
            },
            blockedBy: {
              type: "boolean"
            },
            blocking: {
              type: "string",
              format: "at-uri"
            },
            blockingByList: {
              type: "ref",
              ref: "lex:app.bsky.graph.defs#listViewBasic"
            },
            following: {
              type: "string",
              format: "at-uri"
            },
            followedBy: {
              type: "string",
              format: "at-uri"
            },
            knownFollowers: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#knownFollowers"
            }
          }
        },
        knownFollowers: {
          type: "object",
          description: "The subject's followers whom you also follow",
          required: ["count", "followers"],
          properties: {
            count: {
              type: "integer"
            },
            followers: {
              type: "array",
              minLength: 0,
              maxLength: 5,
              items: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewBasic"
              }
            }
          }
        },
        preferences: {
          type: "array",
          items: {
            type: "union",
            refs: [
              "lex:app.bsky.actor.defs#adultContentPref",
              "lex:app.bsky.actor.defs#contentLabelPref",
              "lex:app.bsky.actor.defs#savedFeedsPref",
              "lex:app.bsky.actor.defs#savedFeedsPrefV2",
              "lex:app.bsky.actor.defs#personalDetailsPref",
              "lex:app.bsky.actor.defs#feedViewPref",
              "lex:app.bsky.actor.defs#threadViewPref",
              "lex:app.bsky.actor.defs#interestsPref",
              "lex:app.bsky.actor.defs#mutedWordsPref",
              "lex:app.bsky.actor.defs#hiddenPostsPref",
              "lex:app.bsky.actor.defs#bskyAppStatePref",
              "lex:app.bsky.actor.defs#labelersPref"
            ]
          }
        },
        adultContentPref: {
          type: "object",
          required: ["enabled"],
          properties: {
            enabled: {
              type: "boolean",
              default: !1
            }
          }
        },
        contentLabelPref: {
          type: "object",
          required: ["label", "visibility"],
          properties: {
            labelerDid: {
              type: "string",
              description: "Which labeler does this preference apply to? If undefined, applies globally.",
              format: "did"
            },
            label: {
              type: "string"
            },
            visibility: {
              type: "string",
              knownValues: ["ignore", "show", "warn", "hide"]
            }
          }
        },
        savedFeed: {
          type: "object",
          required: ["id", "type", "value", "pinned"],
          properties: {
            id: {
              type: "string"
            },
            type: {
              type: "string",
              knownValues: ["feed", "list", "timeline"]
            },
            value: {
              type: "string"
            },
            pinned: {
              type: "boolean"
            }
          }
        },
        savedFeedsPrefV2: {
          type: "object",
          required: ["items"],
          properties: {
            items: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#savedFeed"
              }
            }
          }
        },
        savedFeedsPref: {
          type: "object",
          required: ["pinned", "saved"],
          properties: {
            pinned: {
              type: "array",
              items: {
                type: "string",
                format: "at-uri"
              }
            },
            saved: {
              type: "array",
              items: {
                type: "string",
                format: "at-uri"
              }
            },
            timelineIndex: {
              type: "integer"
            }
          }
        },
        personalDetailsPref: {
          type: "object",
          properties: {
            birthDate: {
              type: "string",
              format: "datetime",
              description: "The birth date of account owner."
            }
          }
        },
        feedViewPref: {
          type: "object",
          required: ["feed"],
          properties: {
            feed: {
              type: "string",
              description: "The URI of the feed, or an identifier which describes the feed."
            },
            hideReplies: {
              type: "boolean",
              description: "Hide replies in the feed."
            },
            hideRepliesByUnfollowed: {
              type: "boolean",
              description: "Hide replies in the feed if they are not by followed users.",
              default: !0
            },
            hideRepliesByLikeCount: {
              type: "integer",
              description: "Hide replies in the feed if they do not have this number of likes."
            },
            hideReposts: {
              type: "boolean",
              description: "Hide reposts in the feed."
            },
            hideQuotePosts: {
              type: "boolean",
              description: "Hide quote posts in the feed."
            }
          }
        },
        threadViewPref: {
          type: "object",
          properties: {
            sort: {
              type: "string",
              description: "Sorting mode for threads.",
              knownValues: [
                "oldest",
                "newest",
                "most-likes",
                "random",
                "hotness"
              ]
            },
            prioritizeFollowedUsers: {
              type: "boolean",
              description: "Show followed users at the top of all replies."
            }
          }
        },
        interestsPref: {
          type: "object",
          required: ["tags"],
          properties: {
            tags: {
              type: "array",
              maxLength: 100,
              items: {
                type: "string",
                maxLength: 640,
                maxGraphemes: 64
              },
              description: "A list of tags which describe the account owner's interests gathered during onboarding."
            }
          }
        },
        mutedWordTarget: {
          type: "string",
          knownValues: ["content", "tag"],
          maxLength: 640,
          maxGraphemes: 64
        },
        mutedWord: {
          type: "object",
          description: "A word that the account owner has muted.",
          required: ["value", "targets"],
          properties: {
            id: {
              type: "string"
            },
            value: {
              type: "string",
              description: "The muted word itself.",
              maxLength: 1e4,
              maxGraphemes: 1e3
            },
            targets: {
              type: "array",
              description: "The intended targets of the muted word.",
              items: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#mutedWordTarget"
              }
            },
            actorTarget: {
              type: "string",
              description: "Groups of users to apply the muted word to. If undefined, applies to all users.",
              knownValues: ["all", "exclude-following"],
              default: "all"
            },
            expiresAt: {
              type: "string",
              format: "datetime",
              description: "The date and time at which the muted word will expire and no longer be applied."
            }
          }
        },
        mutedWordsPref: {
          type: "object",
          required: ["items"],
          properties: {
            items: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#mutedWord"
              },
              description: "A list of words the account owner has muted."
            }
          }
        },
        hiddenPostsPref: {
          type: "object",
          required: ["items"],
          properties: {
            items: {
              type: "array",
              items: {
                type: "string",
                format: "at-uri"
              },
              description: "A list of URIs of posts the account owner has hidden."
            }
          }
        },
        labelersPref: {
          type: "object",
          required: ["labelers"],
          properties: {
            labelers: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#labelerPrefItem"
              }
            }
          }
        },
        labelerPrefItem: {
          type: "object",
          required: ["did"],
          properties: {
            did: {
              type: "string",
              format: "did"
            }
          }
        },
        bskyAppStatePref: {
          description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.",
          type: "object",
          properties: {
            activeProgressGuide: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#bskyAppProgressGuide"
            },
            queuedNudges: {
              description: "An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.",
              type: "array",
              maxLength: 1e3,
              items: {
                type: "string",
                maxLength: 100
              }
            },
            nuxs: {
              description: "Storage for NUXs the user has encountered.",
              type: "array",
              maxLength: 100,
              items: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#nux"
              }
            }
          }
        },
        bskyAppProgressGuide: {
          description: "If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.",
          type: "object",
          required: ["guide"],
          properties: {
            guide: {
              type: "string",
              maxLength: 100
            }
          }
        },
        nux: {
          type: "object",
          description: "A new user experiences (NUX) storage object",
          required: ["id", "completed"],
          properties: {
            id: {
              type: "string",
              maxLength: 100
            },
            completed: {
              type: "boolean",
              default: !1
            },
            data: {
              description: "Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.",
              type: "string",
              maxLength: 3e3,
              maxGraphemes: 300
            },
            expiresAt: {
              type: "string",
              format: "datetime",
              description: "The date and time at which the NUX will expire and should be considered completed."
            }
          }
        }
      }
    },
    AppBskyActorGetPreferences: {
      lexicon: 1,
      id: "app.bsky.actor.getPreferences",
      defs: {
        main: {
          type: "query",
          description: "Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.",
          parameters: {
            type: "params",
            properties: {}
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["preferences"],
              properties: {
                preferences: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#preferences"
                }
              }
            }
          }
        }
      }
    },
    AppBskyActorGetProfile: {
      lexicon: 1,
      id: "app.bsky.actor.getProfile",
      defs: {
        main: {
          type: "query",
          description: "Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier",
                description: "Handle or DID of account to fetch profile of."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileViewDetailed"
            }
          }
        }
      }
    },
    AppBskyActorGetProfiles: {
      lexicon: 1,
      id: "app.bsky.actor.getProfiles",
      defs: {
        main: {
          type: "query",
          description: "Get detailed profile views of multiple actors.",
          parameters: {
            type: "params",
            required: ["actors"],
            properties: {
              actors: {
                type: "array",
                items: {
                  type: "string",
                  format: "at-identifier"
                },
                maxLength: 25
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["profiles"],
              properties: {
                profiles: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyActorGetSuggestions: {
      lexicon: 1,
      id: "app.bsky.actor.getSuggestions",
      defs: {
        main: {
          type: "query",
          description: "Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["actors"],
              properties: {
                cursor: {
                  type: "string"
                },
                actors: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyActorProfile: {
      lexicon: 1,
      id: "app.bsky.actor.profile",
      defs: {
        main: {
          type: "record",
          description: "A declaration of a Bluesky account profile.",
          key: "literal:self",
          record: {
            type: "object",
            properties: {
              displayName: {
                type: "string",
                maxGraphemes: 64,
                maxLength: 640
              },
              description: {
                type: "string",
                description: "Free-form profile description text.",
                maxGraphemes: 256,
                maxLength: 2560
              },
              avatar: {
                type: "blob",
                description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
                accept: ["image/png", "image/jpeg"],
                maxSize: 1e6
              },
              banner: {
                type: "blob",
                description: "Larger horizontal image to display behind profile view.",
                accept: ["image/png", "image/jpeg"],
                maxSize: 1e6
              },
              labels: {
                type: "union",
                description: "Self-label values, specific to the Bluesky application, on the overall account.",
                refs: ["lex:com.atproto.label.defs#selfLabels"]
              },
              joinedViaStarterPack: {
                type: "ref",
                ref: "lex:com.atproto.repo.strongRef"
              },
              pinnedPost: {
                type: "ref",
                ref: "lex:com.atproto.repo.strongRef"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyActorPutPreferences: {
      lexicon: 1,
      id: "app.bsky.actor.putPreferences",
      defs: {
        main: {
          type: "procedure",
          description: "Set the private preferences attached to the account.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["preferences"],
              properties: {
                preferences: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#preferences"
                }
              }
            }
          }
        }
      }
    },
    AppBskyActorSearchActors: {
      lexicon: 1,
      id: "app.bsky.actor.searchActors",
      defs: {
        main: {
          type: "query",
          description: "Find actors (profiles) matching search criteria. Does not require auth.",
          parameters: {
            type: "params",
            properties: {
              term: {
                type: "string",
                description: "DEPRECATED: use 'q' instead."
              },
              q: {
                type: "string",
                description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 25
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["actors"],
              properties: {
                cursor: {
                  type: "string"
                },
                actors: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyActorSearchActorsTypeahead: {
      lexicon: 1,
      id: "app.bsky.actor.searchActorsTypeahead",
      defs: {
        main: {
          type: "query",
          description: "Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.",
          parameters: {
            type: "params",
            properties: {
              term: {
                type: "string",
                description: "DEPRECATED: use 'q' instead."
              },
              q: {
                type: "string",
                description: "Search query prefix; not a full query string."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 10
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["actors"],
              properties: {
                actors: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileViewBasic"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyEmbedDefs: {
      lexicon: 1,
      id: "app.bsky.embed.defs",
      defs: {
        aspectRatio: {
          type: "object",
          description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.",
          required: ["width", "height"],
          properties: {
            width: {
              type: "integer",
              minimum: 1
            },
            height: {
              type: "integer",
              minimum: 1
            }
          }
        }
      }
    },
    AppBskyEmbedExternal: {
      lexicon: 1,
      id: "app.bsky.embed.external",
      defs: {
        main: {
          type: "object",
          description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
          required: ["external"],
          properties: {
            external: {
              type: "ref",
              ref: "lex:app.bsky.embed.external#external"
            }
          }
        },
        external: {
          type: "object",
          required: ["uri", "title", "description"],
          properties: {
            uri: {
              type: "string",
              format: "uri"
            },
            title: {
              type: "string"
            },
            description: {
              type: "string"
            },
            thumb: {
              type: "blob",
              accept: ["image/*"],
              maxSize: 1e6
            }
          }
        },
        view: {
          type: "object",
          required: ["external"],
          properties: {
            external: {
              type: "ref",
              ref: "lex:app.bsky.embed.external#viewExternal"
            }
          }
        },
        viewExternal: {
          type: "object",
          required: ["uri", "title", "description"],
          properties: {
            uri: {
              type: "string",
              format: "uri"
            },
            title: {
              type: "string"
            },
            description: {
              type: "string"
            },
            thumb: {
              type: "string",
              format: "uri"
            }
          }
        }
      }
    },
    AppBskyEmbedImages: {
      lexicon: 1,
      id: "app.bsky.embed.images",
      description: "A set of images embedded in a Bluesky record (eg, a post).",
      defs: {
        main: {
          type: "object",
          required: ["images"],
          properties: {
            images: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.embed.images#image"
              },
              maxLength: 4
            }
          }
        },
        image: {
          type: "object",
          required: ["image", "alt"],
          properties: {
            image: {
              type: "blob",
              accept: ["image/*"],
              maxSize: 1e6
            },
            alt: {
              type: "string",
              description: "Alt text description of the image, for accessibility."
            },
            aspectRatio: {
              type: "ref",
              ref: "lex:app.bsky.embed.defs#aspectRatio"
            }
          }
        },
        view: {
          type: "object",
          required: ["images"],
          properties: {
            images: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.embed.images#viewImage"
              },
              maxLength: 4
            }
          }
        },
        viewImage: {
          type: "object",
          required: ["thumb", "fullsize", "alt"],
          properties: {
            thumb: {
              type: "string",
              format: "uri",
              description: "Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View."
            },
            fullsize: {
              type: "string",
              format: "uri",
              description: "Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View."
            },
            alt: {
              type: "string",
              description: "Alt text description of the image, for accessibility."
            },
            aspectRatio: {
              type: "ref",
              ref: "lex:app.bsky.embed.defs#aspectRatio"
            }
          }
        }
      }
    },
    AppBskyEmbedRecord: {
      lexicon: 1,
      id: "app.bsky.embed.record",
      description: "A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.",
      defs: {
        main: {
          type: "object",
          required: ["record"],
          properties: {
            record: {
              type: "ref",
              ref: "lex:com.atproto.repo.strongRef"
            }
          }
        },
        view: {
          type: "object",
          required: ["record"],
          properties: {
            record: {
              type: "union",
              refs: [
                "lex:app.bsky.embed.record#viewRecord",
                "lex:app.bsky.embed.record#viewNotFound",
                "lex:app.bsky.embed.record#viewBlocked",
                "lex:app.bsky.embed.record#viewDetached",
                "lex:app.bsky.feed.defs#generatorView",
                "lex:app.bsky.graph.defs#listView",
                "lex:app.bsky.labeler.defs#labelerView",
                "lex:app.bsky.graph.defs#starterPackViewBasic"
              ]
            }
          }
        },
        viewRecord: {
          type: "object",
          required: ["uri", "cid", "author", "value", "indexedAt"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            author: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileViewBasic"
            },
            value: {
              type: "unknown",
              description: "The record data itself."
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            replyCount: {
              type: "integer"
            },
            repostCount: {
              type: "integer"
            },
            likeCount: {
              type: "integer"
            },
            quoteCount: {
              type: "integer"
            },
            embeds: {
              type: "array",
              items: {
                type: "union",
                refs: [
                  "lex:app.bsky.embed.images#view",
                  "lex:app.bsky.embed.video#view",
                  "lex:app.bsky.embed.external#view",
                  "lex:app.bsky.embed.record#view",
                  "lex:app.bsky.embed.recordWithMedia#view"
                ]
              }
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        viewNotFound: {
          type: "object",
          required: ["uri", "notFound"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            notFound: {
              type: "boolean",
              const: !0
            }
          }
        },
        viewBlocked: {
          type: "object",
          required: ["uri", "blocked", "author"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            blocked: {
              type: "boolean",
              const: !0
            },
            author: {
              type: "ref",
              ref: "lex:app.bsky.feed.defs#blockedAuthor"
            }
          }
        },
        viewDetached: {
          type: "object",
          required: ["uri", "detached"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            detached: {
              type: "boolean",
              const: !0
            }
          }
        }
      }
    },
    AppBskyEmbedRecordWithMedia: {
      lexicon: 1,
      id: "app.bsky.embed.recordWithMedia",
      description: "A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.",
      defs: {
        main: {
          type: "object",
          required: ["record", "media"],
          properties: {
            record: {
              type: "ref",
              ref: "lex:app.bsky.embed.record"
            },
            media: {
              type: "union",
              refs: [
                "lex:app.bsky.embed.images",
                "lex:app.bsky.embed.video",
                "lex:app.bsky.embed.external"
              ]
            }
          }
        },
        view: {
          type: "object",
          required: ["record", "media"],
          properties: {
            record: {
              type: "ref",
              ref: "lex:app.bsky.embed.record#view"
            },
            media: {
              type: "union",
              refs: [
                "lex:app.bsky.embed.images#view",
                "lex:app.bsky.embed.video#view",
                "lex:app.bsky.embed.external#view"
              ]
            }
          }
        }
      }
    },
    AppBskyEmbedVideo: {
      lexicon: 1,
      id: "app.bsky.embed.video",
      description: "A video embedded in a Bluesky record (eg, a post).",
      defs: {
        main: {
          type: "object",
          required: ["video"],
          properties: {
            video: {
              type: "blob",
              accept: ["video/mp4"],
              maxSize: 5e7
            },
            captions: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.embed.video#caption"
              },
              maxLength: 20
            },
            alt: {
              type: "string",
              description: "Alt text description of the video, for accessibility.",
              maxGraphemes: 1e3,
              maxLength: 1e4
            },
            aspectRatio: {
              type: "ref",
              ref: "lex:app.bsky.embed.defs#aspectRatio"
            }
          }
        },
        caption: {
          type: "object",
          required: ["lang", "file"],
          properties: {
            lang: {
              type: "string",
              format: "language"
            },
            file: {
              type: "blob",
              accept: ["text/vtt"],
              maxSize: 2e4
            }
          }
        },
        view: {
          type: "object",
          required: ["cid", "playlist"],
          properties: {
            cid: {
              type: "string",
              format: "cid"
            },
            playlist: {
              type: "string",
              format: "uri"
            },
            thumbnail: {
              type: "string",
              format: "uri"
            },
            alt: {
              type: "string",
              maxGraphemes: 1e3,
              maxLength: 1e4
            },
            aspectRatio: {
              type: "ref",
              ref: "lex:app.bsky.embed.defs#aspectRatio"
            }
          }
        }
      }
    },
    AppBskyFeedDefs: {
      lexicon: 1,
      id: "app.bsky.feed.defs",
      defs: {
        postView: {
          type: "object",
          required: ["uri", "cid", "author", "record", "indexedAt"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            author: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileViewBasic"
            },
            record: {
              type: "unknown"
            },
            embed: {
              type: "union",
              refs: [
                "lex:app.bsky.embed.images#view",
                "lex:app.bsky.embed.video#view",
                "lex:app.bsky.embed.external#view",
                "lex:app.bsky.embed.record#view",
                "lex:app.bsky.embed.recordWithMedia#view"
              ]
            },
            replyCount: {
              type: "integer"
            },
            repostCount: {
              type: "integer"
            },
            likeCount: {
              type: "integer"
            },
            quoteCount: {
              type: "integer"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.feed.defs#viewerState"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            threadgate: {
              type: "ref",
              ref: "lex:app.bsky.feed.defs#threadgateView"
            }
          }
        },
        viewerState: {
          type: "object",
          description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
          properties: {
            repost: {
              type: "string",
              format: "at-uri"
            },
            like: {
              type: "string",
              format: "at-uri"
            },
            threadMuted: {
              type: "boolean"
            },
            replyDisabled: {
              type: "boolean"
            },
            embeddingDisabled: {
              type: "boolean"
            },
            pinned: {
              type: "boolean"
            }
          }
        },
        feedViewPost: {
          type: "object",
          required: ["post"],
          properties: {
            post: {
              type: "ref",
              ref: "lex:app.bsky.feed.defs#postView"
            },
            reply: {
              type: "ref",
              ref: "lex:app.bsky.feed.defs#replyRef"
            },
            reason: {
              type: "union",
              refs: [
                "lex:app.bsky.feed.defs#reasonRepost",
                "lex:app.bsky.feed.defs#reasonPin"
              ]
            },
            feedContext: {
              type: "string",
              description: "Context provided by feed generator that may be passed back alongside interactions.",
              maxLength: 2e3
            }
          }
        },
        replyRef: {
          type: "object",
          required: ["root", "parent"],
          properties: {
            root: {
              type: "union",
              refs: [
                "lex:app.bsky.feed.defs#postView",
                "lex:app.bsky.feed.defs#notFoundPost",
                "lex:app.bsky.feed.defs#blockedPost"
              ]
            },
            parent: {
              type: "union",
              refs: [
                "lex:app.bsky.feed.defs#postView",
                "lex:app.bsky.feed.defs#notFoundPost",
                "lex:app.bsky.feed.defs#blockedPost"
              ]
            },
            grandparentAuthor: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileViewBasic",
              description: "When parent is a reply to another post, this is the author of that post."
            }
          }
        },
        reasonRepost: {
          type: "object",
          required: ["by", "indexedAt"],
          properties: {
            by: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileViewBasic"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        reasonPin: {
          type: "object",
          properties: {}
        },
        threadViewPost: {
          type: "object",
          required: ["post"],
          properties: {
            post: {
              type: "ref",
              ref: "lex:app.bsky.feed.defs#postView"
            },
            parent: {
              type: "union",
              refs: [
                "lex:app.bsky.feed.defs#threadViewPost",
                "lex:app.bsky.feed.defs#notFoundPost",
                "lex:app.bsky.feed.defs#blockedPost"
              ]
            },
            replies: {
              type: "array",
              items: {
                type: "union",
                refs: [
                  "lex:app.bsky.feed.defs#threadViewPost",
                  "lex:app.bsky.feed.defs#notFoundPost",
                  "lex:app.bsky.feed.defs#blockedPost"
                ]
              }
            }
          }
        },
        notFoundPost: {
          type: "object",
          required: ["uri", "notFound"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            notFound: {
              type: "boolean",
              const: !0
            }
          }
        },
        blockedPost: {
          type: "object",
          required: ["uri", "blocked", "author"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            blocked: {
              type: "boolean",
              const: !0
            },
            author: {
              type: "ref",
              ref: "lex:app.bsky.feed.defs#blockedAuthor"
            }
          }
        },
        blockedAuthor: {
          type: "object",
          required: ["did"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#viewerState"
            }
          }
        },
        generatorView: {
          type: "object",
          required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            did: {
              type: "string",
              format: "did"
            },
            creator: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileView"
            },
            displayName: {
              type: "string"
            },
            description: {
              type: "string",
              maxGraphemes: 300,
              maxLength: 3e3
            },
            descriptionFacets: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.richtext.facet"
              }
            },
            avatar: {
              type: "string",
              format: "uri"
            },
            likeCount: {
              type: "integer",
              minimum: 0
            },
            acceptsInteractions: {
              type: "boolean"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.feed.defs#generatorViewerState"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        generatorViewerState: {
          type: "object",
          properties: {
            like: {
              type: "string",
              format: "at-uri"
            }
          }
        },
        skeletonFeedPost: {
          type: "object",
          required: ["post"],
          properties: {
            post: {
              type: "string",
              format: "at-uri"
            },
            reason: {
              type: "union",
              refs: [
                "lex:app.bsky.feed.defs#skeletonReasonRepost",
                "lex:app.bsky.feed.defs#skeletonReasonPin"
              ]
            },
            feedContext: {
              type: "string",
              description: "Context that will be passed through to client and may be passed to feed generator back alongside interactions.",
              maxLength: 2e3
            }
          }
        },
        skeletonReasonRepost: {
          type: "object",
          required: ["repost"],
          properties: {
            repost: {
              type: "string",
              format: "at-uri"
            }
          }
        },
        skeletonReasonPin: {
          type: "object",
          properties: {}
        },
        threadgateView: {
          type: "object",
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            record: {
              type: "unknown"
            },
            lists: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listViewBasic"
              }
            }
          }
        },
        interaction: {
          type: "object",
          properties: {
            item: {
              type: "string",
              format: "at-uri"
            },
            event: {
              type: "string",
              knownValues: [
                "app.bsky.feed.defs#requestLess",
                "app.bsky.feed.defs#requestMore",
                "app.bsky.feed.defs#clickthroughItem",
                "app.bsky.feed.defs#clickthroughAuthor",
                "app.bsky.feed.defs#clickthroughReposter",
                "app.bsky.feed.defs#clickthroughEmbed",
                "app.bsky.feed.defs#interactionSeen",
                "app.bsky.feed.defs#interactionLike",
                "app.bsky.feed.defs#interactionRepost",
                "app.bsky.feed.defs#interactionReply",
                "app.bsky.feed.defs#interactionQuote",
                "app.bsky.feed.defs#interactionShare"
              ]
            },
            feedContext: {
              type: "string",
              description: "Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.",
              maxLength: 2e3
            }
          }
        },
        requestLess: {
          type: "token",
          description: "Request that less content like the given feed item be shown in the feed"
        },
        requestMore: {
          type: "token",
          description: "Request that more content like the given feed item be shown in the feed"
        },
        clickthroughItem: {
          type: "token",
          description: "User clicked through to the feed item"
        },
        clickthroughAuthor: {
          type: "token",
          description: "User clicked through to the author of the feed item"
        },
        clickthroughReposter: {
          type: "token",
          description: "User clicked through to the reposter of the feed item"
        },
        clickthroughEmbed: {
          type: "token",
          description: "User clicked through to the embedded content of the feed item"
        },
        interactionSeen: {
          type: "token",
          description: "Feed item was seen by user"
        },
        interactionLike: {
          type: "token",
          description: "User liked the feed item"
        },
        interactionRepost: {
          type: "token",
          description: "User reposted the feed item"
        },
        interactionReply: {
          type: "token",
          description: "User replied to the feed item"
        },
        interactionQuote: {
          type: "token",
          description: "User quoted the feed item"
        },
        interactionShare: {
          type: "token",
          description: "User shared the feed item"
        }
      }
    },
    AppBskyFeedDescribeFeedGenerator: {
      lexicon: 1,
      id: "app.bsky.feed.describeFeedGenerator",
      defs: {
        main: {
          type: "query",
          description: "Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did", "feeds"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                feeds: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.describeFeedGenerator#feed"
                  }
                },
                links: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.describeFeedGenerator#links"
                }
              }
            }
          }
        },
        feed: {
          type: "object",
          required: ["uri"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            }
          }
        },
        links: {
          type: "object",
          properties: {
            privacyPolicy: {
              type: "string"
            },
            termsOfService: {
              type: "string"
            }
          }
        }
      }
    },
    AppBskyFeedGenerator: {
      lexicon: 1,
      id: "app.bsky.feed.generator",
      defs: {
        main: {
          type: "record",
          description: "Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.",
          key: "any",
          record: {
            type: "object",
            required: ["did", "displayName", "createdAt"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              displayName: {
                type: "string",
                maxGraphemes: 24,
                maxLength: 240
              },
              description: {
                type: "string",
                maxGraphemes: 300,
                maxLength: 3e3
              },
              descriptionFacets: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet"
                }
              },
              avatar: {
                type: "blob",
                accept: ["image/png", "image/jpeg"],
                maxSize: 1e6
              },
              acceptsInteractions: {
                type: "boolean",
                description: "Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions"
              },
              labels: {
                type: "union",
                description: "Self-label values",
                refs: ["lex:com.atproto.label.defs#selfLabels"]
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyFeedGetActorFeeds: {
      lexicon: 1,
      id: "app.bsky.feed.getActorFeeds",
      defs: {
        main: {
          type: "query",
          description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feeds"],
              properties: {
                cursor: {
                  type: "string"
                },
                feeds: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#generatorView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyFeedGetActorLikes: {
      lexicon: 1,
      id: "app.bsky.feed.getActorLikes",
      defs: {
        main: {
          type: "query",
          description: "Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feed"],
              properties: {
                cursor: {
                  type: "string"
                },
                feed: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "BlockedActor"
            },
            {
              name: "BlockedByActor"
            }
          ]
        }
      }
    },
    AppBskyFeedGetAuthorFeed: {
      lexicon: 1,
      id: "app.bsky.feed.getAuthorFeed",
      defs: {
        main: {
          type: "query",
          description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              },
              filter: {
                type: "string",
                description: "Combinations of post/repost types to include in response.",
                knownValues: [
                  "posts_with_replies",
                  "posts_no_replies",
                  "posts_with_media",
                  "posts_and_author_threads"
                ],
                default: "posts_with_replies"
              },
              includePins: {
                type: "boolean",
                default: !1
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feed"],
              properties: {
                cursor: {
                  type: "string"
                },
                feed: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "BlockedActor"
            },
            {
              name: "BlockedByActor"
            }
          ]
        }
      }
    },
    AppBskyFeedGetFeed: {
      lexicon: 1,
      id: "app.bsky.feed.getFeed",
      defs: {
        main: {
          type: "query",
          description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
          parameters: {
            type: "params",
            required: ["feed"],
            properties: {
              feed: {
                type: "string",
                format: "at-uri"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feed"],
              properties: {
                cursor: {
                  type: "string"
                },
                feed: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "UnknownFeed"
            }
          ]
        }
      }
    },
    AppBskyFeedGetFeedGenerator: {
      lexicon: 1,
      id: "app.bsky.feed.getFeedGenerator",
      defs: {
        main: {
          type: "query",
          description: "Get information about a feed generator. Implemented by AppView.",
          parameters: {
            type: "params",
            required: ["feed"],
            properties: {
              feed: {
                type: "string",
                format: "at-uri",
                description: "AT-URI of the feed generator record."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["view", "isOnline", "isValid"],
              properties: {
                view: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#generatorView"
                },
                isOnline: {
                  type: "boolean",
                  description: "Indicates whether the feed generator service has been online recently, or else seems to be inactive."
                },
                isValid: {
                  type: "boolean",
                  description: "Indicates whether the feed generator service is compatible with the record declaration."
                }
              }
            }
          }
        }
      }
    },
    AppBskyFeedGetFeedGenerators: {
      lexicon: 1,
      id: "app.bsky.feed.getFeedGenerators",
      defs: {
        main: {
          type: "query",
          description: "Get information about a list of feed generators.",
          parameters: {
            type: "params",
            required: ["feeds"],
            properties: {
              feeds: {
                type: "array",
                items: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feeds"],
              properties: {
                feeds: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#generatorView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyFeedGetFeedSkeleton: {
      lexicon: 1,
      id: "app.bsky.feed.getFeedSkeleton",
      defs: {
        main: {
          type: "query",
          description: "Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.",
          parameters: {
            type: "params",
            required: ["feed"],
            properties: {
              feed: {
                type: "string",
                format: "at-uri",
                description: "Reference to feed generator record describing the specific feed being requested."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feed"],
              properties: {
                cursor: {
                  type: "string"
                },
                feed: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "UnknownFeed"
            }
          ]
        }
      }
    },
    AppBskyFeedGetLikes: {
      lexicon: 1,
      id: "app.bsky.feed.getLikes",
      defs: {
        main: {
          type: "query",
          description: "Get like records which reference a subject (by AT-URI and CID).",
          parameters: {
            type: "params",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri",
                description: "AT-URI of the subject (eg, a post record)."
              },
              cid: {
                type: "string",
                format: "cid",
                description: "CID of the subject record (aka, specific version of record), to filter likes."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["uri", "likes"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                cursor: {
                  type: "string"
                },
                likes: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.getLikes#like"
                  }
                }
              }
            }
          }
        },
        like: {
          type: "object",
          required: ["indexedAt", "createdAt", "actor"],
          properties: {
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            actor: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileView"
            }
          }
        }
      }
    },
    AppBskyFeedGetListFeed: {
      lexicon: 1,
      id: "app.bsky.feed.getListFeed",
      defs: {
        main: {
          type: "query",
          description: "Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.",
          parameters: {
            type: "params",
            required: ["list"],
            properties: {
              list: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) to the list record."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feed"],
              properties: {
                cursor: {
                  type: "string"
                },
                feed: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "UnknownList"
            }
          ]
        }
      }
    },
    AppBskyFeedGetPostThread: {
      lexicon: 1,
      id: "app.bsky.feed.getPostThread",
      defs: {
        main: {
          type: "query",
          description: "Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.",
          parameters: {
            type: "params",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) to post record."
              },
              depth: {
                type: "integer",
                description: "How many levels of reply depth should be included in response.",
                default: 6,
                minimum: 0,
                maximum: 1e3
              },
              parentHeight: {
                type: "integer",
                description: "How many levels of parent (and grandparent, etc) post to include.",
                default: 80,
                minimum: 0,
                maximum: 1e3
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["thread"],
              properties: {
                thread: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#threadViewPost",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                threadgate: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#threadgateView"
                }
              }
            }
          },
          errors: [
            {
              name: "NotFound"
            }
          ]
        }
      }
    },
    AppBskyFeedGetPosts: {
      lexicon: 1,
      id: "app.bsky.feed.getPosts",
      defs: {
        main: {
          type: "query",
          description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
          parameters: {
            type: "params",
            required: ["uris"],
            properties: {
              uris: {
                type: "array",
                description: "List of post AT-URIs to return hydrated views for.",
                items: {
                  type: "string",
                  format: "at-uri"
                },
                maxLength: 25
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["posts"],
              properties: {
                posts: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#postView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyFeedGetQuotes: {
      lexicon: 1,
      id: "app.bsky.feed.getQuotes",
      defs: {
        main: {
          type: "query",
          description: "Get a list of quotes for a given post.",
          parameters: {
            type: "params",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) of post record"
              },
              cid: {
                type: "string",
                format: "cid",
                description: "If supplied, filters to quotes of specific version (by CID) of the post record."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["uri", "posts"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                cursor: {
                  type: "string"
                },
                posts: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#postView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyFeedGetRepostedBy: {
      lexicon: 1,
      id: "app.bsky.feed.getRepostedBy",
      defs: {
        main: {
          type: "query",
          description: "Get a list of reposts for a given post.",
          parameters: {
            type: "params",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) of post record"
              },
              cid: {
                type: "string",
                format: "cid",
                description: "If supplied, filters to reposts of specific version (by CID) of the post record."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["uri", "repostedBy"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                cursor: {
                  type: "string"
                },
                repostedBy: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyFeedGetSuggestedFeeds: {
      lexicon: 1,
      id: "app.bsky.feed.getSuggestedFeeds",
      defs: {
        main: {
          type: "query",
          description: "Get a list of suggested feeds (feed generators) for the requesting account.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feeds"],
              properties: {
                cursor: {
                  type: "string"
                },
                feeds: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#generatorView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyFeedGetTimeline: {
      lexicon: 1,
      id: "app.bsky.feed.getTimeline",
      defs: {
        main: {
          type: "query",
          description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
          parameters: {
            type: "params",
            properties: {
              algorithm: {
                type: "string",
                description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feed"],
              properties: {
                cursor: {
                  type: "string"
                },
                feed: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#feedViewPost"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyFeedLike: {
      lexicon: 1,
      id: "app.bsky.feed.like",
      defs: {
        main: {
          type: "record",
          description: "Record declaring a 'like' of a piece of subject content.",
          key: "tid",
          record: {
            type: "object",
            required: ["subject", "createdAt"],
            properties: {
              subject: {
                type: "ref",
                ref: "lex:com.atproto.repo.strongRef"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyFeedPost: {
      lexicon: 1,
      id: "app.bsky.feed.post",
      defs: {
        main: {
          type: "record",
          description: "Record containing a Bluesky post.",
          key: "tid",
          record: {
            type: "object",
            required: ["text", "createdAt"],
            properties: {
              text: {
                type: "string",
                maxLength: 3e3,
                maxGraphemes: 300,
                description: "The primary post content. May be an empty string, if there are embeds."
              },
              entities: {
                type: "array",
                description: "DEPRECATED: replaced by app.bsky.richtext.facet.",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.post#entity"
                }
              },
              facets: {
                type: "array",
                description: "Annotations of text (mentions, URLs, hashtags, etc)",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet"
                }
              },
              reply: {
                type: "ref",
                ref: "lex:app.bsky.feed.post#replyRef"
              },
              embed: {
                type: "union",
                refs: [
                  "lex:app.bsky.embed.images",
                  "lex:app.bsky.embed.video",
                  "lex:app.bsky.embed.external",
                  "lex:app.bsky.embed.record",
                  "lex:app.bsky.embed.recordWithMedia"
                ]
              },
              langs: {
                type: "array",
                description: "Indicates human language of post primary text content.",
                maxLength: 3,
                items: {
                  type: "string",
                  format: "language"
                }
              },
              labels: {
                type: "union",
                description: "Self-label values for this post. Effectively content warnings.",
                refs: ["lex:com.atproto.label.defs#selfLabels"]
              },
              tags: {
                type: "array",
                description: "Additional hashtags, in addition to any included in post text and facets.",
                maxLength: 8,
                items: {
                  type: "string",
                  maxLength: 640,
                  maxGraphemes: 64
                }
              },
              createdAt: {
                type: "string",
                format: "datetime",
                description: "Client-declared timestamp when this post was originally created."
              }
            }
          }
        },
        replyRef: {
          type: "object",
          required: ["root", "parent"],
          properties: {
            root: {
              type: "ref",
              ref: "lex:com.atproto.repo.strongRef"
            },
            parent: {
              type: "ref",
              ref: "lex:com.atproto.repo.strongRef"
            }
          }
        },
        entity: {
          type: "object",
          description: "Deprecated: use facets instead.",
          required: ["index", "type", "value"],
          properties: {
            index: {
              type: "ref",
              ref: "lex:app.bsky.feed.post#textSlice"
            },
            type: {
              type: "string",
              description: "Expected values are 'mention' and 'link'."
            },
            value: {
              type: "string"
            }
          }
        },
        textSlice: {
          type: "object",
          description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.",
          required: ["start", "end"],
          properties: {
            start: {
              type: "integer",
              minimum: 0
            },
            end: {
              type: "integer",
              minimum: 0
            }
          }
        }
      }
    },
    AppBskyFeedPostgate: {
      lexicon: 1,
      id: "app.bsky.feed.postgate",
      defs: {
        main: {
          type: "record",
          key: "tid",
          description: "Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.",
          record: {
            type: "object",
            required: ["post", "createdAt"],
            properties: {
              createdAt: {
                type: "string",
                format: "datetime"
              },
              post: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) to the post record."
              },
              detachedEmbeddingUris: {
                type: "array",
                maxLength: 50,
                items: {
                  type: "string",
                  format: "at-uri"
                },
                description: "List of AT-URIs embedding this post that the author has detached from."
              },
              embeddingRules: {
                type: "array",
                maxLength: 5,
                items: {
                  type: "union",
                  refs: ["lex:app.bsky.feed.postgate#disableRule"]
                }
              }
            }
          }
        },
        disableRule: {
          type: "object",
          description: "Disables embedding of this post.",
          properties: {}
        }
      }
    },
    AppBskyFeedRepost: {
      lexicon: 1,
      id: "app.bsky.feed.repost",
      defs: {
        main: {
          description: "Record representing a 'repost' of an existing Bluesky post.",
          type: "record",
          key: "tid",
          record: {
            type: "object",
            required: ["subject", "createdAt"],
            properties: {
              subject: {
                type: "ref",
                ref: "lex:com.atproto.repo.strongRef"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyFeedSearchPosts: {
      lexicon: 1,
      id: "app.bsky.feed.searchPosts",
      defs: {
        main: {
          type: "query",
          description: "Find posts matching search criteria, returning views of those posts.",
          parameters: {
            type: "params",
            required: ["q"],
            properties: {
              q: {
                type: "string",
                description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
              },
              sort: {
                type: "string",
                knownValues: ["top", "latest"],
                default: "latest",
                description: "Specifies the ranking order of results."
              },
              since: {
                type: "string",
                description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
              },
              until: {
                type: "string",
                description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
              },
              mentions: {
                type: "string",
                format: "at-identifier",
                description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions."
              },
              author: {
                type: "string",
                format: "at-identifier",
                description: "Filter to posts by the given account. Handles are resolved to DID before query-time."
              },
              lang: {
                type: "string",
                format: "language",
                description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection."
              },
              domain: {
                type: "string",
                description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization."
              },
              url: {
                type: "string",
                format: "uri",
                description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching."
              },
              tag: {
                type: "array",
                items: {
                  type: "string",
                  maxLength: 640,
                  maxGraphemes: 64
                },
                description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 25
              },
              cursor: {
                type: "string",
                description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["posts"],
              properties: {
                cursor: {
                  type: "string"
                },
                hitsTotal: {
                  type: "integer",
                  description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                },
                posts: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#postView"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "BadQueryString"
            }
          ]
        }
      }
    },
    AppBskyFeedSendInteractions: {
      lexicon: 1,
      id: "app.bsky.feed.sendInteractions",
      defs: {
        main: {
          type: "procedure",
          description: "Send information about interactions with feed items back to the feed generator that served them.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["interactions"],
              properties: {
                interactions: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#interaction"
                  }
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {}
            }
          }
        }
      }
    },
    AppBskyFeedThreadgate: {
      lexicon: 1,
      id: "app.bsky.feed.threadgate",
      defs: {
        main: {
          type: "record",
          key: "tid",
          description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.",
          record: {
            type: "object",
            required: ["post", "createdAt"],
            properties: {
              post: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) to the post record."
              },
              allow: {
                type: "array",
                maxLength: 5,
                items: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.threadgate#mentionRule",
                    "lex:app.bsky.feed.threadgate#followingRule",
                    "lex:app.bsky.feed.threadgate#listRule"
                  ]
                }
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              hiddenReplies: {
                type: "array",
                maxLength: 50,
                items: {
                  type: "string",
                  format: "at-uri"
                },
                description: "List of hidden reply URIs."
              }
            }
          }
        },
        mentionRule: {
          type: "object",
          description: "Allow replies from actors mentioned in your post.",
          properties: {}
        },
        followingRule: {
          type: "object",
          description: "Allow replies from actors you follow.",
          properties: {}
        },
        listRule: {
          type: "object",
          description: "Allow replies from actors on a list.",
          required: ["list"],
          properties: {
            list: {
              type: "string",
              format: "at-uri"
            }
          }
        }
      }
    },
    AppBskyGraphBlock: {
      lexicon: 1,
      id: "app.bsky.graph.block",
      defs: {
        main: {
          type: "record",
          description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
          key: "tid",
          record: {
            type: "object",
            required: ["subject", "createdAt"],
            properties: {
              subject: {
                type: "string",
                format: "did",
                description: "DID of the account to be blocked."
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyGraphDefs: {
      lexicon: 1,
      id: "app.bsky.graph.defs",
      defs: {
        listViewBasic: {
          type: "object",
          required: ["uri", "cid", "name", "purpose"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            name: {
              type: "string",
              maxLength: 64,
              minLength: 1
            },
            purpose: {
              type: "ref",
              ref: "lex:app.bsky.graph.defs#listPurpose"
            },
            avatar: {
              type: "string",
              format: "uri"
            },
            listItemCount: {
              type: "integer",
              minimum: 0
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.graph.defs#listViewerState"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        listView: {
          type: "object",
          required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            creator: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileView"
            },
            name: {
              type: "string",
              maxLength: 64,
              minLength: 1
            },
            purpose: {
              type: "ref",
              ref: "lex:app.bsky.graph.defs#listPurpose"
            },
            description: {
              type: "string",
              maxGraphemes: 300,
              maxLength: 3e3
            },
            descriptionFacets: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:app.bsky.richtext.facet"
              }
            },
            avatar: {
              type: "string",
              format: "uri"
            },
            listItemCount: {
              type: "integer",
              minimum: 0
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.graph.defs#listViewerState"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        listItemView: {
          type: "object",
          required: ["uri", "subject"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            subject: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileView"
            }
          }
        },
        starterPackView: {
          type: "object",
          required: ["uri", "cid", "record", "creator", "indexedAt"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            record: {
              type: "unknown"
            },
            creator: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileViewBasic"
            },
            list: {
              type: "ref",
              ref: "lex:app.bsky.graph.defs#listViewBasic"
            },
            listItemsSample: {
              type: "array",
              maxLength: 12,
              items: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listItemView"
              }
            },
            feeds: {
              type: "array",
              maxLength: 3,
              items: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#generatorView"
              }
            },
            joinedWeekCount: {
              type: "integer",
              minimum: 0
            },
            joinedAllTimeCount: {
              type: "integer",
              minimum: 0
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        starterPackViewBasic: {
          type: "object",
          required: ["uri", "cid", "record", "creator", "indexedAt"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            record: {
              type: "unknown"
            },
            creator: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileViewBasic"
            },
            listItemCount: {
              type: "integer",
              minimum: 0
            },
            joinedWeekCount: {
              type: "integer",
              minimum: 0
            },
            joinedAllTimeCount: {
              type: "integer",
              minimum: 0
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        listPurpose: {
          type: "string",
          knownValues: [
            "app.bsky.graph.defs#modlist",
            "app.bsky.graph.defs#curatelist",
            "app.bsky.graph.defs#referencelist"
          ]
        },
        modlist: {
          type: "token",
          description: "A list of actors to apply an aggregate moderation action (mute/block) on."
        },
        curatelist: {
          type: "token",
          description: "A list of actors used for curation purposes such as list feeds or interaction gating."
        },
        referencelist: {
          type: "token",
          description: "A list of actors used for only for reference purposes such as within a starter pack."
        },
        listViewerState: {
          type: "object",
          properties: {
            muted: {
              type: "boolean"
            },
            blocked: {
              type: "string",
              format: "at-uri"
            }
          }
        },
        notFoundActor: {
          type: "object",
          description: "indicates that a handle or DID could not be resolved",
          required: ["actor", "notFound"],
          properties: {
            actor: {
              type: "string",
              format: "at-identifier"
            },
            notFound: {
              type: "boolean",
              const: !0
            }
          }
        },
        relationship: {
          type: "object",
          description: "lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)",
          required: ["did"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            following: {
              type: "string",
              format: "at-uri",
              description: "if the actor follows this DID, this is the AT-URI of the follow record"
            },
            followedBy: {
              type: "string",
              format: "at-uri",
              description: "if the actor is followed by this DID, contains the AT-URI of the follow record"
            }
          }
        }
      }
    },
    AppBskyGraphFollow: {
      lexicon: 1,
      id: "app.bsky.graph.follow",
      defs: {
        main: {
          type: "record",
          description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
          key: "tid",
          record: {
            type: "object",
            required: ["subject", "createdAt"],
            properties: {
              subject: {
                type: "string",
                format: "did"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetActorStarterPacks: {
      lexicon: 1,
      id: "app.bsky.graph.getActorStarterPacks",
      defs: {
        main: {
          type: "query",
          description: "Get a list of starter packs created by the actor.",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["starterPacks"],
              properties: {
                cursor: {
                  type: "string"
                },
                starterPacks: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetBlocks: {
      lexicon: 1,
      id: "app.bsky.graph.getBlocks",
      defs: {
        main: {
          type: "query",
          description: "Enumerates which accounts the requesting account is currently blocking. Requires auth.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["blocks"],
              properties: {
                cursor: {
                  type: "string"
                },
                blocks: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetFollowers: {
      lexicon: 1,
      id: "app.bsky.graph.getFollowers",
      defs: {
        main: {
          type: "query",
          description: "Enumerates accounts which follow a specified account (actor).",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["subject", "followers"],
              properties: {
                subject: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                cursor: {
                  type: "string"
                },
                followers: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetFollows: {
      lexicon: 1,
      id: "app.bsky.graph.getFollows",
      defs: {
        main: {
          type: "query",
          description: "Enumerates accounts which a specified account (actor) follows.",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["subject", "follows"],
              properties: {
                subject: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                cursor: {
                  type: "string"
                },
                follows: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetKnownFollowers: {
      lexicon: 1,
      id: "app.bsky.graph.getKnownFollowers",
      defs: {
        main: {
          type: "query",
          description: "Enumerates accounts which follow a specified account (actor) and are followed by the viewer.",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["subject", "followers"],
              properties: {
                subject: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                cursor: {
                  type: "string"
                },
                followers: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetList: {
      lexicon: 1,
      id: "app.bsky.graph.getList",
      defs: {
        main: {
          type: "query",
          description: "Gets a 'view' (with additional context) of a specified list.",
          parameters: {
            type: "params",
            required: ["list"],
            properties: {
              list: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) of the list record to hydrate."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["list", "items"],
              properties: {
                cursor: {
                  type: "string"
                },
                list: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listView"
                },
                items: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listItemView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetListBlocks: {
      lexicon: 1,
      id: "app.bsky.graph.getListBlocks",
      defs: {
        main: {
          type: "query",
          description: "Get mod lists that the requesting account (actor) is blocking. Requires auth.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["lists"],
              properties: {
                cursor: {
                  type: "string"
                },
                lists: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetListMutes: {
      lexicon: 1,
      id: "app.bsky.graph.getListMutes",
      defs: {
        main: {
          type: "query",
          description: "Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["lists"],
              properties: {
                cursor: {
                  type: "string"
                },
                lists: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetLists: {
      lexicon: 1,
      id: "app.bsky.graph.getLists",
      defs: {
        main: {
          type: "query",
          description: "Enumerates the lists created by a specified account (actor).",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier",
                description: "The account (actor) to enumerate lists from."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["lists"],
              properties: {
                cursor: {
                  type: "string"
                },
                lists: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetMutes: {
      lexicon: 1,
      id: "app.bsky.graph.getMutes",
      defs: {
        main: {
          type: "query",
          description: "Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["mutes"],
              properties: {
                cursor: {
                  type: "string"
                },
                mutes: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetRelationships: {
      lexicon: 1,
      id: "app.bsky.graph.getRelationships",
      defs: {
        main: {
          type: "query",
          description: "Enumerates public relationships between one account, and a list of other accounts. Does not require auth.",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier",
                description: "Primary account requesting relationships for."
              },
              others: {
                type: "array",
                description: "List of 'other' accounts to be related back to the primary.",
                maxLength: 30,
                items: {
                  type: "string",
                  format: "at-identifier"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["relationships"],
              properties: {
                actor: {
                  type: "string",
                  format: "did"
                },
                relationships: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.graph.defs#relationship",
                      "lex:app.bsky.graph.defs#notFoundActor"
                    ]
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "ActorNotFound",
              description: "the primary actor at-identifier could not be resolved"
            }
          ]
        }
      }
    },
    AppBskyGraphGetStarterPack: {
      lexicon: 1,
      id: "app.bsky.graph.getStarterPack",
      defs: {
        main: {
          type: "query",
          description: "Gets a view of a starter pack.",
          parameters: {
            type: "params",
            required: ["starterPack"],
            properties: {
              starterPack: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) of the starter pack record."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["starterPack"],
              properties: {
                starterPack: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#starterPackView"
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetStarterPacks: {
      lexicon: 1,
      id: "app.bsky.graph.getStarterPacks",
      defs: {
        main: {
          type: "query",
          description: "Get views for a list of starter packs.",
          parameters: {
            type: "params",
            required: ["uris"],
            properties: {
              uris: {
                type: "array",
                items: {
                  type: "string",
                  format: "at-uri"
                },
                maxLength: 25
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["starterPacks"],
              properties: {
                starterPacks: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphGetSuggestedFollowsByActor: {
      lexicon: 1,
      id: "app.bsky.graph.getSuggestedFollowsByActor",
      defs: {
        main: {
          type: "query",
          description: "Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["suggestions"],
              properties: {
                suggestions: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  }
                },
                isFallback: {
                  type: "boolean",
                  description: "If true, response has fallen-back to generic results, and is not scoped using relativeToDid",
                  default: !1
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphList: {
      lexicon: 1,
      id: "app.bsky.graph.list",
      defs: {
        main: {
          type: "record",
          description: "Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.",
          key: "tid",
          record: {
            type: "object",
            required: ["name", "purpose", "createdAt"],
            properties: {
              purpose: {
                type: "ref",
                description: "Defines the purpose of the list (aka, moderation-oriented or curration-oriented)",
                ref: "lex:app.bsky.graph.defs#listPurpose"
              },
              name: {
                type: "string",
                maxLength: 64,
                minLength: 1,
                description: "Display name for list; can not be empty."
              },
              description: {
                type: "string",
                maxGraphemes: 300,
                maxLength: 3e3
              },
              descriptionFacets: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet"
                }
              },
              avatar: {
                type: "blob",
                accept: ["image/png", "image/jpeg"],
                maxSize: 1e6
              },
              labels: {
                type: "union",
                refs: ["lex:com.atproto.label.defs#selfLabels"]
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyGraphListblock: {
      lexicon: 1,
      id: "app.bsky.graph.listblock",
      defs: {
        main: {
          type: "record",
          description: "Record representing a block relationship against an entire an entire list of accounts (actors).",
          key: "tid",
          record: {
            type: "object",
            required: ["subject", "createdAt"],
            properties: {
              subject: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) to the mod list record."
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyGraphListitem: {
      lexicon: 1,
      id: "app.bsky.graph.listitem",
      defs: {
        main: {
          type: "record",
          description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
          key: "tid",
          record: {
            type: "object",
            required: ["subject", "list", "createdAt"],
            properties: {
              subject: {
                type: "string",
                format: "did",
                description: "The account which is included on the list."
              },
              list: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) to the list record (app.bsky.graph.list)."
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyGraphMuteActor: {
      lexicon: 1,
      id: "app.bsky.graph.muteActor",
      defs: {
        main: {
          type: "procedure",
          description: "Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphMuteActorList: {
      lexicon: 1,
      id: "app.bsky.graph.muteActorList",
      defs: {
        main: {
          type: "procedure",
          description: "Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["list"],
              properties: {
                list: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphMuteThread: {
      lexicon: 1,
      id: "app.bsky.graph.muteThread",
      defs: {
        main: {
          type: "procedure",
          description: "Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["root"],
              properties: {
                root: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphSearchStarterPacks: {
      lexicon: 1,
      id: "app.bsky.graph.searchStarterPacks",
      defs: {
        main: {
          type: "query",
          description: "Find starter packs matching search criteria. Does not require auth.",
          parameters: {
            type: "params",
            required: ["q"],
            properties: {
              q: {
                type: "string",
                description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 25
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["starterPacks"],
              properties: {
                cursor: {
                  type: "string"
                },
                starterPacks: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphStarterpack: {
      lexicon: 1,
      id: "app.bsky.graph.starterpack",
      defs: {
        main: {
          type: "record",
          description: "Record defining a starter pack of actors and feeds for new users.",
          key: "tid",
          record: {
            type: "object",
            required: ["name", "list", "createdAt"],
            properties: {
              name: {
                type: "string",
                maxGraphemes: 50,
                maxLength: 500,
                minLength: 1,
                description: "Display name for starter pack; can not be empty."
              },
              description: {
                type: "string",
                maxGraphemes: 300,
                maxLength: 3e3
              },
              descriptionFacets: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet"
                }
              },
              list: {
                type: "string",
                format: "at-uri",
                description: "Reference (AT-URI) to the list record."
              },
              feeds: {
                type: "array",
                maxLength: 3,
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.starterpack#feedItem"
                }
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        },
        feedItem: {
          type: "object",
          required: ["uri"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            }
          }
        }
      }
    },
    AppBskyGraphUnmuteActor: {
      lexicon: 1,
      id: "app.bsky.graph.unmuteActor",
      defs: {
        main: {
          type: "procedure",
          description: "Unmutes the specified account. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphUnmuteActorList: {
      lexicon: 1,
      id: "app.bsky.graph.unmuteActorList",
      defs: {
        main: {
          type: "procedure",
          description: "Unmutes the specified list of accounts. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["list"],
              properties: {
                list: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        }
      }
    },
    AppBskyGraphUnmuteThread: {
      lexicon: 1,
      id: "app.bsky.graph.unmuteThread",
      defs: {
        main: {
          type: "procedure",
          description: "Unmutes the specified thread. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["root"],
              properties: {
                root: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        }
      }
    },
    AppBskyLabelerDefs: {
      lexicon: 1,
      id: "app.bsky.labeler.defs",
      defs: {
        labelerView: {
          type: "object",
          required: ["uri", "cid", "creator", "indexedAt"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            creator: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileView"
            },
            likeCount: {
              type: "integer",
              minimum: 0
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.labeler.defs#labelerViewerState"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            }
          }
        },
        labelerViewDetailed: {
          type: "object",
          required: ["uri", "cid", "creator", "policies", "indexedAt"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            creator: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileView"
            },
            policies: {
              type: "ref",
              ref: "lex:app.bsky.labeler.defs#labelerPolicies"
            },
            likeCount: {
              type: "integer",
              minimum: 0
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.labeler.defs#labelerViewerState"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            }
          }
        },
        labelerViewerState: {
          type: "object",
          properties: {
            like: {
              type: "string",
              format: "at-uri"
            }
          }
        },
        labelerPolicies: {
          type: "object",
          required: ["labelValues"],
          properties: {
            labelValues: {
              type: "array",
              description: "The label values which this labeler publishes. May include global or custom labels.",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#labelValue"
              }
            },
            labelValueDefinitions: {
              type: "array",
              description: "Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#labelValueDefinition"
              }
            }
          }
        }
      }
    },
    AppBskyLabelerGetServices: {
      lexicon: 1,
      id: "app.bsky.labeler.getServices",
      defs: {
        main: {
          type: "query",
          description: "Get information about a list of labeler services.",
          parameters: {
            type: "params",
            required: ["dids"],
            properties: {
              dids: {
                type: "array",
                items: {
                  type: "string",
                  format: "did"
                }
              },
              detailed: {
                type: "boolean",
                default: !1
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["views"],
              properties: {
                views: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.labeler.defs#labelerView",
                      "lex:app.bsky.labeler.defs#labelerViewDetailed"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyLabelerService: {
      lexicon: 1,
      id: "app.bsky.labeler.service",
      defs: {
        main: {
          type: "record",
          description: "A declaration of the existence of labeler service.",
          key: "literal:self",
          record: {
            type: "object",
            required: ["policies", "createdAt"],
            properties: {
              policies: {
                type: "ref",
                ref: "lex:app.bsky.labeler.defs#labelerPolicies"
              },
              labels: {
                type: "union",
                refs: ["lex:com.atproto.label.defs#selfLabels"]
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      }
    },
    AppBskyNotificationGetUnreadCount: {
      lexicon: 1,
      id: "app.bsky.notification.getUnreadCount",
      defs: {
        main: {
          type: "query",
          description: "Count the number of unread notifications for the requesting account. Requires auth.",
          parameters: {
            type: "params",
            properties: {
              priority: {
                type: "boolean"
              },
              seenAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["count"],
              properties: {
                count: {
                  type: "integer"
                }
              }
            }
          }
        }
      }
    },
    AppBskyNotificationListNotifications: {
      lexicon: 1,
      id: "app.bsky.notification.listNotifications",
      defs: {
        main: {
          type: "query",
          description: "Enumerate notifications for the requesting account. Requires auth.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              priority: {
                type: "boolean"
              },
              cursor: {
                type: "string"
              },
              seenAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["notifications"],
              properties: {
                cursor: {
                  type: "string"
                },
                notifications: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.notification.listNotifications#notification"
                  }
                },
                priority: {
                  type: "boolean"
                },
                seenAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        notification: {
          type: "object",
          required: [
            "uri",
            "cid",
            "author",
            "reason",
            "record",
            "isRead",
            "indexedAt"
          ],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            author: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileView"
            },
            reason: {
              type: "string",
              description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.",
              knownValues: [
                "like",
                "repost",
                "follow",
                "mention",
                "reply",
                "quote",
                "starterpack-joined"
              ]
            },
            reasonSubject: {
              type: "string",
              format: "at-uri"
            },
            record: {
              type: "unknown"
            },
            isRead: {
              type: "boolean"
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            }
          }
        }
      }
    },
    AppBskyNotificationPutPreferences: {
      lexicon: 1,
      id: "app.bsky.notification.putPreferences",
      defs: {
        main: {
          type: "procedure",
          description: "Set notification-related preferences for an account. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["priority"],
              properties: {
                priority: {
                  type: "boolean"
                }
              }
            }
          }
        }
      }
    },
    AppBskyNotificationRegisterPush: {
      lexicon: 1,
      id: "app.bsky.notification.registerPush",
      defs: {
        main: {
          type: "procedure",
          description: "Register to receive push notifications, via a specified service, for the requesting account. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["serviceDid", "token", "platform", "appId"],
              properties: {
                serviceDid: {
                  type: "string",
                  format: "did"
                },
                token: {
                  type: "string"
                },
                platform: {
                  type: "string",
                  knownValues: ["ios", "android", "web"]
                },
                appId: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    AppBskyNotificationUpdateSeen: {
      lexicon: 1,
      id: "app.bsky.notification.updateSeen",
      defs: {
        main: {
          type: "procedure",
          description: "Notify server that the requesting account has seen notifications. Requires auth.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["seenAt"],
              properties: {
                seenAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      }
    },
    AppBskyRichtextFacet: {
      lexicon: 1,
      id: "app.bsky.richtext.facet",
      defs: {
        main: {
          type: "object",
          description: "Annotation of a sub-string within rich text.",
          required: ["index", "features"],
          properties: {
            index: {
              type: "ref",
              ref: "lex:app.bsky.richtext.facet#byteSlice"
            },
            features: {
              type: "array",
              items: {
                type: "union",
                refs: [
                  "lex:app.bsky.richtext.facet#mention",
                  "lex:app.bsky.richtext.facet#link",
                  "lex:app.bsky.richtext.facet#tag"
                ]
              }
            }
          }
        },
        mention: {
          type: "object",
          description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
          required: ["did"],
          properties: {
            did: {
              type: "string",
              format: "did"
            }
          }
        },
        link: {
          type: "object",
          description: "Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.",
          required: ["uri"],
          properties: {
            uri: {
              type: "string",
              format: "uri"
            }
          }
        },
        tag: {
          type: "object",
          description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
          required: ["tag"],
          properties: {
            tag: {
              type: "string",
              maxLength: 640,
              maxGraphemes: 64
            }
          }
        },
        byteSlice: {
          type: "object",
          description: "Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.",
          required: ["byteStart", "byteEnd"],
          properties: {
            byteStart: {
              type: "integer",
              minimum: 0
            },
            byteEnd: {
              type: "integer",
              minimum: 0
            }
          }
        }
      }
    },
    AppBskyUnspeccedDefs: {
      lexicon: 1,
      id: "app.bsky.unspecced.defs",
      defs: {
        skeletonSearchPost: {
          type: "object",
          required: ["uri"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            }
          }
        },
        skeletonSearchActor: {
          type: "object",
          required: ["did"],
          properties: {
            did: {
              type: "string",
              format: "did"
            }
          }
        },
        skeletonSearchStarterPack: {
          type: "object",
          required: ["uri"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            }
          }
        }
      }
    },
    AppBskyUnspeccedGetConfig: {
      lexicon: 1,
      id: "app.bsky.unspecced.getConfig",
      defs: {
        main: {
          type: "query",
          description: "Get miscellaneous runtime configuration.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: [],
              properties: {
                checkEmailConfirmed: {
                  type: "boolean"
                }
              }
            }
          }
        }
      }
    },
    AppBskyUnspeccedGetPopularFeedGenerators: {
      lexicon: 1,
      id: "app.bsky.unspecced.getPopularFeedGenerators",
      defs: {
        main: {
          type: "query",
          description: "An unspecced view of globally popular feed generators.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              },
              query: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["feeds"],
              properties: {
                cursor: {
                  type: "string"
                },
                feeds: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#generatorView"
                  }
                }
              }
            }
          }
        }
      }
    },
    AppBskyUnspeccedGetSuggestionsSkeleton: {
      lexicon: 1,
      id: "app.bsky.unspecced.getSuggestionsSkeleton",
      defs: {
        main: {
          type: "query",
          description: "Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions",
          parameters: {
            type: "params",
            properties: {
              viewer: {
                type: "string",
                format: "did",
                description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              },
              relativeToDid: {
                type: "string",
                format: "did",
                description: "DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["actors"],
              properties: {
                cursor: {
                  type: "string"
                },
                actors: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor"
                  }
                },
                relativeToDid: {
                  type: "string",
                  format: "did",
                  description: "DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer."
                }
              }
            }
          }
        }
      }
    },
    AppBskyUnspeccedGetTaggedSuggestions: {
      lexicon: 1,
      id: "app.bsky.unspecced.getTaggedSuggestions",
      defs: {
        main: {
          type: "query",
          description: "Get a list of suggestions (feeds and users) tagged with categories",
          parameters: {
            type: "params",
            properties: {}
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["suggestions"],
              properties: {
                suggestions: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.unspecced.getTaggedSuggestions#suggestion"
                  }
                }
              }
            }
          }
        },
        suggestion: {
          type: "object",
          required: ["tag", "subjectType", "subject"],
          properties: {
            tag: {
              type: "string"
            },
            subjectType: {
              type: "string",
              knownValues: ["actor", "feed"]
            },
            subject: {
              type: "string",
              format: "uri"
            }
          }
        }
      }
    },
    AppBskyUnspeccedSearchActorsSkeleton: {
      lexicon: 1,
      id: "app.bsky.unspecced.searchActorsSkeleton",
      defs: {
        main: {
          type: "query",
          description: "Backend Actors (profile) search, returns only skeleton.",
          parameters: {
            type: "params",
            required: ["q"],
            properties: {
              q: {
                type: "string",
                description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax."
              },
              viewer: {
                type: "string",
                format: "did",
                description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking."
              },
              typeahead: {
                type: "boolean",
                description: "If true, acts as fast/simple 'typeahead' query."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 25
              },
              cursor: {
                type: "string",
                description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["actors"],
              properties: {
                cursor: {
                  type: "string"
                },
                hitsTotal: {
                  type: "integer",
                  description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                },
                actors: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "BadQueryString"
            }
          ]
        }
      }
    },
    AppBskyUnspeccedSearchPostsSkeleton: {
      lexicon: 1,
      id: "app.bsky.unspecced.searchPostsSkeleton",
      defs: {
        main: {
          type: "query",
          description: "Backend Posts search, returns only skeleton",
          parameters: {
            type: "params",
            required: ["q"],
            properties: {
              q: {
                type: "string",
                description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
              },
              sort: {
                type: "string",
                knownValues: ["top", "latest"],
                default: "latest",
                description: "Specifies the ranking order of results."
              },
              since: {
                type: "string",
                description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
              },
              until: {
                type: "string",
                description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
              },
              mentions: {
                type: "string",
                format: "at-identifier",
                description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions."
              },
              author: {
                type: "string",
                format: "at-identifier",
                description: "Filter to posts by the given account. Handles are resolved to DID before query-time."
              },
              lang: {
                type: "string",
                format: "language",
                description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection."
              },
              domain: {
                type: "string",
                description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization."
              },
              url: {
                type: "string",
                format: "uri",
                description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching."
              },
              tag: {
                type: "array",
                items: {
                  type: "string",
                  maxLength: 640,
                  maxGraphemes: 64
                },
                description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
              },
              viewer: {
                type: "string",
                format: "did",
                description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 25
              },
              cursor: {
                type: "string",
                description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["posts"],
              properties: {
                cursor: {
                  type: "string"
                },
                hitsTotal: {
                  type: "integer",
                  description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                },
                posts: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.unspecced.defs#skeletonSearchPost"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "BadQueryString"
            }
          ]
        }
      }
    },
    AppBskyUnspeccedSearchStarterPacksSkeleton: {
      lexicon: 1,
      id: "app.bsky.unspecced.searchStarterPacksSkeleton",
      defs: {
        main: {
          type: "query",
          description: "Backend Starter Pack search, returns only skeleton.",
          parameters: {
            type: "params",
            required: ["q"],
            properties: {
              q: {
                type: "string",
                description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
              },
              viewer: {
                type: "string",
                format: "did",
                description: "DID of the account making the request (not included for public/unauthenticated queries)."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 25
              },
              cursor: {
                type: "string",
                description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["starterPacks"],
              properties: {
                cursor: {
                  type: "string"
                },
                hitsTotal: {
                  type: "integer",
                  description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                },
                starterPacks: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.unspecced.defs#skeletonSearchStarterPack"
                  }
                }
              }
            }
          },
          errors: [
            {
              name: "BadQueryString"
            }
          ]
        }
      }
    },
    AppBskyVideoDefs: {
      lexicon: 1,
      id: "app.bsky.video.defs",
      defs: {
        jobStatus: {
          type: "object",
          required: ["jobId", "did", "state"],
          properties: {
            jobId: {
              type: "string"
            },
            did: {
              type: "string",
              format: "did"
            },
            state: {
              type: "string",
              description: "The state of the video processing job. All values not listed as a known value indicate that the job is in process.",
              knownValues: ["JOB_STATE_COMPLETED", "JOB_STATE_FAILED"]
            },
            progress: {
              type: "integer",
              minimum: 0,
              maximum: 100,
              description: "Progress within the current processing state."
            },
            blob: {
              type: "blob"
            },
            error: {
              type: "string"
            },
            message: {
              type: "string"
            }
          }
        }
      }
    },
    AppBskyVideoGetJobStatus: {
      lexicon: 1,
      id: "app.bsky.video.getJobStatus",
      defs: {
        main: {
          type: "query",
          description: "Get status details for a video processing job.",
          parameters: {
            type: "params",
            required: ["jobId"],
            properties: {
              jobId: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["jobStatus"],
              properties: {
                jobStatus: {
                  type: "ref",
                  ref: "lex:app.bsky.video.defs#jobStatus"
                }
              }
            }
          }
        }
      }
    },
    AppBskyVideoGetUploadLimits: {
      lexicon: 1,
      id: "app.bsky.video.getUploadLimits",
      defs: {
        main: {
          type: "query",
          description: "Get video upload limits for the authenticated user.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["canUpload"],
              properties: {
                canUpload: {
                  type: "boolean"
                },
                remainingDailyVideos: {
                  type: "integer"
                },
                remainingDailyBytes: {
                  type: "integer"
                },
                message: {
                  type: "string"
                },
                error: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    AppBskyVideoUploadVideo: {
      lexicon: 1,
      id: "app.bsky.video.uploadVideo",
      defs: {
        main: {
          type: "procedure",
          description: "Upload a video to be processed then stored on the PDS.",
          input: {
            encoding: "video/mp4"
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["jobStatus"],
              properties: {
                jobStatus: {
                  type: "ref",
                  ref: "lex:app.bsky.video.defs#jobStatus"
                }
              }
            }
          }
        }
      }
    },
    ChatBskyActorDeclaration: {
      lexicon: 1,
      id: "chat.bsky.actor.declaration",
      defs: {
        main: {
          type: "record",
          description: "A declaration of a Bluesky chat account.",
          key: "literal:self",
          record: {
            type: "object",
            required: ["allowIncoming"],
            properties: {
              allowIncoming: {
                type: "string",
                knownValues: ["all", "none", "following"]
              }
            }
          }
        }
      }
    },
    ChatBskyActorDefs: {
      lexicon: 1,
      id: "chat.bsky.actor.defs",
      defs: {
        profileViewBasic: {
          type: "object",
          required: ["did", "handle"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            displayName: {
              type: "string",
              maxGraphemes: 64,
              maxLength: 640
            },
            avatar: {
              type: "string",
              format: "uri"
            },
            associated: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileAssociated"
            },
            viewer: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#viewerState"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            chatDisabled: {
              type: "boolean",
              description: "Set to true when the actor cannot actively participate in converations"
            }
          }
        }
      }
    },
    ChatBskyActorDeleteAccount: {
      lexicon: 1,
      id: "chat.bsky.actor.deleteAccount",
      defs: {
        main: {
          type: "procedure",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {}
            }
          }
        }
      }
    },
    ChatBskyActorExportAccountData: {
      lexicon: 1,
      id: "chat.bsky.actor.exportAccountData",
      defs: {
        main: {
          type: "query",
          output: {
            encoding: "application/jsonl"
          }
        }
      }
    },
    ChatBskyConvoDefs: {
      lexicon: 1,
      id: "chat.bsky.convo.defs",
      defs: {
        messageRef: {
          type: "object",
          required: ["did", "messageId", "convoId"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            convoId: {
              type: "string"
            },
            messageId: {
              type: "string"
            }
          }
        },
        messageInput: {
          type: "object",
          required: ["text"],
          properties: {
            text: {
              type: "string",
              maxLength: 1e4,
              maxGraphemes: 1e3
            },
            facets: {
              type: "array",
              description: "Annotations of text (mentions, URLs, hashtags, etc)",
              items: {
                type: "ref",
                ref: "lex:app.bsky.richtext.facet"
              }
            },
            embed: {
              type: "union",
              refs: ["lex:app.bsky.embed.record"]
            }
          }
        },
        messageView: {
          type: "object",
          required: ["id", "rev", "text", "sender", "sentAt"],
          properties: {
            id: {
              type: "string"
            },
            rev: {
              type: "string"
            },
            text: {
              type: "string",
              maxLength: 1e4,
              maxGraphemes: 1e3
            },
            facets: {
              type: "array",
              description: "Annotations of text (mentions, URLs, hashtags, etc)",
              items: {
                type: "ref",
                ref: "lex:app.bsky.richtext.facet"
              }
            },
            embed: {
              type: "union",
              refs: ["lex:app.bsky.embed.record#view"]
            },
            sender: {
              type: "ref",
              ref: "lex:chat.bsky.convo.defs#messageViewSender"
            },
            sentAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        deletedMessageView: {
          type: "object",
          required: ["id", "rev", "sender", "sentAt"],
          properties: {
            id: {
              type: "string"
            },
            rev: {
              type: "string"
            },
            sender: {
              type: "ref",
              ref: "lex:chat.bsky.convo.defs#messageViewSender"
            },
            sentAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        messageViewSender: {
          type: "object",
          required: ["did"],
          properties: {
            did: {
              type: "string",
              format: "did"
            }
          }
        },
        convoView: {
          type: "object",
          required: ["id", "rev", "members", "muted", "unreadCount"],
          properties: {
            id: {
              type: "string"
            },
            rev: {
              type: "string"
            },
            members: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:chat.bsky.actor.defs#profileViewBasic"
              }
            },
            lastMessage: {
              type: "union",
              refs: [
                "lex:chat.bsky.convo.defs#messageView",
                "lex:chat.bsky.convo.defs#deletedMessageView"
              ]
            },
            muted: {
              type: "boolean"
            },
            opened: {
              type: "boolean"
            },
            unreadCount: {
              type: "integer"
            }
          }
        },
        logBeginConvo: {
          type: "object",
          required: ["rev", "convoId"],
          properties: {
            rev: {
              type: "string"
            },
            convoId: {
              type: "string"
            }
          }
        },
        logLeaveConvo: {
          type: "object",
          required: ["rev", "convoId"],
          properties: {
            rev: {
              type: "string"
            },
            convoId: {
              type: "string"
            }
          }
        },
        logCreateMessage: {
          type: "object",
          required: ["rev", "convoId", "message"],
          properties: {
            rev: {
              type: "string"
            },
            convoId: {
              type: "string"
            },
            message: {
              type: "union",
              refs: [
                "lex:chat.bsky.convo.defs#messageView",
                "lex:chat.bsky.convo.defs#deletedMessageView"
              ]
            }
          }
        },
        logDeleteMessage: {
          type: "object",
          required: ["rev", "convoId", "message"],
          properties: {
            rev: {
              type: "string"
            },
            convoId: {
              type: "string"
            },
            message: {
              type: "union",
              refs: [
                "lex:chat.bsky.convo.defs#messageView",
                "lex:chat.bsky.convo.defs#deletedMessageView"
              ]
            }
          }
        }
      }
    },
    ChatBskyConvoDeleteMessageForSelf: {
      lexicon: 1,
      id: "chat.bsky.convo.deleteMessageForSelf",
      defs: {
        main: {
          type: "procedure",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convoId", "messageId"],
              properties: {
                convoId: {
                  type: "string"
                },
                messageId: {
                  type: "string"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:chat.bsky.convo.defs#deletedMessageView"
            }
          }
        }
      }
    },
    ChatBskyConvoGetConvo: {
      lexicon: 1,
      id: "chat.bsky.convo.getConvo",
      defs: {
        main: {
          type: "query",
          parameters: {
            type: "params",
            required: ["convoId"],
            properties: {
              convoId: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convo"],
              properties: {
                convo: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#convoView"
                }
              }
            }
          }
        }
      }
    },
    ChatBskyConvoGetConvoForMembers: {
      lexicon: 1,
      id: "chat.bsky.convo.getConvoForMembers",
      defs: {
        main: {
          type: "query",
          parameters: {
            type: "params",
            required: ["members"],
            properties: {
              members: {
                type: "array",
                minLength: 1,
                maxLength: 10,
                items: {
                  type: "string",
                  format: "did"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convo"],
              properties: {
                convo: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#convoView"
                }
              }
            }
          }
        }
      }
    },
    ChatBskyConvoGetLog: {
      lexicon: 1,
      id: "chat.bsky.convo.getLog",
      defs: {
        main: {
          type: "query",
          parameters: {
            type: "params",
            required: [],
            properties: {
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["logs"],
              properties: {
                cursor: {
                  type: "string"
                },
                logs: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:chat.bsky.convo.defs#logBeginConvo",
                      "lex:chat.bsky.convo.defs#logLeaveConvo",
                      "lex:chat.bsky.convo.defs#logCreateMessage",
                      "lex:chat.bsky.convo.defs#logDeleteMessage"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    ChatBskyConvoGetMessages: {
      lexicon: 1,
      id: "chat.bsky.convo.getMessages",
      defs: {
        main: {
          type: "query",
          parameters: {
            type: "params",
            required: ["convoId"],
            properties: {
              convoId: {
                type: "string"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["messages"],
              properties: {
                cursor: {
                  type: "string"
                },
                messages: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:chat.bsky.convo.defs#messageView",
                      "lex:chat.bsky.convo.defs#deletedMessageView"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    ChatBskyConvoLeaveConvo: {
      lexicon: 1,
      id: "chat.bsky.convo.leaveConvo",
      defs: {
        main: {
          type: "procedure",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convoId"],
              properties: {
                convoId: {
                  type: "string"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convoId", "rev"],
              properties: {
                convoId: {
                  type: "string"
                },
                rev: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ChatBskyConvoListConvos: {
      lexicon: 1,
      id: "chat.bsky.convo.listConvos",
      defs: {
        main: {
          type: "query",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convos"],
              properties: {
                cursor: {
                  type: "string"
                },
                convos: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#convoView"
                  }
                }
              }
            }
          }
        }
      }
    },
    ChatBskyConvoMuteConvo: {
      lexicon: 1,
      id: "chat.bsky.convo.muteConvo",
      defs: {
        main: {
          type: "procedure",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convoId"],
              properties: {
                convoId: {
                  type: "string"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convo"],
              properties: {
                convo: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#convoView"
                }
              }
            }
          }
        }
      }
    },
    ChatBskyConvoSendMessage: {
      lexicon: 1,
      id: "chat.bsky.convo.sendMessage",
      defs: {
        main: {
          type: "procedure",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convoId", "message"],
              properties: {
                convoId: {
                  type: "string"
                },
                message: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#messageInput"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:chat.bsky.convo.defs#messageView"
            }
          }
        }
      }
    },
    ChatBskyConvoSendMessageBatch: {
      lexicon: 1,
      id: "chat.bsky.convo.sendMessageBatch",
      defs: {
        main: {
          type: "procedure",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  maxLength: 100,
                  items: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.sendMessageBatch#batchItem"
                  }
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#messageView"
                  }
                }
              }
            }
          }
        },
        batchItem: {
          type: "object",
          required: ["convoId", "message"],
          properties: {
            convoId: {
              type: "string"
            },
            message: {
              type: "ref",
              ref: "lex:chat.bsky.convo.defs#messageInput"
            }
          }
        }
      }
    },
    ChatBskyConvoUnmuteConvo: {
      lexicon: 1,
      id: "chat.bsky.convo.unmuteConvo",
      defs: {
        main: {
          type: "procedure",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convoId"],
              properties: {
                convoId: {
                  type: "string"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convo"],
              properties: {
                convo: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#convoView"
                }
              }
            }
          }
        }
      }
    },
    ChatBskyConvoUpdateRead: {
      lexicon: 1,
      id: "chat.bsky.convo.updateRead",
      defs: {
        main: {
          type: "procedure",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convoId"],
              properties: {
                convoId: {
                  type: "string"
                },
                messageId: {
                  type: "string"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["convo"],
              properties: {
                convo: {
                  type: "ref",
                  ref: "lex:chat.bsky.convo.defs#convoView"
                }
              }
            }
          }
        }
      }
    },
    ChatBskyModerationGetActorMetadata: {
      lexicon: 1,
      id: "chat.bsky.moderation.getActorMetadata",
      defs: {
        main: {
          type: "query",
          parameters: {
            type: "params",
            required: ["actor"],
            properties: {
              actor: {
                type: "string",
                format: "did"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["day", "month", "all"],
              properties: {
                day: {
                  type: "ref",
                  ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                },
                month: {
                  type: "ref",
                  ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                },
                all: {
                  type: "ref",
                  ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                }
              }
            }
          }
        },
        metadata: {
          type: "object",
          required: [
            "messagesSent",
            "messagesReceived",
            "convos",
            "convosStarted"
          ],
          properties: {
            messagesSent: {
              type: "integer"
            },
            messagesReceived: {
              type: "integer"
            },
            convos: {
              type: "integer"
            },
            convosStarted: {
              type: "integer"
            }
          }
        }
      }
    },
    ChatBskyModerationGetMessageContext: {
      lexicon: 1,
      id: "chat.bsky.moderation.getMessageContext",
      defs: {
        main: {
          type: "query",
          parameters: {
            type: "params",
            required: ["messageId"],
            properties: {
              convoId: {
                type: "string",
                description: "Conversation that the message is from. NOTE: this field will eventually be required."
              },
              messageId: {
                type: "string"
              },
              before: {
                type: "integer",
                default: 5
              },
              after: {
                type: "integer",
                default: 5
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["messages"],
              properties: {
                messages: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:chat.bsky.convo.defs#messageView",
                      "lex:chat.bsky.convo.defs#deletedMessageView"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    ChatBskyModerationUpdateActorAccess: {
      lexicon: 1,
      id: "chat.bsky.moderation.updateActorAccess",
      defs: {
        main: {
          type: "procedure",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["actor", "allowAccess"],
              properties: {
                actor: {
                  type: "string",
                  format: "did"
                },
                allowAccess: {
                  type: "boolean"
                },
                ref: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneCommunicationCreateTemplate: {
      lexicon: 1,
      id: "tools.ozone.communication.createTemplate",
      defs: {
        main: {
          type: "procedure",
          description: "Administrative action to create a new, re-usable communication (email for now) template.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["subject", "contentMarkdown", "name"],
              properties: {
                name: {
                  type: "string",
                  description: "Name of the template."
                },
                contentMarkdown: {
                  type: "string",
                  description: "Content of the template, markdown supported, can contain variable placeholders."
                },
                subject: {
                  type: "string",
                  description: "Subject of the message, used in emails."
                },
                lang: {
                  type: "string",
                  format: "language",
                  description: "Message language."
                },
                createdBy: {
                  type: "string",
                  format: "did",
                  description: "DID of the user who is creating the template."
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.communication.defs#templateView"
            }
          },
          errors: [
            {
              name: "DuplicateTemplateName"
            }
          ]
        }
      }
    },
    ToolsOzoneCommunicationDefs: {
      lexicon: 1,
      id: "tools.ozone.communication.defs",
      defs: {
        templateView: {
          type: "object",
          required: [
            "id",
            "name",
            "contentMarkdown",
            "disabled",
            "lastUpdatedBy",
            "createdAt",
            "updatedAt"
          ],
          properties: {
            id: {
              type: "string"
            },
            name: {
              type: "string",
              description: "Name of the template."
            },
            subject: {
              type: "string",
              description: "Content of the template, can contain markdown and variable placeholders."
            },
            contentMarkdown: {
              type: "string",
              description: "Subject of the message, used in emails."
            },
            disabled: {
              type: "boolean"
            },
            lang: {
              type: "string",
              format: "language",
              description: "Message language."
            },
            lastUpdatedBy: {
              type: "string",
              format: "did",
              description: "DID of the user who last updated the template."
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            updatedAt: {
              type: "string",
              format: "datetime"
            }
          }
        }
      }
    },
    ToolsOzoneCommunicationDeleteTemplate: {
      lexicon: 1,
      id: "tools.ozone.communication.deleteTemplate",
      defs: {
        main: {
          type: "procedure",
          description: "Delete a communication template.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["id"],
              properties: {
                id: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneCommunicationListTemplates: {
      lexicon: 1,
      id: "tools.ozone.communication.listTemplates",
      defs: {
        main: {
          type: "query",
          description: "Get list of all communication templates.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["communicationTemplates"],
              properties: {
                communicationTemplates: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.communication.defs#templateView"
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneCommunicationUpdateTemplate: {
      lexicon: 1,
      id: "tools.ozone.communication.updateTemplate",
      defs: {
        main: {
          type: "procedure",
          description: "Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["id"],
              properties: {
                id: {
                  type: "string",
                  description: "ID of the template to be updated."
                },
                name: {
                  type: "string",
                  description: "Name of the template."
                },
                lang: {
                  type: "string",
                  format: "language",
                  description: "Message language."
                },
                contentMarkdown: {
                  type: "string",
                  description: "Content of the template, markdown supported, can contain variable placeholders."
                },
                subject: {
                  type: "string",
                  description: "Subject of the message, used in emails."
                },
                updatedBy: {
                  type: "string",
                  format: "did",
                  description: "DID of the user who is updating the template."
                },
                disabled: {
                  type: "boolean"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.communication.defs#templateView"
            }
          },
          errors: [
            {
              name: "DuplicateTemplateName"
            }
          ]
        }
      }
    },
    ToolsOzoneModerationDefs: {
      lexicon: 1,
      id: "tools.ozone.moderation.defs",
      defs: {
        modEventView: {
          type: "object",
          required: [
            "id",
            "event",
            "subject",
            "subjectBlobCids",
            "createdBy",
            "createdAt"
          ],
          properties: {
            id: {
              type: "integer"
            },
            event: {
              type: "union",
              refs: [
                "lex:tools.ozone.moderation.defs#modEventTakedown",
                "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                "lex:tools.ozone.moderation.defs#modEventComment",
                "lex:tools.ozone.moderation.defs#modEventReport",
                "lex:tools.ozone.moderation.defs#modEventLabel",
                "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                "lex:tools.ozone.moderation.defs#modEventEscalate",
                "lex:tools.ozone.moderation.defs#modEventMute",
                "lex:tools.ozone.moderation.defs#modEventUnmute",
                "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                "lex:tools.ozone.moderation.defs#modEventEmail",
                "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                "lex:tools.ozone.moderation.defs#modEventDivert",
                "lex:tools.ozone.moderation.defs#modEventTag",
                "lex:tools.ozone.moderation.defs#accountEvent",
                "lex:tools.ozone.moderation.defs#identityEvent",
                "lex:tools.ozone.moderation.defs#recordEvent"
              ]
            },
            subject: {
              type: "union",
              refs: [
                "lex:com.atproto.admin.defs#repoRef",
                "lex:com.atproto.repo.strongRef",
                "lex:chat.bsky.convo.defs#messageRef"
              ]
            },
            subjectBlobCids: {
              type: "array",
              items: {
                type: "string"
              }
            },
            createdBy: {
              type: "string",
              format: "did"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            creatorHandle: {
              type: "string"
            },
            subjectHandle: {
              type: "string"
            }
          }
        },
        modEventViewDetail: {
          type: "object",
          required: [
            "id",
            "event",
            "subject",
            "subjectBlobs",
            "createdBy",
            "createdAt"
          ],
          properties: {
            id: {
              type: "integer"
            },
            event: {
              type: "union",
              refs: [
                "lex:tools.ozone.moderation.defs#modEventTakedown",
                "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                "lex:tools.ozone.moderation.defs#modEventComment",
                "lex:tools.ozone.moderation.defs#modEventReport",
                "lex:tools.ozone.moderation.defs#modEventLabel",
                "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                "lex:tools.ozone.moderation.defs#modEventEscalate",
                "lex:tools.ozone.moderation.defs#modEventMute",
                "lex:tools.ozone.moderation.defs#modEventUnmute",
                "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                "lex:tools.ozone.moderation.defs#modEventEmail",
                "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                "lex:tools.ozone.moderation.defs#modEventDivert",
                "lex:tools.ozone.moderation.defs#modEventTag",
                "lex:tools.ozone.moderation.defs#accountEvent",
                "lex:tools.ozone.moderation.defs#identityEvent",
                "lex:tools.ozone.moderation.defs#recordEvent"
              ]
            },
            subject: {
              type: "union",
              refs: [
                "lex:tools.ozone.moderation.defs#repoView",
                "lex:tools.ozone.moderation.defs#repoViewNotFound",
                "lex:tools.ozone.moderation.defs#recordView",
                "lex:tools.ozone.moderation.defs#recordViewNotFound"
              ]
            },
            subjectBlobs: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#blobView"
              }
            },
            createdBy: {
              type: "string",
              format: "did"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        subjectStatusView: {
          type: "object",
          required: ["id", "subject", "createdAt", "updatedAt", "reviewState"],
          properties: {
            id: {
              type: "integer"
            },
            subject: {
              type: "union",
              refs: [
                "lex:com.atproto.admin.defs#repoRef",
                "lex:com.atproto.repo.strongRef"
              ]
            },
            hosting: {
              type: "union",
              refs: [
                "lex:tools.ozone.moderation.defs#accountHosting",
                "lex:tools.ozone.moderation.defs#recordHosting"
              ]
            },
            subjectBlobCids: {
              type: "array",
              items: {
                type: "string",
                format: "cid"
              }
            },
            subjectRepoHandle: {
              type: "string"
            },
            updatedAt: {
              type: "string",
              format: "datetime",
              description: "Timestamp referencing when the last update was made to the moderation status of the subject"
            },
            createdAt: {
              type: "string",
              format: "datetime",
              description: "Timestamp referencing the first moderation status impacting event was emitted on the subject"
            },
            reviewState: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#subjectReviewState"
            },
            comment: {
              type: "string",
              description: "Sticky comment on the subject."
            },
            muteUntil: {
              type: "string",
              format: "datetime"
            },
            muteReportingUntil: {
              type: "string",
              format: "datetime"
            },
            lastReviewedBy: {
              type: "string",
              format: "did"
            },
            lastReviewedAt: {
              type: "string",
              format: "datetime"
            },
            lastReportedAt: {
              type: "string",
              format: "datetime"
            },
            lastAppealedAt: {
              type: "string",
              format: "datetime",
              description: "Timestamp referencing when the author of the subject appealed a moderation action"
            },
            takendown: {
              type: "boolean"
            },
            appealed: {
              type: "boolean",
              description: "True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators."
            },
            suspendUntil: {
              type: "string",
              format: "datetime"
            },
            tags: {
              type: "array",
              items: {
                type: "string"
              }
            }
          }
        },
        subjectReviewState: {
          type: "string",
          knownValues: [
            "lex:tools.ozone.moderation.defs#reviewOpen",
            "lex:tools.ozone.moderation.defs#reviewEscalated",
            "lex:tools.ozone.moderation.defs#reviewClosed",
            "lex:tools.ozone.moderation.defs#reviewNone"
          ]
        },
        reviewOpen: {
          type: "token",
          description: "Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator"
        },
        reviewEscalated: {
          type: "token",
          description: "Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator"
        },
        reviewClosed: {
          type: "token",
          description: "Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator"
        },
        reviewNone: {
          type: "token",
          description: "Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it"
        },
        modEventTakedown: {
          type: "object",
          description: "Take down a subject permanently or temporarily",
          properties: {
            comment: {
              type: "string"
            },
            durationInHours: {
              type: "integer",
              description: "Indicates how long the takedown should be in effect before automatically expiring."
            },
            acknowledgeAccountSubjects: {
              type: "boolean",
              description: "If true, all other reports on content authored by this account will be resolved (acknowledged)."
            }
          }
        },
        modEventReverseTakedown: {
          type: "object",
          description: "Revert take down action on a subject",
          properties: {
            comment: {
              type: "string",
              description: "Describe reasoning behind the reversal."
            }
          }
        },
        modEventResolveAppeal: {
          type: "object",
          description: "Resolve appeal on a subject",
          properties: {
            comment: {
              type: "string",
              description: "Describe resolution."
            }
          }
        },
        modEventComment: {
          type: "object",
          description: "Add a comment to a subject",
          required: ["comment"],
          properties: {
            comment: {
              type: "string"
            },
            sticky: {
              type: "boolean",
              description: "Make the comment persistent on the subject"
            }
          }
        },
        modEventReport: {
          type: "object",
          description: "Report a subject",
          required: ["reportType"],
          properties: {
            comment: {
              type: "string"
            },
            isReporterMuted: {
              type: "boolean",
              description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject."
            },
            reportType: {
              type: "ref",
              ref: "lex:com.atproto.moderation.defs#reasonType"
            }
          }
        },
        modEventLabel: {
          type: "object",
          description: "Apply/Negate labels on a subject",
          required: ["createLabelVals", "negateLabelVals"],
          properties: {
            comment: {
              type: "string"
            },
            createLabelVals: {
              type: "array",
              items: {
                type: "string"
              }
            },
            negateLabelVals: {
              type: "array",
              items: {
                type: "string"
              }
            }
          }
        },
        modEventAcknowledge: {
          type: "object",
          properties: {
            comment: {
              type: "string"
            }
          }
        },
        modEventEscalate: {
          type: "object",
          properties: {
            comment: {
              type: "string"
            }
          }
        },
        modEventMute: {
          type: "object",
          description: "Mute incoming reports on a subject",
          required: ["durationInHours"],
          properties: {
            comment: {
              type: "string"
            },
            durationInHours: {
              type: "integer",
              description: "Indicates how long the subject should remain muted."
            }
          }
        },
        modEventUnmute: {
          type: "object",
          description: "Unmute action on a subject",
          properties: {
            comment: {
              type: "string",
              description: "Describe reasoning behind the reversal."
            }
          }
        },
        modEventMuteReporter: {
          type: "object",
          description: "Mute incoming reports from an account",
          properties: {
            comment: {
              type: "string"
            },
            durationInHours: {
              type: "integer",
              description: "Indicates how long the account should remain muted. Falsy value here means a permanent mute."
            }
          }
        },
        modEventUnmuteReporter: {
          type: "object",
          description: "Unmute incoming reports from an account",
          properties: {
            comment: {
              type: "string",
              description: "Describe reasoning behind the reversal."
            }
          }
        },
        modEventEmail: {
          type: "object",
          description: "Keep a log of outgoing email to a user",
          required: ["subjectLine"],
          properties: {
            subjectLine: {
              type: "string",
              description: "The subject line of the email sent to the user."
            },
            content: {
              type: "string",
              description: "The content of the email sent to the user."
            },
            comment: {
              type: "string",
              description: "Additional comment about the outgoing comm."
            }
          }
        },
        modEventDivert: {
          type: "object",
          description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
          properties: {
            comment: {
              type: "string"
            }
          }
        },
        modEventTag: {
          type: "object",
          description: "Add/Remove a tag on a subject",
          required: ["add", "remove"],
          properties: {
            add: {
              type: "array",
              items: {
                type: "string"
              },
              description: "Tags to be added to the subject. If already exists, won't be duplicated."
            },
            remove: {
              type: "array",
              items: {
                type: "string"
              },
              description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."
            },
            comment: {
              type: "string",
              description: "Additional comment about added/removed tags."
            }
          }
        },
        accountEvent: {
          type: "object",
          description: "Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
          required: ["timestamp", "active"],
          properties: {
            comment: {
              type: "string"
            },
            active: {
              type: "boolean",
              description: "Indicates that the account has a repository which can be fetched from the host that emitted this event."
            },
            status: {
              type: "string",
              knownValues: [
                "unknown",
                "deactivated",
                "deleted",
                "takendown",
                "suspended",
                "tombstoned"
              ]
            },
            timestamp: {
              type: "string",
              format: "datetime"
            }
          }
        },
        identityEvent: {
          type: "object",
          description: "Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
          required: ["timestamp"],
          properties: {
            comment: {
              type: "string"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            pdsHost: {
              type: "string",
              format: "uri"
            },
            tombstone: {
              type: "boolean"
            },
            timestamp: {
              type: "string",
              format: "datetime"
            }
          }
        },
        recordEvent: {
          type: "object",
          description: "Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
          required: ["timestamp", "op"],
          properties: {
            comment: {
              type: "string"
            },
            op: {
              type: "string",
              knownValues: ["create", "update", "delete"]
            },
            cid: {
              type: "string",
              format: "cid"
            },
            timestamp: {
              type: "string",
              format: "datetime"
            }
          }
        },
        repoView: {
          type: "object",
          required: [
            "did",
            "handle",
            "relatedRecords",
            "indexedAt",
            "moderation"
          ],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            email: {
              type: "string"
            },
            relatedRecords: {
              type: "array",
              items: {
                type: "unknown"
              }
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            moderation: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#moderation"
            },
            invitedBy: {
              type: "ref",
              ref: "lex:com.atproto.server.defs#inviteCode"
            },
            invitesDisabled: {
              type: "boolean"
            },
            inviteNote: {
              type: "string"
            },
            deactivatedAt: {
              type: "string",
              format: "datetime"
            },
            threatSignatures: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.admin.defs#threatSignature"
              }
            }
          }
        },
        repoViewDetail: {
          type: "object",
          required: [
            "did",
            "handle",
            "relatedRecords",
            "indexedAt",
            "moderation"
          ],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            handle: {
              type: "string",
              format: "handle"
            },
            email: {
              type: "string"
            },
            relatedRecords: {
              type: "array",
              items: {
                type: "unknown"
              }
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            moderation: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#moderationDetail"
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            invitedBy: {
              type: "ref",
              ref: "lex:com.atproto.server.defs#inviteCode"
            },
            invites: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.server.defs#inviteCode"
              }
            },
            invitesDisabled: {
              type: "boolean"
            },
            inviteNote: {
              type: "string"
            },
            emailConfirmedAt: {
              type: "string",
              format: "datetime"
            },
            deactivatedAt: {
              type: "string",
              format: "datetime"
            },
            threatSignatures: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.admin.defs#threatSignature"
              }
            }
          }
        },
        repoViewNotFound: {
          type: "object",
          required: ["did"],
          properties: {
            did: {
              type: "string",
              format: "did"
            }
          }
        },
        recordView: {
          type: "object",
          required: [
            "uri",
            "cid",
            "value",
            "blobCids",
            "indexedAt",
            "moderation",
            "repo"
          ],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            value: {
              type: "unknown"
            },
            blobCids: {
              type: "array",
              items: {
                type: "string",
                format: "cid"
              }
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            moderation: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#moderation"
            },
            repo: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#repoView"
            }
          }
        },
        recordViewDetail: {
          type: "object",
          required: [
            "uri",
            "cid",
            "value",
            "blobs",
            "indexedAt",
            "moderation",
            "repo"
          ],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            },
            cid: {
              type: "string",
              format: "cid"
            },
            value: {
              type: "unknown"
            },
            blobs: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#blobView"
              }
            },
            labels: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:com.atproto.label.defs#label"
              }
            },
            indexedAt: {
              type: "string",
              format: "datetime"
            },
            moderation: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#moderationDetail"
            },
            repo: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#repoView"
            }
          }
        },
        recordViewNotFound: {
          type: "object",
          required: ["uri"],
          properties: {
            uri: {
              type: "string",
              format: "at-uri"
            }
          }
        },
        moderation: {
          type: "object",
          properties: {
            subjectStatus: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
            }
          }
        },
        moderationDetail: {
          type: "object",
          properties: {
            subjectStatus: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
            }
          }
        },
        blobView: {
          type: "object",
          required: ["cid", "mimeType", "size", "createdAt"],
          properties: {
            cid: {
              type: "string",
              format: "cid"
            },
            mimeType: {
              type: "string"
            },
            size: {
              type: "integer"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            details: {
              type: "union",
              refs: [
                "lex:tools.ozone.moderation.defs#imageDetails",
                "lex:tools.ozone.moderation.defs#videoDetails"
              ]
            },
            moderation: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#moderation"
            }
          }
        },
        imageDetails: {
          type: "object",
          required: ["width", "height"],
          properties: {
            width: {
              type: "integer"
            },
            height: {
              type: "integer"
            }
          }
        },
        videoDetails: {
          type: "object",
          required: ["width", "height", "length"],
          properties: {
            width: {
              type: "integer"
            },
            height: {
              type: "integer"
            },
            length: {
              type: "integer"
            }
          }
        },
        accountHosting: {
          type: "object",
          required: ["status"],
          properties: {
            status: {
              type: "string",
              knownValues: [
                "takendown",
                "suspended",
                "deleted",
                "deactivated",
                "unknown"
              ]
            },
            updatedAt: {
              type: "string",
              format: "datetime"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            deletedAt: {
              type: "string",
              format: "datetime"
            },
            deactivatedAt: {
              type: "string",
              format: "datetime"
            },
            reactivatedAt: {
              type: "string",
              format: "datetime"
            }
          }
        },
        recordHosting: {
          type: "object",
          required: ["status"],
          properties: {
            status: {
              type: "string",
              knownValues: ["deleted", "unknown"]
            },
            updatedAt: {
              type: "string",
              format: "datetime"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            deletedAt: {
              type: "string",
              format: "datetime"
            }
          }
        }
      }
    },
    ToolsOzoneModerationEmitEvent: {
      lexicon: 1,
      id: "tools.ozone.moderation.emitEvent",
      defs: {
        main: {
          type: "procedure",
          description: "Take a moderation action on an actor.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["event", "subject", "createdBy"],
              properties: {
                event: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#modEventTakedown",
                    "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                    "lex:tools.ozone.moderation.defs#modEventEscalate",
                    "lex:tools.ozone.moderation.defs#modEventComment",
                    "lex:tools.ozone.moderation.defs#modEventLabel",
                    "lex:tools.ozone.moderation.defs#modEventReport",
                    "lex:tools.ozone.moderation.defs#modEventMute",
                    "lex:tools.ozone.moderation.defs#modEventUnmute",
                    "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                    "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                    "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                    "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                    "lex:tools.ozone.moderation.defs#modEventEmail",
                    "lex:tools.ozone.moderation.defs#modEventTag",
                    "lex:tools.ozone.moderation.defs#accountEvent",
                    "lex:tools.ozone.moderation.defs#identityEvent",
                    "lex:tools.ozone.moderation.defs#recordEvent"
                  ]
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                subjectBlobCids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                },
                createdBy: {
                  type: "string",
                  format: "did"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#modEventView"
            }
          },
          errors: [
            {
              name: "SubjectHasAction"
            }
          ]
        }
      }
    },
    ToolsOzoneModerationGetEvent: {
      lexicon: 1,
      id: "tools.ozone.moderation.getEvent",
      defs: {
        main: {
          type: "query",
          description: "Get details about a moderation event.",
          parameters: {
            type: "params",
            required: ["id"],
            properties: {
              id: {
                type: "integer"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#modEventViewDetail"
            }
          }
        }
      }
    },
    ToolsOzoneModerationGetRecord: {
      lexicon: 1,
      id: "tools.ozone.moderation.getRecord",
      defs: {
        main: {
          type: "query",
          description: "Get details about a record.",
          parameters: {
            type: "params",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#recordViewDetail"
            }
          },
          errors: [
            {
              name: "RecordNotFound"
            }
          ]
        }
      }
    },
    ToolsOzoneModerationGetRecords: {
      lexicon: 1,
      id: "tools.ozone.moderation.getRecords",
      defs: {
        main: {
          type: "query",
          description: "Get details about some records.",
          parameters: {
            type: "params",
            required: ["uris"],
            properties: {
              uris: {
                type: "array",
                maxLength: 100,
                items: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["records"],
              properties: {
                records: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:tools.ozone.moderation.defs#recordViewDetail",
                      "lex:tools.ozone.moderation.defs#recordViewNotFound"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneModerationGetRepo: {
      lexicon: 1,
      id: "tools.ozone.moderation.getRepo",
      defs: {
        main: {
          type: "query",
          description: "Get details about a repository.",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.moderation.defs#repoViewDetail"
            }
          },
          errors: [
            {
              name: "RepoNotFound"
            }
          ]
        }
      }
    },
    ToolsOzoneModerationGetRepos: {
      lexicon: 1,
      id: "tools.ozone.moderation.getRepos",
      defs: {
        main: {
          type: "query",
          description: "Get details about some repositories.",
          parameters: {
            type: "params",
            required: ["dids"],
            properties: {
              dids: {
                type: "array",
                maxLength: 100,
                items: {
                  type: "string",
                  format: "did"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["repos"],
              properties: {
                repos: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:tools.ozone.moderation.defs#repoViewDetail",
                      "lex:tools.ozone.moderation.defs#repoViewNotFound"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneModerationQueryEvents: {
      lexicon: 1,
      id: "tools.ozone.moderation.queryEvents",
      defs: {
        main: {
          type: "query",
          description: "List moderation events related to a subject.",
          parameters: {
            type: "params",
            properties: {
              types: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned."
              },
              createdBy: {
                type: "string",
                format: "did"
              },
              sortDirection: {
                type: "string",
                default: "desc",
                enum: ["asc", "desc"],
                description: "Sort direction for the events. Defaults to descending order of created at timestamp."
              },
              createdAfter: {
                type: "string",
                format: "datetime",
                description: "Retrieve events created after a given timestamp"
              },
              createdBefore: {
                type: "string",
                format: "datetime",
                description: "Retrieve events created before a given timestamp"
              },
              subject: {
                type: "string",
                format: "uri"
              },
              collections: {
                type: "array",
                maxLength: 20,
                description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                items: {
                  type: "string",
                  format: "nsid"
                }
              },
              subjectType: {
                type: "string",
                description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                knownValues: ["account", "record"]
              },
              includeAllUserRecords: {
                type: "boolean",
                default: !1,
                description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned."
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              hasComment: {
                type: "boolean",
                description: "If true, only events with comments are returned"
              },
              comment: {
                type: "string",
                description: "If specified, only events with comments containing the keyword are returned"
              },
              addedLabels: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "If specified, only events where all of these labels were added are returned"
              },
              removedLabels: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "If specified, only events where all of these labels were removed are returned"
              },
              addedTags: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "If specified, only events where all of these tags were added are returned"
              },
              removedTags: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "If specified, only events where all of these tags were removed are returned"
              },
              reportTypes: {
                type: "array",
                items: {
                  type: "string"
                }
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["events"],
              properties: {
                cursor: {
                  type: "string"
                },
                events: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#modEventView"
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneModerationQueryStatuses: {
      lexicon: 1,
      id: "tools.ozone.moderation.queryStatuses",
      defs: {
        main: {
          type: "query",
          description: "View moderation statuses of subjects (record or repo).",
          parameters: {
            type: "params",
            properties: {
              includeAllUserRecords: {
                type: "boolean",
                description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned."
              },
              subject: {
                type: "string",
                format: "uri",
                description: "The subject to get the status for."
              },
              comment: {
                type: "string",
                description: "Search subjects by keyword from comments"
              },
              reportedAfter: {
                type: "string",
                format: "datetime",
                description: "Search subjects reported after a given timestamp"
              },
              reportedBefore: {
                type: "string",
                format: "datetime",
                description: "Search subjects reported before a given timestamp"
              },
              reviewedAfter: {
                type: "string",
                format: "datetime",
                description: "Search subjects reviewed after a given timestamp"
              },
              hostingDeletedAfter: {
                type: "string",
                format: "datetime",
                description: "Search subjects where the associated record/account was deleted after a given timestamp"
              },
              hostingDeletedBefore: {
                type: "string",
                format: "datetime",
                description: "Search subjects where the associated record/account was deleted before a given timestamp"
              },
              hostingUpdatedAfter: {
                type: "string",
                format: "datetime",
                description: "Search subjects where the associated record/account was updated after a given timestamp"
              },
              hostingUpdatedBefore: {
                type: "string",
                format: "datetime",
                description: "Search subjects where the associated record/account was updated before a given timestamp"
              },
              hostingStatuses: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "Search subjects by the status of the associated record/account"
              },
              reviewedBefore: {
                type: "string",
                format: "datetime",
                description: "Search subjects reviewed before a given timestamp"
              },
              includeMuted: {
                type: "boolean",
                description: "By default, we don't include muted subjects in the results. Set this to true to include them."
              },
              onlyMuted: {
                type: "boolean",
                description: "When set to true, only muted subjects and reporters will be returned."
              },
              reviewState: {
                type: "string",
                description: "Specify when fetching subjects in a certain state"
              },
              ignoreSubjects: {
                type: "array",
                items: {
                  type: "string",
                  format: "uri"
                }
              },
              lastReviewedBy: {
                type: "string",
                format: "did",
                description: "Get all subject statuses that were reviewed by a specific moderator"
              },
              sortField: {
                type: "string",
                default: "lastReportedAt",
                enum: ["lastReviewedAt", "lastReportedAt"]
              },
              sortDirection: {
                type: "string",
                default: "desc",
                enum: ["asc", "desc"]
              },
              takendown: {
                type: "boolean",
                description: "Get subjects that were taken down"
              },
              appealed: {
                type: "boolean",
                description: "Get subjects in unresolved appealed status"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              tags: {
                type: "array",
                items: {
                  type: "string"
                }
              },
              excludeTags: {
                type: "array",
                items: {
                  type: "string"
                }
              },
              cursor: {
                type: "string"
              },
              collections: {
                type: "array",
                maxLength: 20,
                description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                items: {
                  type: "string",
                  format: "nsid"
                }
              },
              subjectType: {
                type: "string",
                description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                knownValues: ["account", "record"]
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["subjectStatuses"],
              properties: {
                cursor: {
                  type: "string"
                },
                subjectStatuses: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneModerationSearchRepos: {
      lexicon: 1,
      id: "tools.ozone.moderation.searchRepos",
      defs: {
        main: {
          type: "query",
          description: "Find repositories based on a search term.",
          parameters: {
            type: "params",
            properties: {
              term: {
                type: "string",
                description: "DEPRECATED: use 'q' instead"
              },
              q: {
                type: "string"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["repos"],
              properties: {
                cursor: {
                  type: "string"
                },
                repos: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#repoView"
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneServerGetConfig: {
      lexicon: 1,
      id: "tools.ozone.server.getConfig",
      defs: {
        main: {
          type: "query",
          description: "Get details about ozone's server configuration.",
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {
                appview: {
                  type: "ref",
                  ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                },
                pds: {
                  type: "ref",
                  ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                },
                blobDivert: {
                  type: "ref",
                  ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                },
                chat: {
                  type: "ref",
                  ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:tools.ozone.server.getConfig#viewerConfig"
                }
              }
            }
          }
        },
        serviceConfig: {
          type: "object",
          properties: {
            url: {
              type: "string",
              format: "uri"
            }
          }
        },
        viewerConfig: {
          type: "object",
          properties: {
            role: {
              type: "string",
              knownValues: [
                "tools.ozone.team.defs#roleAdmin",
                "tools.ozone.team.defs#roleModerator",
                "tools.ozone.team.defs#roleTriage"
              ]
            }
          }
        }
      }
    },
    ToolsOzoneSetAddValues: {
      lexicon: 1,
      id: "tools.ozone.set.addValues",
      defs: {
        main: {
          type: "procedure",
          description: "Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["name", "values"],
              properties: {
                name: {
                  type: "string",
                  description: "Name of the set to add values to"
                },
                values: {
                  type: "array",
                  minLength: 1,
                  maxLength: 1e3,
                  items: {
                    type: "string"
                  },
                  description: "Array of string values to add to the set"
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneSetDefs: {
      lexicon: 1,
      id: "tools.ozone.set.defs",
      defs: {
        set: {
          type: "object",
          required: ["name"],
          properties: {
            name: {
              type: "string",
              minLength: 3,
              maxLength: 128
            },
            description: {
              type: "string",
              maxGraphemes: 1024,
              maxLength: 10240
            }
          }
        },
        setView: {
          type: "object",
          required: ["name", "setSize", "createdAt", "updatedAt"],
          properties: {
            name: {
              type: "string",
              minLength: 3,
              maxLength: 128
            },
            description: {
              type: "string",
              maxGraphemes: 1024,
              maxLength: 10240
            },
            setSize: {
              type: "integer"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            updatedAt: {
              type: "string",
              format: "datetime"
            }
          }
        }
      }
    },
    ToolsOzoneSetDeleteSet: {
      lexicon: 1,
      id: "tools.ozone.set.deleteSet",
      defs: {
        main: {
          type: "procedure",
          description: "Delete an entire set. Attempting to delete a set that does not exist will result in an error.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  description: "Name of the set to delete"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {}
            }
          },
          errors: [
            {
              name: "SetNotFound",
              description: "set with the given name does not exist"
            }
          ]
        }
      }
    },
    ToolsOzoneSetDeleteValues: {
      lexicon: 1,
      id: "tools.ozone.set.deleteValues",
      defs: {
        main: {
          type: "procedure",
          description: "Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["name", "values"],
              properties: {
                name: {
                  type: "string",
                  description: "Name of the set to delete values from"
                },
                values: {
                  type: "array",
                  minLength: 1,
                  items: {
                    type: "string"
                  },
                  description: "Array of string values to delete from the set"
                }
              }
            }
          },
          errors: [
            {
              name: "SetNotFound",
              description: "set with the given name does not exist"
            }
          ]
        }
      }
    },
    ToolsOzoneSetGetValues: {
      lexicon: 1,
      id: "tools.ozone.set.getValues",
      defs: {
        main: {
          type: "query",
          description: "Get a specific set and its values",
          parameters: {
            type: "params",
            required: ["name"],
            properties: {
              name: {
                type: "string"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 1e3,
                default: 100
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["set", "values"],
              properties: {
                set: {
                  type: "ref",
                  ref: "lex:tools.ozone.set.defs#setView"
                },
                values: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                cursor: {
                  type: "string"
                }
              }
            }
          },
          errors: [
            {
              name: "SetNotFound",
              description: "set with the given name does not exist"
            }
          ]
        }
      }
    },
    ToolsOzoneSetQuerySets: {
      lexicon: 1,
      id: "tools.ozone.set.querySets",
      defs: {
        main: {
          type: "query",
          description: "Query available sets",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              },
              namePrefix: {
                type: "string"
              },
              sortBy: {
                type: "string",
                enum: ["name", "createdAt", "updatedAt"],
                default: "name"
              },
              sortDirection: {
                type: "string",
                default: "asc",
                enum: ["asc", "desc"],
                description: "Defaults to ascending order of name field."
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["sets"],
              properties: {
                sets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.set.defs#setView"
                  }
                },
                cursor: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneSetUpsertSet: {
      lexicon: 1,
      id: "tools.ozone.set.upsertSet",
      defs: {
        main: {
          type: "procedure",
          description: "Create or update set metadata",
          input: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.set.defs#set"
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.set.defs#setView"
            }
          }
        }
      }
    },
    ToolsOzoneSettingDefs: {
      lexicon: 1,
      id: "tools.ozone.setting.defs",
      defs: {
        option: {
          type: "object",
          required: [
            "key",
            "value",
            "did",
            "scope",
            "createdBy",
            "lastUpdatedBy"
          ],
          properties: {
            key: {
              type: "string",
              format: "nsid"
            },
            did: {
              type: "string",
              format: "did"
            },
            value: {
              type: "unknown"
            },
            description: {
              type: "string",
              maxGraphemes: 1024,
              maxLength: 10240
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            updatedAt: {
              type: "string",
              format: "datetime"
            },
            managerRole: {
              type: "string",
              knownValues: [
                "tools.ozone.team.defs#roleModerator",
                "tools.ozone.team.defs#roleTriage",
                "tools.ozone.team.defs#roleAdmin"
              ]
            },
            scope: {
              type: "string",
              knownValues: ["instance", "personal"]
            },
            createdBy: {
              type: "string",
              format: "did"
            },
            lastUpdatedBy: {
              type: "string",
              format: "did"
            }
          }
        }
      }
    },
    ToolsOzoneSettingListOptions: {
      lexicon: 1,
      id: "tools.ozone.setting.listOptions",
      defs: {
        main: {
          type: "query",
          description: "List settings with optional filtering",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              },
              scope: {
                type: "string",
                knownValues: ["instance", "personal"],
                default: "instance"
              },
              prefix: {
                type: "string",
                description: "Filter keys by prefix"
              },
              keys: {
                type: "array",
                maxLength: 100,
                items: {
                  type: "string",
                  format: "nsid"
                },
                description: "Filter for only the specified keys. Ignored if prefix is provided"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["options"],
              properties: {
                cursor: {
                  type: "string"
                },
                options: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.setting.defs#option"
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneSettingRemoveOptions: {
      lexicon: 1,
      id: "tools.ozone.setting.removeOptions",
      defs: {
        main: {
          type: "procedure",
          description: "Delete settings by key",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["keys", "scope"],
              properties: {
                keys: {
                  type: "array",
                  minLength: 1,
                  maxLength: 200,
                  items: {
                    type: "string",
                    format: "nsid"
                  }
                },
                scope: {
                  type: "string",
                  knownValues: ["instance", "personal"]
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              properties: {}
            }
          }
        }
      }
    },
    ToolsOzoneSettingUpsertOption: {
      lexicon: 1,
      id: "tools.ozone.setting.upsertOption",
      defs: {
        main: {
          type: "procedure",
          description: "Create or update setting option",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["key", "scope", "value"],
              properties: {
                key: {
                  type: "string",
                  format: "nsid"
                },
                scope: {
                  type: "string",
                  knownValues: ["instance", "personal"]
                },
                value: {
                  type: "unknown"
                },
                description: {
                  type: "string",
                  maxLength: 2e3
                },
                managerRole: {
                  type: "string",
                  knownValues: [
                    "tools.ozone.team.defs#roleModerator",
                    "tools.ozone.team.defs#roleTriage",
                    "tools.ozone.team.defs#roleAdmin"
                  ]
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["option"],
              properties: {
                option: {
                  type: "ref",
                  ref: "lex:tools.ozone.setting.defs#option"
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneSignatureDefs: {
      lexicon: 1,
      id: "tools.ozone.signature.defs",
      defs: {
        sigDetail: {
          type: "object",
          required: ["property", "value"],
          properties: {
            property: {
              type: "string"
            },
            value: {
              type: "string"
            }
          }
        }
      }
    },
    ToolsOzoneSignatureFindCorrelation: {
      lexicon: 1,
      id: "tools.ozone.signature.findCorrelation",
      defs: {
        main: {
          type: "query",
          description: "Find all correlated threat signatures between 2 or more accounts.",
          parameters: {
            type: "params",
            required: ["dids"],
            properties: {
              dids: {
                type: "array",
                items: {
                  type: "string",
                  format: "did"
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["details"],
              properties: {
                details: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.signature.defs#sigDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneSignatureFindRelatedAccounts: {
      lexicon: 1,
      id: "tools.ozone.signature.findRelatedAccounts",
      defs: {
        main: {
          type: "query",
          description: "Get accounts that share some matching threat signatures with the root account.",
          parameters: {
            type: "params",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              cursor: {
                type: "string"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["accounts"],
              properties: {
                cursor: {
                  type: "string"
                },
                accounts: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.signature.findRelatedAccounts#relatedAccount"
                  }
                }
              }
            }
          }
        },
        relatedAccount: {
          type: "object",
          required: ["account"],
          properties: {
            account: {
              type: "ref",
              ref: "lex:com.atproto.admin.defs#accountView"
            },
            similarities: {
              type: "array",
              items: {
                type: "ref",
                ref: "lex:tools.ozone.signature.defs#sigDetail"
              }
            }
          }
        }
      }
    },
    ToolsOzoneSignatureSearchAccounts: {
      lexicon: 1,
      id: "tools.ozone.signature.searchAccounts",
      defs: {
        main: {
          type: "query",
          description: "Search for accounts that match one or more threat signature values.",
          parameters: {
            type: "params",
            required: ["values"],
            properties: {
              values: {
                type: "array",
                items: {
                  type: "string"
                }
              },
              cursor: {
                type: "string"
              },
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["accounts"],
              properties: {
                cursor: {
                  type: "string"
                },
                accounts: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#accountView"
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneTeamAddMember: {
      lexicon: 1,
      id: "tools.ozone.team.addMember",
      defs: {
        main: {
          type: "procedure",
          description: "Add a member to the ozone team. Requires admin role.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did", "role"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                role: {
                  type: "string",
                  knownValues: [
                    "tools.ozone.team.defs#roleAdmin",
                    "tools.ozone.team.defs#roleModerator",
                    "tools.ozone.team.defs#roleTriage"
                  ]
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.team.defs#member"
            }
          },
          errors: [
            {
              name: "MemberAlreadyExists",
              description: "Member already exists in the team."
            }
          ]
        }
      }
    },
    ToolsOzoneTeamDefs: {
      lexicon: 1,
      id: "tools.ozone.team.defs",
      defs: {
        member: {
          type: "object",
          required: ["did", "role"],
          properties: {
            did: {
              type: "string",
              format: "did"
            },
            disabled: {
              type: "boolean"
            },
            profile: {
              type: "ref",
              ref: "lex:app.bsky.actor.defs#profileViewDetailed"
            },
            createdAt: {
              type: "string",
              format: "datetime"
            },
            updatedAt: {
              type: "string",
              format: "datetime"
            },
            lastUpdatedBy: {
              type: "string"
            },
            role: {
              type: "string",
              knownValues: [
                "lex:tools.ozone.team.defs#roleAdmin",
                "lex:tools.ozone.team.defs#roleModerator",
                "lex:tools.ozone.team.defs#roleTriage"
              ]
            }
          }
        },
        roleAdmin: {
          type: "token",
          description: "Admin role. Highest level of access, can perform all actions."
        },
        roleModerator: {
          type: "token",
          description: "Moderator role. Can perform most actions."
        },
        roleTriage: {
          type: "token",
          description: "Triage role. Mostly intended for monitoring and escalating issues."
        }
      }
    },
    ToolsOzoneTeamDeleteMember: {
      lexicon: 1,
      id: "tools.ozone.team.deleteMember",
      defs: {
        main: {
          type: "procedure",
          description: "Delete a member from ozone team. Requires admin role.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          },
          errors: [
            {
              name: "MemberNotFound",
              description: "The member being deleted does not exist"
            },
            {
              name: "CannotDeleteSelf",
              description: "You can not delete yourself from the team"
            }
          ]
        }
      }
    },
    ToolsOzoneTeamListMembers: {
      lexicon: 1,
      id: "tools.ozone.team.listMembers",
      defs: {
        main: {
          type: "query",
          description: "List all members with access to the ozone service.",
          parameters: {
            type: "params",
            properties: {
              limit: {
                type: "integer",
                minimum: 1,
                maximum: 100,
                default: 50
              },
              cursor: {
                type: "string"
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["members"],
              properties: {
                cursor: {
                  type: "string"
                },
                members: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.team.defs#member"
                  }
                }
              }
            }
          }
        }
      }
    },
    ToolsOzoneTeamUpdateMember: {
      lexicon: 1,
      id: "tools.ozone.team.updateMember",
      defs: {
        main: {
          type: "procedure",
          description: "Update a member in the ozone service. Requires admin role.",
          input: {
            encoding: "application/json",
            schema: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                disabled: {
                  type: "boolean"
                },
                role: {
                  type: "string",
                  knownValues: [
                    "tools.ozone.team.defs#roleAdmin",
                    "tools.ozone.team.defs#roleModerator",
                    "tools.ozone.team.defs#roleTriage"
                  ]
                }
              }
            }
          },
          output: {
            encoding: "application/json",
            schema: {
              type: "ref",
              ref: "lex:tools.ozone.team.defs#member"
            }
          },
          errors: [
            {
              name: "MemberNotFound",
              description: "The member being updated does not exist in the team"
            }
          ]
        }
      }
    }
  }, t.schemas = Object.values(t.schemaDict), t.lexicons = new e.Lexicons(t.schemas), t.ids = {
    ComAtprotoAdminDefs: "com.atproto.admin.defs",
    ComAtprotoAdminDeleteAccount: "com.atproto.admin.deleteAccount",
    ComAtprotoAdminDisableAccountInvites: "com.atproto.admin.disableAccountInvites",
    ComAtprotoAdminDisableInviteCodes: "com.atproto.admin.disableInviteCodes",
    ComAtprotoAdminEnableAccountInvites: "com.atproto.admin.enableAccountInvites",
    ComAtprotoAdminGetAccountInfo: "com.atproto.admin.getAccountInfo",
    ComAtprotoAdminGetAccountInfos: "com.atproto.admin.getAccountInfos",
    ComAtprotoAdminGetInviteCodes: "com.atproto.admin.getInviteCodes",
    ComAtprotoAdminGetSubjectStatus: "com.atproto.admin.getSubjectStatus",
    ComAtprotoAdminSearchAccounts: "com.atproto.admin.searchAccounts",
    ComAtprotoAdminSendEmail: "com.atproto.admin.sendEmail",
    ComAtprotoAdminUpdateAccountEmail: "com.atproto.admin.updateAccountEmail",
    ComAtprotoAdminUpdateAccountHandle: "com.atproto.admin.updateAccountHandle",
    ComAtprotoAdminUpdateAccountPassword: "com.atproto.admin.updateAccountPassword",
    ComAtprotoAdminUpdateSubjectStatus: "com.atproto.admin.updateSubjectStatus",
    ComAtprotoIdentityGetRecommendedDidCredentials: "com.atproto.identity.getRecommendedDidCredentials",
    ComAtprotoIdentityRequestPlcOperationSignature: "com.atproto.identity.requestPlcOperationSignature",
    ComAtprotoIdentityResolveHandle: "com.atproto.identity.resolveHandle",
    ComAtprotoIdentitySignPlcOperation: "com.atproto.identity.signPlcOperation",
    ComAtprotoIdentitySubmitPlcOperation: "com.atproto.identity.submitPlcOperation",
    ComAtprotoIdentityUpdateHandle: "com.atproto.identity.updateHandle",
    ComAtprotoLabelDefs: "com.atproto.label.defs",
    ComAtprotoLabelQueryLabels: "com.atproto.label.queryLabels",
    ComAtprotoLabelSubscribeLabels: "com.atproto.label.subscribeLabels",
    ComAtprotoModerationCreateReport: "com.atproto.moderation.createReport",
    ComAtprotoModerationDefs: "com.atproto.moderation.defs",
    ComAtprotoRepoApplyWrites: "com.atproto.repo.applyWrites",
    ComAtprotoRepoCreateRecord: "com.atproto.repo.createRecord",
    ComAtprotoRepoDefs: "com.atproto.repo.defs",
    ComAtprotoRepoDeleteRecord: "com.atproto.repo.deleteRecord",
    ComAtprotoRepoDescribeRepo: "com.atproto.repo.describeRepo",
    ComAtprotoRepoGetRecord: "com.atproto.repo.getRecord",
    ComAtprotoRepoImportRepo: "com.atproto.repo.importRepo",
    ComAtprotoRepoListMissingBlobs: "com.atproto.repo.listMissingBlobs",
    ComAtprotoRepoListRecords: "com.atproto.repo.listRecords",
    ComAtprotoRepoPutRecord: "com.atproto.repo.putRecord",
    ComAtprotoRepoStrongRef: "com.atproto.repo.strongRef",
    ComAtprotoRepoUploadBlob: "com.atproto.repo.uploadBlob",
    ComAtprotoServerActivateAccount: "com.atproto.server.activateAccount",
    ComAtprotoServerCheckAccountStatus: "com.atproto.server.checkAccountStatus",
    ComAtprotoServerConfirmEmail: "com.atproto.server.confirmEmail",
    ComAtprotoServerCreateAccount: "com.atproto.server.createAccount",
    ComAtprotoServerCreateAppPassword: "com.atproto.server.createAppPassword",
    ComAtprotoServerCreateInviteCode: "com.atproto.server.createInviteCode",
    ComAtprotoServerCreateInviteCodes: "com.atproto.server.createInviteCodes",
    ComAtprotoServerCreateSession: "com.atproto.server.createSession",
    ComAtprotoServerDeactivateAccount: "com.atproto.server.deactivateAccount",
    ComAtprotoServerDefs: "com.atproto.server.defs",
    ComAtprotoServerDeleteAccount: "com.atproto.server.deleteAccount",
    ComAtprotoServerDeleteSession: "com.atproto.server.deleteSession",
    ComAtprotoServerDescribeServer: "com.atproto.server.describeServer",
    ComAtprotoServerGetAccountInviteCodes: "com.atproto.server.getAccountInviteCodes",
    ComAtprotoServerGetServiceAuth: "com.atproto.server.getServiceAuth",
    ComAtprotoServerGetSession: "com.atproto.server.getSession",
    ComAtprotoServerListAppPasswords: "com.atproto.server.listAppPasswords",
    ComAtprotoServerRefreshSession: "com.atproto.server.refreshSession",
    ComAtprotoServerRequestAccountDelete: "com.atproto.server.requestAccountDelete",
    ComAtprotoServerRequestEmailConfirmation: "com.atproto.server.requestEmailConfirmation",
    ComAtprotoServerRequestEmailUpdate: "com.atproto.server.requestEmailUpdate",
    ComAtprotoServerRequestPasswordReset: "com.atproto.server.requestPasswordReset",
    ComAtprotoServerReserveSigningKey: "com.atproto.server.reserveSigningKey",
    ComAtprotoServerResetPassword: "com.atproto.server.resetPassword",
    ComAtprotoServerRevokeAppPassword: "com.atproto.server.revokeAppPassword",
    ComAtprotoServerUpdateEmail: "com.atproto.server.updateEmail",
    ComAtprotoSyncGetBlob: "com.atproto.sync.getBlob",
    ComAtprotoSyncGetBlocks: "com.atproto.sync.getBlocks",
    ComAtprotoSyncGetCheckout: "com.atproto.sync.getCheckout",
    ComAtprotoSyncGetHead: "com.atproto.sync.getHead",
    ComAtprotoSyncGetLatestCommit: "com.atproto.sync.getLatestCommit",
    ComAtprotoSyncGetRecord: "com.atproto.sync.getRecord",
    ComAtprotoSyncGetRepo: "com.atproto.sync.getRepo",
    ComAtprotoSyncGetRepoStatus: "com.atproto.sync.getRepoStatus",
    ComAtprotoSyncListBlobs: "com.atproto.sync.listBlobs",
    ComAtprotoSyncListRepos: "com.atproto.sync.listRepos",
    ComAtprotoSyncNotifyOfUpdate: "com.atproto.sync.notifyOfUpdate",
    ComAtprotoSyncRequestCrawl: "com.atproto.sync.requestCrawl",
    ComAtprotoSyncSubscribeRepos: "com.atproto.sync.subscribeRepos",
    ComAtprotoTempAddReservedHandle: "com.atproto.temp.addReservedHandle",
    ComAtprotoTempCheckSignupQueue: "com.atproto.temp.checkSignupQueue",
    ComAtprotoTempFetchLabels: "com.atproto.temp.fetchLabels",
    ComAtprotoTempRequestPhoneVerification: "com.atproto.temp.requestPhoneVerification",
    AppBskyActorDefs: "app.bsky.actor.defs",
    AppBskyActorGetPreferences: "app.bsky.actor.getPreferences",
    AppBskyActorGetProfile: "app.bsky.actor.getProfile",
    AppBskyActorGetProfiles: "app.bsky.actor.getProfiles",
    AppBskyActorGetSuggestions: "app.bsky.actor.getSuggestions",
    AppBskyActorProfile: "app.bsky.actor.profile",
    AppBskyActorPutPreferences: "app.bsky.actor.putPreferences",
    AppBskyActorSearchActors: "app.bsky.actor.searchActors",
    AppBskyActorSearchActorsTypeahead: "app.bsky.actor.searchActorsTypeahead",
    AppBskyEmbedDefs: "app.bsky.embed.defs",
    AppBskyEmbedExternal: "app.bsky.embed.external",
    AppBskyEmbedImages: "app.bsky.embed.images",
    AppBskyEmbedRecord: "app.bsky.embed.record",
    AppBskyEmbedRecordWithMedia: "app.bsky.embed.recordWithMedia",
    AppBskyEmbedVideo: "app.bsky.embed.video",
    AppBskyFeedDefs: "app.bsky.feed.defs",
    AppBskyFeedDescribeFeedGenerator: "app.bsky.feed.describeFeedGenerator",
    AppBskyFeedGenerator: "app.bsky.feed.generator",
    AppBskyFeedGetActorFeeds: "app.bsky.feed.getActorFeeds",
    AppBskyFeedGetActorLikes: "app.bsky.feed.getActorLikes",
    AppBskyFeedGetAuthorFeed: "app.bsky.feed.getAuthorFeed",
    AppBskyFeedGetFeed: "app.bsky.feed.getFeed",
    AppBskyFeedGetFeedGenerator: "app.bsky.feed.getFeedGenerator",
    AppBskyFeedGetFeedGenerators: "app.bsky.feed.getFeedGenerators",
    AppBskyFeedGetFeedSkeleton: "app.bsky.feed.getFeedSkeleton",
    AppBskyFeedGetLikes: "app.bsky.feed.getLikes",
    AppBskyFeedGetListFeed: "app.bsky.feed.getListFeed",
    AppBskyFeedGetPostThread: "app.bsky.feed.getPostThread",
    AppBskyFeedGetPosts: "app.bsky.feed.getPosts",
    AppBskyFeedGetQuotes: "app.bsky.feed.getQuotes",
    AppBskyFeedGetRepostedBy: "app.bsky.feed.getRepostedBy",
    AppBskyFeedGetSuggestedFeeds: "app.bsky.feed.getSuggestedFeeds",
    AppBskyFeedGetTimeline: "app.bsky.feed.getTimeline",
    AppBskyFeedLike: "app.bsky.feed.like",
    AppBskyFeedPost: "app.bsky.feed.post",
    AppBskyFeedPostgate: "app.bsky.feed.postgate",
    AppBskyFeedRepost: "app.bsky.feed.repost",
    AppBskyFeedSearchPosts: "app.bsky.feed.searchPosts",
    AppBskyFeedSendInteractions: "app.bsky.feed.sendInteractions",
    AppBskyFeedThreadgate: "app.bsky.feed.threadgate",
    AppBskyGraphBlock: "app.bsky.graph.block",
    AppBskyGraphDefs: "app.bsky.graph.defs",
    AppBskyGraphFollow: "app.bsky.graph.follow",
    AppBskyGraphGetActorStarterPacks: "app.bsky.graph.getActorStarterPacks",
    AppBskyGraphGetBlocks: "app.bsky.graph.getBlocks",
    AppBskyGraphGetFollowers: "app.bsky.graph.getFollowers",
    AppBskyGraphGetFollows: "app.bsky.graph.getFollows",
    AppBskyGraphGetKnownFollowers: "app.bsky.graph.getKnownFollowers",
    AppBskyGraphGetList: "app.bsky.graph.getList",
    AppBskyGraphGetListBlocks: "app.bsky.graph.getListBlocks",
    AppBskyGraphGetListMutes: "app.bsky.graph.getListMutes",
    AppBskyGraphGetLists: "app.bsky.graph.getLists",
    AppBskyGraphGetMutes: "app.bsky.graph.getMutes",
    AppBskyGraphGetRelationships: "app.bsky.graph.getRelationships",
    AppBskyGraphGetStarterPack: "app.bsky.graph.getStarterPack",
    AppBskyGraphGetStarterPacks: "app.bsky.graph.getStarterPacks",
    AppBskyGraphGetSuggestedFollowsByActor: "app.bsky.graph.getSuggestedFollowsByActor",
    AppBskyGraphList: "app.bsky.graph.list",
    AppBskyGraphListblock: "app.bsky.graph.listblock",
    AppBskyGraphListitem: "app.bsky.graph.listitem",
    AppBskyGraphMuteActor: "app.bsky.graph.muteActor",
    AppBskyGraphMuteActorList: "app.bsky.graph.muteActorList",
    AppBskyGraphMuteThread: "app.bsky.graph.muteThread",
    AppBskyGraphSearchStarterPacks: "app.bsky.graph.searchStarterPacks",
    AppBskyGraphStarterpack: "app.bsky.graph.starterpack",
    AppBskyGraphUnmuteActor: "app.bsky.graph.unmuteActor",
    AppBskyGraphUnmuteActorList: "app.bsky.graph.unmuteActorList",
    AppBskyGraphUnmuteThread: "app.bsky.graph.unmuteThread",
    AppBskyLabelerDefs: "app.bsky.labeler.defs",
    AppBskyLabelerGetServices: "app.bsky.labeler.getServices",
    AppBskyLabelerService: "app.bsky.labeler.service",
    AppBskyNotificationGetUnreadCount: "app.bsky.notification.getUnreadCount",
    AppBskyNotificationListNotifications: "app.bsky.notification.listNotifications",
    AppBskyNotificationPutPreferences: "app.bsky.notification.putPreferences",
    AppBskyNotificationRegisterPush: "app.bsky.notification.registerPush",
    AppBskyNotificationUpdateSeen: "app.bsky.notification.updateSeen",
    AppBskyRichtextFacet: "app.bsky.richtext.facet",
    AppBskyUnspeccedDefs: "app.bsky.unspecced.defs",
    AppBskyUnspeccedGetConfig: "app.bsky.unspecced.getConfig",
    AppBskyUnspeccedGetPopularFeedGenerators: "app.bsky.unspecced.getPopularFeedGenerators",
    AppBskyUnspeccedGetSuggestionsSkeleton: "app.bsky.unspecced.getSuggestionsSkeleton",
    AppBskyUnspeccedGetTaggedSuggestions: "app.bsky.unspecced.getTaggedSuggestions",
    AppBskyUnspeccedSearchActorsSkeleton: "app.bsky.unspecced.searchActorsSkeleton",
    AppBskyUnspeccedSearchPostsSkeleton: "app.bsky.unspecced.searchPostsSkeleton",
    AppBskyUnspeccedSearchStarterPacksSkeleton: "app.bsky.unspecced.searchStarterPacksSkeleton",
    AppBskyVideoDefs: "app.bsky.video.defs",
    AppBskyVideoGetJobStatus: "app.bsky.video.getJobStatus",
    AppBskyVideoGetUploadLimits: "app.bsky.video.getUploadLimits",
    AppBskyVideoUploadVideo: "app.bsky.video.uploadVideo",
    ChatBskyActorDeclaration: "chat.bsky.actor.declaration",
    ChatBskyActorDefs: "chat.bsky.actor.defs",
    ChatBskyActorDeleteAccount: "chat.bsky.actor.deleteAccount",
    ChatBskyActorExportAccountData: "chat.bsky.actor.exportAccountData",
    ChatBskyConvoDefs: "chat.bsky.convo.defs",
    ChatBskyConvoDeleteMessageForSelf: "chat.bsky.convo.deleteMessageForSelf",
    ChatBskyConvoGetConvo: "chat.bsky.convo.getConvo",
    ChatBskyConvoGetConvoForMembers: "chat.bsky.convo.getConvoForMembers",
    ChatBskyConvoGetLog: "chat.bsky.convo.getLog",
    ChatBskyConvoGetMessages: "chat.bsky.convo.getMessages",
    ChatBskyConvoLeaveConvo: "chat.bsky.convo.leaveConvo",
    ChatBskyConvoListConvos: "chat.bsky.convo.listConvos",
    ChatBskyConvoMuteConvo: "chat.bsky.convo.muteConvo",
    ChatBskyConvoSendMessage: "chat.bsky.convo.sendMessage",
    ChatBskyConvoSendMessageBatch: "chat.bsky.convo.sendMessageBatch",
    ChatBskyConvoUnmuteConvo: "chat.bsky.convo.unmuteConvo",
    ChatBskyConvoUpdateRead: "chat.bsky.convo.updateRead",
    ChatBskyModerationGetActorMetadata: "chat.bsky.moderation.getActorMetadata",
    ChatBskyModerationGetMessageContext: "chat.bsky.moderation.getMessageContext",
    ChatBskyModerationUpdateActorAccess: "chat.bsky.moderation.updateActorAccess",
    ToolsOzoneCommunicationCreateTemplate: "tools.ozone.communication.createTemplate",
    ToolsOzoneCommunicationDefs: "tools.ozone.communication.defs",
    ToolsOzoneCommunicationDeleteTemplate: "tools.ozone.communication.deleteTemplate",
    ToolsOzoneCommunicationListTemplates: "tools.ozone.communication.listTemplates",
    ToolsOzoneCommunicationUpdateTemplate: "tools.ozone.communication.updateTemplate",
    ToolsOzoneModerationDefs: "tools.ozone.moderation.defs",
    ToolsOzoneModerationEmitEvent: "tools.ozone.moderation.emitEvent",
    ToolsOzoneModerationGetEvent: "tools.ozone.moderation.getEvent",
    ToolsOzoneModerationGetRecord: "tools.ozone.moderation.getRecord",
    ToolsOzoneModerationGetRecords: "tools.ozone.moderation.getRecords",
    ToolsOzoneModerationGetRepo: "tools.ozone.moderation.getRepo",
    ToolsOzoneModerationGetRepos: "tools.ozone.moderation.getRepos",
    ToolsOzoneModerationQueryEvents: "tools.ozone.moderation.queryEvents",
    ToolsOzoneModerationQueryStatuses: "tools.ozone.moderation.queryStatuses",
    ToolsOzoneModerationSearchRepos: "tools.ozone.moderation.searchRepos",
    ToolsOzoneServerGetConfig: "tools.ozone.server.getConfig",
    ToolsOzoneSetAddValues: "tools.ozone.set.addValues",
    ToolsOzoneSetDefs: "tools.ozone.set.defs",
    ToolsOzoneSetDeleteSet: "tools.ozone.set.deleteSet",
    ToolsOzoneSetDeleteValues: "tools.ozone.set.deleteValues",
    ToolsOzoneSetGetValues: "tools.ozone.set.getValues",
    ToolsOzoneSetQuerySets: "tools.ozone.set.querySets",
    ToolsOzoneSetUpsertSet: "tools.ozone.set.upsertSet",
    ToolsOzoneSettingDefs: "tools.ozone.setting.defs",
    ToolsOzoneSettingListOptions: "tools.ozone.setting.listOptions",
    ToolsOzoneSettingRemoveOptions: "tools.ozone.setting.removeOptions",
    ToolsOzoneSettingUpsertOption: "tools.ozone.setting.upsertOption",
    ToolsOzoneSignatureDefs: "tools.ozone.signature.defs",
    ToolsOzoneSignatureFindCorrelation: "tools.ozone.signature.findCorrelation",
    ToolsOzoneSignatureFindRelatedAccounts: "tools.ozone.signature.findRelatedAccounts",
    ToolsOzoneSignatureSearchAccounts: "tools.ozone.signature.searchAccounts",
    ToolsOzoneTeamAddMember: "tools.ozone.team.addMember",
    ToolsOzoneTeamDefs: "tools.ozone.team.defs",
    ToolsOzoneTeamDeleteMember: "tools.ozone.team.deleteMember",
    ToolsOzoneTeamListMembers: "tools.ozone.team.listMembers",
    ToolsOzoneTeamUpdateMember: "tools.ozone.team.updateMember"
  };
})(O);
var Np = {};
Object.defineProperty(Np, "__esModule", { value: !0 });
var Sn = {};
Object.defineProperty(Sn, "__esModule", { value: !0 });
Sn.BSKY_LABELER_DID = void 0;
Sn.BSKY_LABELER_DID = "did:plc:ar7c4by46qjdydhdevvrndac";
var no = {};
(function(t) {
  var e = L && L.__importDefault || function(E) {
    return E && E.__esModule ? E : { default: E };
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), t.nuxSchema = t.asDid = t.isDid = void 0, t.sanitizeMutedWordValue = u, t.savedFeedsToUriArrays = c, t.getSavedFeedType = l, t.validateSavedFeed = f, t.validateNux = A;
  const r = Jr, n = Bt, s = e(wr);
  function u(E) {
    return E.trim().replace(/^#(?!\ufe0f)/, "").replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, "");
  }
  function c(E) {
    const v = [], k = [];
    for (const P of E)
      P.pinned && v.push(P.value), k.push(P.value);
    return {
      pinned: v,
      saved: k
    };
  }
  function l(E) {
    switch (new r.AtUri(E).collection) {
      case "app.bsky.feed.generator":
        return "feed";
      case "app.bsky.graph.list":
        return "list";
      default:
        return "unknown";
    }
  }
  function f(E) {
    if (new n.TID(E.id), ["feed", "list"].includes(E.type)) {
      const v = new r.AtUri(E.value), k = v.collection === "app.bsky.feed.generator", P = v.collection === "app.bsky.graph.list";
      if (E.type === "feed" && !k)
        throw new Error(`Saved feed of type 'feed' must be a feed, got ${v.collection}`);
      if (E.type === "list" && !P)
        throw new Error(`Saved feed of type 'list' must be a list, got ${v.collection}`);
    }
  }
  const p = (E) => typeof E == "string" && E.startsWith("did:") && E.includes(":", 4) && E.length > 8 && E.length <= 2048;
  t.isDid = p;
  const m = (E) => {
    if ((0, t.isDid)(E))
      return E;
    throw new TypeError(`Invalid DID: ${E}`);
  };
  t.asDid = m, t.nuxSchema = s.default.object({
    id: s.default.string().max(64),
    completed: s.default.boolean(),
    data: s.default.string().max(300).optional(),
    expiresAt: s.default.string().datetime().optional()
  }).strict();
  function A(E) {
    t.nuxSchema.parse(E);
  }
})(no);
var o = {}, z = {}, Wr = {}, Ln = {}, Us = {}, Ue = {}, Ks = {};
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.XRPCInvalidResponseError = t.XRPCError = t.XRPCResponse = t.ResponseTypeStrings = t.ResponseTypeNames = t.ResponseType = t.errorResponseBody = void 0, t.httpResponseCodeToEnum = n, t.httpResponseCodeToName = s, t.httpResponseCodeToString = u;
  const e = wr;
  t.errorResponseBody = e.z.object({
    error: e.z.string().optional(),
    message: e.z.string().optional()
  });
  var r;
  (function(p) {
    p[p.Unknown = 1] = "Unknown", p[p.InvalidResponse = 2] = "InvalidResponse", p[p.Success = 200] = "Success", p[p.InvalidRequest = 400] = "InvalidRequest", p[p.AuthRequired = 401] = "AuthRequired", p[p.Forbidden = 403] = "Forbidden", p[p.XRPCNotSupported = 404] = "XRPCNotSupported", p[p.NotAcceptable = 406] = "NotAcceptable", p[p.PayloadTooLarge = 413] = "PayloadTooLarge", p[p.UnsupportedMediaType = 415] = "UnsupportedMediaType", p[p.RateLimitExceeded = 429] = "RateLimitExceeded", p[p.InternalServerError = 500] = "InternalServerError", p[p.MethodNotImplemented = 501] = "MethodNotImplemented", p[p.UpstreamFailure = 502] = "UpstreamFailure", p[p.NotEnoughResources = 503] = "NotEnoughResources", p[p.UpstreamTimeout = 504] = "UpstreamTimeout";
  })(r || (t.ResponseType = r = {}));
  function n(p) {
    return p in r ? p : p >= 100 && p < 200 ? r.XRPCNotSupported : p >= 200 && p < 300 ? r.Success : p >= 300 && p < 400 ? r.XRPCNotSupported : p >= 400 && p < 500 ? r.InvalidRequest : r.InternalServerError;
  }
  t.ResponseTypeNames = {
    [r.Unknown]: "Unknown",
    [r.InvalidResponse]: "InvalidResponse",
    [r.Success]: "Success",
    [r.InvalidRequest]: "InvalidRequest",
    [r.AuthRequired]: "AuthenticationRequired",
    [r.Forbidden]: "Forbidden",
    [r.XRPCNotSupported]: "XRPCNotSupported",
    [r.PayloadTooLarge]: "PayloadTooLarge",
    [r.UnsupportedMediaType]: "UnsupportedMediaType",
    [r.RateLimitExceeded]: "RateLimitExceeded",
    [r.InternalServerError]: "InternalServerError",
    [r.MethodNotImplemented]: "MethodNotImplemented",
    [r.UpstreamFailure]: "UpstreamFailure",
    [r.NotEnoughResources]: "NotEnoughResources",
    [r.UpstreamTimeout]: "UpstreamTimeout"
  };
  function s(p) {
    return t.ResponseTypeNames[n(p)];
  }
  t.ResponseTypeStrings = {
    [r.Unknown]: "Unknown",
    [r.InvalidResponse]: "Invalid Response",
    [r.Success]: "Success",
    [r.InvalidRequest]: "Invalid Request",
    [r.AuthRequired]: "Authentication Required",
    [r.Forbidden]: "Forbidden",
    [r.XRPCNotSupported]: "XRPC Not Supported",
    [r.PayloadTooLarge]: "Payload Too Large",
    [r.UnsupportedMediaType]: "Unsupported Media Type",
    [r.RateLimitExceeded]: "Rate Limit Exceeded",
    [r.InternalServerError]: "Internal Server Error",
    [r.MethodNotImplemented]: "Method Not Implemented",
    [r.UpstreamFailure]: "Upstream Failure",
    [r.NotEnoughResources]: "Not Enough Resources",
    [r.UpstreamTimeout]: "Upstream Timeout"
  };
  function u(p) {
    return t.ResponseTypeStrings[n(p)];
  }
  class c {
    constructor(m, A) {
      Object.defineProperty(this, "data", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: m
      }), Object.defineProperty(this, "headers", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: A
      }), Object.defineProperty(this, "success", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: !0
      });
    }
  }
  t.XRPCResponse = c;
  class l extends Error {
    constructor(m, A = s(m), E, v, k) {
      super(E || A || u(m), k), Object.defineProperty(this, "error", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: A
      }), Object.defineProperty(this, "headers", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: v
      }), Object.defineProperty(this, "success", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: !1
      }), Object.defineProperty(this, "status", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: void 0
      }), this.status = n(m);
      const P = k == null ? void 0 : k.cause;
      this.cause === void 0 && P !== void 0 && (this.cause = P);
    }
    static from(m, A) {
      if (m instanceof l)
        return m;
      const E = m instanceof Error ? m : void 0, v = m instanceof Response ? m : (m == null ? void 0 : m.response) instanceof Response ? m.response : void 0, k = (
        // Extract status code from "http-errors" like errors
        (E == null ? void 0 : E.statusCode) ?? (E == null ? void 0 : E.status) ?? // Use the status code from the response object as fallback
        (v == null ? void 0 : v.status)
      ), P = typeof k == "number" ? n(k) : A ?? r.Unknown, $ = (E == null ? void 0 : E.message) ?? String(m), C = v ? Object.fromEntries(v.headers.entries()) : void 0;
      return new l(P, void 0, $, C, { cause: m });
    }
  }
  t.XRPCError = l;
  class f extends l {
    constructor(m, A, E) {
      super(r.InvalidResponse, t.ResponseTypeStrings[r.InvalidResponse], "The server gave an invalid response and may be out of date.", void 0, { cause: A }), Object.defineProperty(this, "lexiconNsid", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: m
      }), Object.defineProperty(this, "validationError", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: A
      }), Object.defineProperty(this, "responseBody", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: E
      });
    }
  }
  t.XRPCInvalidResponseError = f;
})(Ks);
Object.defineProperty(Ue, "__esModule", { value: !0 });
Ue.isErrorResponseBody = g0;
Ue.getMethodSchemaHTTPMethod = x0;
Ue.constructMethodCallUri = R0;
Ue.constructMethodCallUrl = $p;
Ue.encodeQueryParam = Ma;
Ue.constructMethodCallHeaders = A0;
Ue.combineHeaders = v0;
Ue.isBodyInit = Gp;
Ue.isIterable = so;
Ue.encodeMethodCallBody = T0;
Ue.httpResponseBodyParse = C0;
const Mp = Hr, dt = Ks, An = globalThis.ReadableStream || class {
  constructor() {
    throw new Error("ReadableStream is not supported in this environment");
  }
};
function g0(t) {
  return dt.errorResponseBody.safeParse(t).success;
}
function x0(t) {
  return t.type === "procedure" ? "post" : "get";
}
function R0(t, e, r, n) {
  return new URL($p(t, e, n), r).toString();
}
function $p(t, e, r) {
  var u, c;
  const n = `/xrpc/${encodeURIComponent(t)}`;
  if (!r)
    return n;
  const s = [];
  for (const [l, f] of Object.entries(r)) {
    const p = (c = (u = e.parameters) == null ? void 0 : u.properties) == null ? void 0 : c[l];
    if (!p)
      throw new Error(`Invalid query parameter: ${l}`);
    if (f !== void 0)
      if (p.type === "array") {
        const m = Array.isArray(f) ? f : [f];
        for (const A of m)
          s.push([
            l,
            Ma(p.items.type, A)
          ]);
      } else
        s.push([l, Ma(p.type, f)]);
  }
  return s.length ? `${n}?${new URLSearchParams(s).toString()}` : n;
}
function Ma(t, e) {
  if (t === "string" || t === "unknown")
    return String(e);
  if (t === "float")
    return String(Number(e));
  if (t === "integer")
    return String(Number(e) | 0);
  if (t === "boolean")
    return e ? "true" : "false";
  if (t === "datetime")
    return e instanceof Date ? e.toISOString() : String(e);
  throw new Error(`Unsupported query param type: ${t}`);
}
function A0(t, e, r) {
  const n = new Headers();
  if (r != null && r.headers)
    for (const s in r.headers) {
      if (n.has(s))
        throw new TypeError(`Duplicate header: ${s}`);
      const u = r.headers[s];
      u != null && n.set(s, u);
    }
  if (t.type === "procedure") {
    if (r != null && r.encoding)
      n.set("content-type", r.encoding);
    else if (!n.has("content-type") && typeof e < "u")
      if (e instanceof ArrayBuffer || e instanceof An || ArrayBuffer.isView(e))
        n.set("content-type", "application/octet-stream");
      else if (e instanceof FormData)
        n.set("content-type", "multipart/form-data");
      else if (e instanceof URLSearchParams)
        n.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
      else if (qp(e))
        n.set("content-type", e.type || "application/octet-stream");
      else if (typeof e == "string")
        n.set("content-type", "text/plain;charset=UTF-8");
      else if (so(e))
        n.set("content-type", "application/octet-stream");
      else if (typeof e == "boolean" || typeof e == "number" || typeof e == "string" || typeof e == "object")
        n.set("content-type", "application/json");
      else
        throw new dt.XRPCError(dt.ResponseType.InvalidRequest, `Unsupported data type: ${typeof e}`);
  }
  return n;
}
function v0(t, e) {
  if (!e)
    return t;
  let r;
  for (const [n, s] of e) {
    if (s === void 0 || (r ?? (r = new Headers(t)), r.has(n)))
      continue;
    const u = typeof s == "function" ? s() : s;
    if (typeof u == "string")
      r.set(n, u);
    else if (u === null)
      r.delete(n);
    else
      throw new TypeError(`Invalid "${n}" header value: ${typeof u}`);
  }
  return r ?? t;
}
function qp(t) {
  if (t == null || typeof t != "object")
    return !1;
  if (typeof Blob == "function" && t instanceof Blob)
    return !0;
  const e = t[Symbol.toStringTag];
  return e === "Blob" || e === "File" ? "stream" in t && typeof t.stream == "function" : !1;
}
function Gp(t) {
  switch (typeof t) {
    case "string":
      return !0;
    case "object":
      return t instanceof ArrayBuffer || t instanceof FormData || t instanceof URLSearchParams || t instanceof An || ArrayBuffer.isView(t) || qp(t);
    default:
      return !1;
  }
}
function so(t) {
  return t != null && typeof t == "object" && (Symbol.iterator in t || Symbol.asyncIterator in t);
}
function T0(t, e) {
  var s;
  const r = t.get("content-type");
  if (!r)
    return;
  if (typeof e > "u")
    throw new dt.XRPCError(dt.ResponseType.InvalidRequest, "A request body is expected but none was provided");
  if (Gp(e))
    return e instanceof FormData && r === "multipart/form-data" && t.delete("content-type"), e;
  if (so(e))
    return _0(e);
  if (r.startsWith("text/"))
    return new TextEncoder().encode(String(e));
  if (r.startsWith("application/json")) {
    const u = (0, Mp.stringifyLex)(e);
    if (u === void 0)
      throw new dt.XRPCError(dt.ResponseType.InvalidRequest, "Failed to encode request body as JSON");
    return new TextEncoder().encode(u);
  }
  const n = !e || typeof e != "object" ? typeof e : e.constructor !== Object && typeof e.constructor == "function" && typeof ((s = e.constructor) == null ? void 0 : s.name) == "string" ? e.constructor.name : "object";
  throw new dt.XRPCError(dt.ResponseType.InvalidRequest, `Unable to encode ${n} as ${r} data`);
}
function _0(t) {
  if ("from" in An && typeof An.from == "function")
    return An.from(t);
  throw new TypeError("ReadableStream.from() is not supported in this environment. It is required to support using iterables as the request body. Consider using a polyfill or re-write your code to use a different body type.");
}
function C0(t, e) {
  try {
    if (t) {
      if (t.includes("application/json")) {
        const r = new TextDecoder().decode(e);
        return (0, Mp.jsonStringToLex)(r);
      }
      if (t.startsWith("text/"))
        return new TextDecoder().decode(e);
    }
    return e instanceof ArrayBuffer ? new Uint8Array(e) : e;
  } catch (r) {
    throw new dt.XRPCError(dt.ResponseType.InvalidResponse, void 0, `Failed to parse response body: ${String(r)}`, void 0, { cause: r });
  }
}
Object.defineProperty(Us, "__esModule", { value: !0 });
Us.buildFetchHandler = S0;
const w0 = Ue;
function S0(t) {
  if (typeof t == "function")
    return t;
  if (typeof t == "object" && "fetchHandler" in t)
    return t.fetchHandler.bind(t);
  const { service: e, headers: r = void 0, fetch: n = globalThis.fetch } = typeof t == "string" || t instanceof URL ? { service: t } : t;
  if (typeof n != "function")
    throw new TypeError("XrpcDispatcher requires fetch() to be available in your environment.");
  const s = r != null ? Object.entries(r) : void 0;
  return async function(u, c) {
    const l = typeof e == "function" ? e() : e, f = new URL(u, l), p = (0, w0.combineHeaders)(c.headers, s);
    return n(f, { ...c, headers: p });
  };
}
Object.defineProperty(Ln, "__esModule", { value: !0 });
Ln.XrpcClient = void 0;
const La = Hr, L0 = Us, li = Ks, zr = Ue;
class k0 {
  constructor(e, r) {
    Object.defineProperty(this, "fetchHandler", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "headers", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), Object.defineProperty(this, "lex", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.fetchHandler = (0, L0.buildFetchHandler)(e), this.lex = r instanceof La.Lexicons ? r : new La.Lexicons(r);
  }
  setHeader(e, r) {
    this.headers.set(e.toLowerCase(), r);
  }
  unsetHeader(e) {
    this.headers.delete(e.toLowerCase());
  }
  clearHeaders() {
    this.headers.clear();
  }
  async call(e, r, n, s) {
    const u = this.lex.getDefOrThrow(e);
    if (!u || u.type !== "query" && u.type !== "procedure")
      throw new TypeError(`Invalid lexicon: ${e}. Must be a query or procedure.`);
    const c = (0, zr.constructMethodCallUrl)(e, u, r), l = (0, zr.getMethodSchemaHTTPMethod)(u), f = (0, zr.constructMethodCallHeaders)(u, n, s), p = (0, zr.encodeMethodCallBody)(f, n), m = {
      method: l,
      headers: (0, zr.combineHeaders)(f, this.headers),
      body: p,
      duplex: "half",
      signal: s == null ? void 0 : s.signal
    };
    try {
      const A = await this.fetchHandler.call(void 0, c, m), E = A.status, v = Object.fromEntries(A.headers.entries()), k = await A.arrayBuffer(), P = (0, zr.httpResponseBodyParse)(A.headers.get("content-type"), k), $ = (0, li.httpResponseCodeToEnum)(E);
      if ($ !== li.ResponseType.Success) {
        const { error: C = void 0, message: T = void 0 } = P && (0, zr.isErrorResponseBody)(P) ? P : {};
        throw new li.XRPCError($, C, T, v);
      }
      try {
        this.lex.assertValidXrpcOutput(e, P);
      } catch (C) {
        throw C instanceof La.ValidationError ? new li.XRPCInvalidResponseError(e, C, P) : C;
      }
      return new li.XRPCResponse(P, v);
    } catch (A) {
      throw li.XRPCError.from(A);
    }
  }
}
Ln.XrpcClient = k0;
Object.defineProperty(Wr, "__esModule", { value: !0 });
Wr.ServiceClient = Wr.Client = void 0;
const B0 = Hr, D0 = Ln, P0 = Ue;
class U0 {
  constructor() {
    Object.defineProperty(this, "lex", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: new B0.Lexicons()
    });
  }
  /** @deprecated */
  get fetch() {
    throw new Error("Client.fetch is no longer supported. Use an XrpcClient instead.");
  }
  /** @deprecated */
  set fetch(e) {
    throw new Error("Client.fetch is no longer supported. Use an XrpcClient instead.");
  }
  // method calls
  //
  async call(e, r, n, s, u) {
    return this.service(e).call(r, n, s, u);
  }
  service(e) {
    return new zp(this, e);
  }
  // schemas
  // =
  addLexicon(e) {
    this.lex.add(e);
  }
  addLexicons(e) {
    for (const r of e)
      this.addLexicon(r);
  }
  removeLexicon(e) {
    this.lex.remove(e);
  }
}
Wr.Client = U0;
class zp extends D0.XrpcClient {
  constructor(e, r) {
    super(async (n, s) => {
      const u = (0, P0.combineHeaders)(s.headers, Object.entries(this.headers));
      return fetch(new URL(n, this.uri), { ...s, headers: u });
    }, e.lex), Object.defineProperty(this, "baseClient", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: e
    }), Object.defineProperty(this, "uri", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.uri = typeof r == "string" ? new URL(r) : r;
  }
}
Wr.ServiceClient = zp;
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(u, c, l, f) {
    f === void 0 && (f = l);
    var p = Object.getOwnPropertyDescriptor(c, l);
    (!p || ("get" in p ? !c.__esModule : p.writable || p.configurable)) && (p = { enumerable: !0, get: function() {
      return c[l];
    } }), Object.defineProperty(u, f, p);
  } : function(u, c, l, f) {
    f === void 0 && (f = l), u[f] = c[l];
  }), r = L && L.__exportStar || function(u, c) {
    for (var l in u) l !== "default" && !Object.prototype.hasOwnProperty.call(c, l) && e(c, u, l);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), r(Wr, t), r(Us, t), r(Ks, t), r(Ue, t), r(Ln, t);
  const n = Wr, s = new n.Client();
  t.default = s;
})(z);
var Ee = {}, M = {};
Object.defineProperty(M, "__esModule", { value: !0 });
M.isObj = K0;
M.hasProp = j0;
function K0(t) {
  return typeof t == "object" && t !== null;
}
function j0(t, e) {
  return e in t;
}
Object.defineProperty(Ee, "__esModule", { value: !0 });
Ee.InvalidSwapError = void 0;
Ee.toKnownErr = V0;
Ee.isCreate = O0;
Ee.validateCreate = I0;
Ee.isUpdate = N0;
Ee.validateUpdate = M0;
Ee.isDelete = $0;
Ee.validateDelete = q0;
Ee.isCreateResult = G0;
Ee.validateCreateResult = z0;
Ee.isUpdateResult = F0;
Ee.validateUpdateResult = X0;
Ee.isDeleteResult = Z0;
Ee.validateDeleteResult = H0;
const Fp = z, rt = M, xi = O;
let Xp = class extends Fp.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ee.InvalidSwapError = Xp;
function V0(t) {
  return t instanceof Fp.XRPCError && t.error === "InvalidSwap" ? new Xp(t) : t;
}
function O0(t) {
  return (0, rt.isObj)(t) && (0, rt.hasProp)(t, "$type") && t.$type === "com.atproto.repo.applyWrites#create";
}
function I0(t) {
  return xi.lexicons.validate("com.atproto.repo.applyWrites#create", t);
}
function N0(t) {
  return (0, rt.isObj)(t) && (0, rt.hasProp)(t, "$type") && t.$type === "com.atproto.repo.applyWrites#update";
}
function M0(t) {
  return xi.lexicons.validate("com.atproto.repo.applyWrites#update", t);
}
function $0(t) {
  return (0, rt.isObj)(t) && (0, rt.hasProp)(t, "$type") && t.$type === "com.atproto.repo.applyWrites#delete";
}
function q0(t) {
  return xi.lexicons.validate("com.atproto.repo.applyWrites#delete", t);
}
function G0(t) {
  return (0, rt.isObj)(t) && (0, rt.hasProp)(t, "$type") && t.$type === "com.atproto.repo.applyWrites#createResult";
}
function z0(t) {
  return xi.lexicons.validate("com.atproto.repo.applyWrites#createResult", t);
}
function F0(t) {
  return (0, rt.isObj)(t) && (0, rt.hasProp)(t, "$type") && t.$type === "com.atproto.repo.applyWrites#updateResult";
}
function X0(t) {
  return xi.lexicons.validate("com.atproto.repo.applyWrites#updateResult", t);
}
function Z0(t) {
  return (0, rt.isObj)(t) && (0, rt.hasProp)(t, "$type") && t.$type === "com.atproto.repo.applyWrites#deleteResult";
}
function H0(t) {
  return xi.lexicons.validate("com.atproto.repo.applyWrites#deleteResult", t);
}
var Ri = {};
Object.defineProperty(Ri, "__esModule", { value: !0 });
Ri.InvalidSwapError = void 0;
Ri.toKnownErr = W0;
const Zp = z;
let Hp = class extends Zp.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ri.InvalidSwapError = Hp;
function W0(t) {
  return t instanceof Zp.XRPCError && t.error === "InvalidSwap" ? new Hp(t) : t;
}
var Ai = {};
Object.defineProperty(Ai, "__esModule", { value: !0 });
Ai.InvalidSwapError = void 0;
Ai.toKnownErr = J0;
const Wp = z;
let Jp = class extends Wp.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ai.InvalidSwapError = Jp;
function J0(t) {
  return t instanceof Wp.XRPCError && t.error === "InvalidSwap" ? new Jp(t) : t;
}
var vi = {};
Object.defineProperty(vi, "__esModule", { value: !0 });
vi.RecordNotFoundError = void 0;
vi.toKnownErr = Q0;
const Qp = z;
let Yp = class extends Qp.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
vi.RecordNotFoundError = Yp;
function Q0(t) {
  return t instanceof Qp.XRPCError && t.error === "RecordNotFound" ? new Yp(t) : t;
}
var Ti = {};
Object.defineProperty(Ti, "__esModule", { value: !0 });
Ti.InvalidSwapError = void 0;
Ti.toKnownErr = Y0;
const ed = z;
class td extends ed.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ti.InvalidSwapError = td;
function Y0(t) {
  return t instanceof ed.XRPCError && t.error === "InvalidSwap" ? new td(t) : t;
}
var Qe = {};
Object.defineProperty(Qe, "__esModule", { value: !0 });
Qe.InvalidEmailError = Qe.InvalidTokenError = Qe.ExpiredTokenError = Qe.AccountNotFoundError = void 0;
Qe.toKnownErr = eE;
const kn = z;
class rd extends kn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Qe.AccountNotFoundError = rd;
let id = class extends kn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Qe.ExpiredTokenError = id;
let nd = class extends kn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Qe.InvalidTokenError = nd;
class sd extends kn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Qe.InvalidEmailError = sd;
function eE(t) {
  if (t instanceof kn.XRPCError) {
    if (t.error === "AccountNotFound")
      return new rd(t);
    if (t.error === "ExpiredToken")
      return new id(t);
    if (t.error === "InvalidToken")
      return new nd(t);
    if (t.error === "InvalidEmail")
      return new sd(t);
  }
  return t;
}
var he = {};
Object.defineProperty(he, "__esModule", { value: !0 });
he.IncompatibleDidDocError = he.UnresolvableDidError = he.UnsupportedDomainError = he.HandleNotAvailableError = he.InvalidInviteCodeError = he.InvalidPasswordError = he.InvalidHandleError = void 0;
he.toKnownErr = tE;
const Lr = z;
class ad extends Lr.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
he.InvalidHandleError = ad;
class od extends Lr.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
he.InvalidPasswordError = od;
class ld extends Lr.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
he.InvalidInviteCodeError = ld;
class ud extends Lr.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
he.HandleNotAvailableError = ud;
class cd extends Lr.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
he.UnsupportedDomainError = cd;
class pd extends Lr.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
he.UnresolvableDidError = pd;
class dd extends Lr.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
he.IncompatibleDidDocError = dd;
function tE(t) {
  if (t instanceof Lr.XRPCError) {
    if (t.error === "InvalidHandle")
      return new ad(t);
    if (t.error === "InvalidPassword")
      return new od(t);
    if (t.error === "InvalidInviteCode")
      return new ld(t);
    if (t.error === "HandleNotAvailable")
      return new ud(t);
    if (t.error === "UnsupportedDomain")
      return new cd(t);
    if (t.error === "UnresolvableDid")
      return new pd(t);
    if (t.error === "IncompatibleDidDoc")
      return new dd(t);
  }
  return t;
}
var kr = {};
Object.defineProperty(kr, "__esModule", { value: !0 });
kr.AccountTakedownError = void 0;
kr.toKnownErr = iE;
kr.isAppPassword = nE;
kr.validateAppPassword = sE;
const fd = z, ic = M, rE = O;
let yd = class extends fd.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
kr.AccountTakedownError = yd;
function iE(t) {
  return t instanceof fd.XRPCError && t.error === "AccountTakedown" ? new yd(t) : t;
}
function nE(t) {
  return (0, ic.isObj)(t) && (0, ic.hasProp)(t, "$type") && t.$type === "com.atproto.server.createAppPassword#appPassword";
}
function sE(t) {
  return rE.lexicons.validate("com.atproto.server.createAppPassword#appPassword", t);
}
var yr = {};
Object.defineProperty(yr, "__esModule", { value: !0 });
yr.AuthFactorTokenRequiredError = yr.AccountTakedownError = void 0;
yr.toKnownErr = aE;
const ao = z;
let md = class extends ao.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
yr.AccountTakedownError = md;
class bd extends ao.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
yr.AuthFactorTokenRequiredError = bd;
function aE(t) {
  if (t instanceof ao.XRPCError) {
    if (t.error === "AccountTakedown")
      return new md(t);
    if (t.error === "AuthFactorTokenRequired")
      return new bd(t);
  }
  return t;
}
var mr = {};
Object.defineProperty(mr, "__esModule", { value: !0 });
mr.InvalidTokenError = mr.ExpiredTokenError = void 0;
mr.toKnownErr = oE;
const oo = z;
let hd = class extends oo.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
mr.ExpiredTokenError = hd;
let Ed = class extends oo.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
mr.InvalidTokenError = Ed;
function oE(t) {
  if (t instanceof oo.XRPCError) {
    if (t.error === "ExpiredToken")
      return new hd(t);
    if (t.error === "InvalidToken")
      return new Ed(t);
  }
  return t;
}
var _i = {};
Object.defineProperty(_i, "__esModule", { value: !0 });
_i.DuplicateCreateError = void 0;
_i.toKnownErr = lE;
const gd = z;
class xd extends gd.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
_i.DuplicateCreateError = xd;
function lE(t) {
  return t instanceof gd.XRPCError && t.error === "DuplicateCreate" ? new xd(t) : t;
}
var Ci = {};
Object.defineProperty(Ci, "__esModule", { value: !0 });
Ci.BadExpirationError = void 0;
Ci.toKnownErr = uE;
const Rd = z;
class Ad extends Rd.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ci.BadExpirationError = Ad;
function uE(t) {
  return t instanceof Rd.XRPCError && t.error === "BadExpiration" ? new Ad(t) : t;
}
var Br = {};
Object.defineProperty(Br, "__esModule", { value: !0 });
Br.AccountTakedownError = void 0;
Br.toKnownErr = pE;
Br.isAppPassword = dE;
Br.validateAppPassword = fE;
const vd = z, nc = M, cE = O;
let Td = class extends vd.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Br.AccountTakedownError = Td;
function pE(t) {
  return t instanceof vd.XRPCError && t.error === "AccountTakedown" ? new Td(t) : t;
}
function dE(t) {
  return (0, nc.isObj)(t) && (0, nc.hasProp)(t, "$type") && t.$type === "com.atproto.server.listAppPasswords#appPassword";
}
function fE(t) {
  return cE.lexicons.validate("com.atproto.server.listAppPasswords#appPassword", t);
}
var wi = {};
Object.defineProperty(wi, "__esModule", { value: !0 });
wi.AccountTakedownError = void 0;
wi.toKnownErr = yE;
const _d = z;
class Cd extends _d.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
wi.AccountTakedownError = Cd;
function yE(t) {
  return t instanceof _d.XRPCError && t.error === "AccountTakedown" ? new Cd(t) : t;
}
var br = {};
Object.defineProperty(br, "__esModule", { value: !0 });
br.InvalidTokenError = br.ExpiredTokenError = void 0;
br.toKnownErr = mE;
const lo = z;
let wd = class extends lo.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
br.ExpiredTokenError = wd;
let Sd = class extends lo.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
br.InvalidTokenError = Sd;
function mE(t) {
  if (t instanceof lo.XRPCError) {
    if (t.error === "ExpiredToken")
      return new wd(t);
    if (t.error === "InvalidToken")
      return new Sd(t);
  }
  return t;
}
var Ct = {};
Object.defineProperty(Ct, "__esModule", { value: !0 });
Ct.TokenRequiredError = Ct.InvalidTokenError = Ct.ExpiredTokenError = void 0;
Ct.toKnownErr = bE;
const js = z;
class Ld extends js.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ct.ExpiredTokenError = Ld;
class kd extends js.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ct.InvalidTokenError = kd;
class Bd extends js.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ct.TokenRequiredError = Bd;
function bE(t) {
  if (t instanceof js.XRPCError) {
    if (t.error === "ExpiredToken")
      return new Ld(t);
    if (t.error === "InvalidToken")
      return new kd(t);
    if (t.error === "TokenRequired")
      return new Bd(t);
  }
  return t;
}
var Ne = {};
Object.defineProperty(Ne, "__esModule", { value: !0 });
Ne.RepoDeactivatedError = Ne.RepoSuspendedError = Ne.RepoTakendownError = Ne.RepoNotFoundError = Ne.BlobNotFoundError = void 0;
Ne.toKnownErr = hE;
const Si = z;
class Dd extends Si.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ne.BlobNotFoundError = Dd;
let Pd = class extends Si.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ne.RepoNotFoundError = Pd;
let Ud = class extends Si.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ne.RepoTakendownError = Ud;
let Kd = class extends Si.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ne.RepoSuspendedError = Kd;
let jd = class extends Si.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ne.RepoDeactivatedError = jd;
function hE(t) {
  if (t instanceof Si.XRPCError) {
    if (t.error === "BlobNotFound")
      return new Dd(t);
    if (t.error === "RepoNotFound")
      return new Pd(t);
    if (t.error === "RepoTakendown")
      return new Ud(t);
    if (t.error === "RepoSuspended")
      return new Kd(t);
    if (t.error === "RepoDeactivated")
      return new jd(t);
  }
  return t;
}
var Me = {};
Object.defineProperty(Me, "__esModule", { value: !0 });
Me.RepoDeactivatedError = Me.RepoSuspendedError = Me.RepoTakendownError = Me.RepoNotFoundError = Me.BlockNotFoundError = void 0;
Me.toKnownErr = EE;
const Li = z;
class Vd extends Li.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Me.BlockNotFoundError = Vd;
let Od = class extends Li.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Me.RepoNotFoundError = Od;
let Id = class extends Li.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Me.RepoTakendownError = Id;
let Nd = class extends Li.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Me.RepoSuspendedError = Nd;
let Md = class extends Li.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Me.RepoDeactivatedError = Md;
function EE(t) {
  if (t instanceof Li.XRPCError) {
    if (t.error === "BlockNotFound")
      return new Vd(t);
    if (t.error === "RepoNotFound")
      return new Od(t);
    if (t.error === "RepoTakendown")
      return new Id(t);
    if (t.error === "RepoSuspended")
      return new Nd(t);
    if (t.error === "RepoDeactivated")
      return new Md(t);
  }
  return t;
}
var ki = {};
Object.defineProperty(ki, "__esModule", { value: !0 });
ki.HeadNotFoundError = void 0;
ki.toKnownErr = gE;
const $d = z;
class qd extends $d.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
ki.HeadNotFoundError = qd;
function gE(t) {
  return t instanceof $d.XRPCError && t.error === "HeadNotFound" ? new qd(t) : t;
}
var Ye = {};
Object.defineProperty(Ye, "__esModule", { value: !0 });
Ye.RepoDeactivatedError = Ye.RepoSuspendedError = Ye.RepoTakendownError = Ye.RepoNotFoundError = void 0;
Ye.toKnownErr = xE;
const Bn = z;
let Gd = class extends Bn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ye.RepoNotFoundError = Gd;
let zd = class extends Bn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ye.RepoTakendownError = zd;
let Fd = class extends Bn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ye.RepoSuspendedError = Fd;
let Xd = class extends Bn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ye.RepoDeactivatedError = Xd;
function xE(t) {
  if (t instanceof Bn.XRPCError) {
    if (t.error === "RepoNotFound")
      return new Gd(t);
    if (t.error === "RepoTakendown")
      return new zd(t);
    if (t.error === "RepoSuspended")
      return new Fd(t);
    if (t.error === "RepoDeactivated")
      return new Xd(t);
  }
  return t;
}
var $e = {};
Object.defineProperty($e, "__esModule", { value: !0 });
$e.RepoDeactivatedError = $e.RepoSuspendedError = $e.RepoTakendownError = $e.RepoNotFoundError = $e.RecordNotFoundError = void 0;
$e.toKnownErr = RE;
const Bi = z;
let Zd = class extends Bi.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
$e.RecordNotFoundError = Zd;
let Hd = class extends Bi.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
$e.RepoNotFoundError = Hd;
let Wd = class extends Bi.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
$e.RepoTakendownError = Wd;
let Jd = class extends Bi.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
$e.RepoSuspendedError = Jd;
let Qd = class extends Bi.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
$e.RepoDeactivatedError = Qd;
function RE(t) {
  if (t instanceof Bi.XRPCError) {
    if (t.error === "RecordNotFound")
      return new Zd(t);
    if (t.error === "RepoNotFound")
      return new Hd(t);
    if (t.error === "RepoTakendown")
      return new Wd(t);
    if (t.error === "RepoSuspended")
      return new Jd(t);
    if (t.error === "RepoDeactivated")
      return new Qd(t);
  }
  return t;
}
var et = {};
Object.defineProperty(et, "__esModule", { value: !0 });
et.RepoDeactivatedError = et.RepoSuspendedError = et.RepoTakendownError = et.RepoNotFoundError = void 0;
et.toKnownErr = AE;
const Dn = z;
let Yd = class extends Dn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
et.RepoNotFoundError = Yd;
let ef = class extends Dn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
et.RepoTakendownError = ef;
let tf = class extends Dn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
et.RepoSuspendedError = tf;
let rf = class extends Dn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
et.RepoDeactivatedError = rf;
function AE(t) {
  if (t instanceof Dn.XRPCError) {
    if (t.error === "RepoNotFound")
      return new Yd(t);
    if (t.error === "RepoTakendown")
      return new ef(t);
    if (t.error === "RepoSuspended")
      return new tf(t);
    if (t.error === "RepoDeactivated")
      return new rf(t);
  }
  return t;
}
var Di = {};
Object.defineProperty(Di, "__esModule", { value: !0 });
Di.RepoNotFoundError = void 0;
Di.toKnownErr = vE;
const nf = z;
let sf = class extends nf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Di.RepoNotFoundError = sf;
function vE(t) {
  return t instanceof nf.XRPCError && t.error === "RepoNotFound" ? new sf(t) : t;
}
var tt = {};
Object.defineProperty(tt, "__esModule", { value: !0 });
tt.RepoDeactivatedError = tt.RepoSuspendedError = tt.RepoTakendownError = tt.RepoNotFoundError = void 0;
tt.toKnownErr = TE;
const Pn = z;
let af = class extends Pn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
tt.RepoNotFoundError = af;
class of extends Pn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
tt.RepoTakendownError = of;
class lf extends Pn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
tt.RepoSuspendedError = lf;
class uf extends Pn.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
tt.RepoDeactivatedError = uf;
function TE(t) {
  if (t instanceof Pn.XRPCError) {
    if (t.error === "RepoNotFound")
      return new af(t);
    if (t.error === "RepoTakendown")
      return new of(t);
    if (t.error === "RepoSuspended")
      return new lf(t);
    if (t.error === "RepoDeactivated")
      return new uf(t);
  }
  return t;
}
var hr = {};
Object.defineProperty(hr, "__esModule", { value: !0 });
hr.BlockedByActorError = hr.BlockedActorError = void 0;
hr.toKnownErr = _E;
const uo = z;
let cf = class extends uo.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
hr.BlockedActorError = cf;
let pf = class extends uo.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
hr.BlockedByActorError = pf;
function _E(t) {
  if (t instanceof uo.XRPCError) {
    if (t.error === "BlockedActor")
      return new cf(t);
    if (t.error === "BlockedByActor")
      return new pf(t);
  }
  return t;
}
var Er = {};
Object.defineProperty(Er, "__esModule", { value: !0 });
Er.BlockedByActorError = Er.BlockedActorError = void 0;
Er.toKnownErr = CE;
const co = z;
class df extends co.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Er.BlockedActorError = df;
class ff extends co.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Er.BlockedByActorError = ff;
function CE(t) {
  if (t instanceof co.XRPCError) {
    if (t.error === "BlockedActor")
      return new df(t);
    if (t.error === "BlockedByActor")
      return new ff(t);
  }
  return t;
}
var Pi = {};
Object.defineProperty(Pi, "__esModule", { value: !0 });
Pi.UnknownFeedError = void 0;
Pi.toKnownErr = wE;
const yf = z;
let mf = class extends yf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Pi.UnknownFeedError = mf;
function wE(t) {
  return t instanceof yf.XRPCError && t.error === "UnknownFeed" ? new mf(t) : t;
}
var Ui = {};
Object.defineProperty(Ui, "__esModule", { value: !0 });
Ui.UnknownFeedError = void 0;
Ui.toKnownErr = SE;
const bf = z;
class hf extends bf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ui.UnknownFeedError = hf;
function SE(t) {
  return t instanceof bf.XRPCError && t.error === "UnknownFeed" ? new hf(t) : t;
}
var Ki = {};
Object.defineProperty(Ki, "__esModule", { value: !0 });
Ki.UnknownListError = void 0;
Ki.toKnownErr = LE;
const Ef = z;
class gf extends Ef.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ki.UnknownListError = gf;
function LE(t) {
  return t instanceof Ef.XRPCError && t.error === "UnknownList" ? new gf(t) : t;
}
var ji = {};
Object.defineProperty(ji, "__esModule", { value: !0 });
ji.NotFoundError = void 0;
ji.toKnownErr = kE;
const xf = z;
class Rf extends xf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
ji.NotFoundError = Rf;
function kE(t) {
  return t instanceof xf.XRPCError && t.error === "NotFound" ? new Rf(t) : t;
}
var Vi = {};
Object.defineProperty(Vi, "__esModule", { value: !0 });
Vi.BadQueryStringError = void 0;
Vi.toKnownErr = BE;
const Af = z;
let vf = class extends Af.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Vi.BadQueryStringError = vf;
function BE(t) {
  return t instanceof Af.XRPCError && t.error === "BadQueryString" ? new vf(t) : t;
}
var Oi = {};
Object.defineProperty(Oi, "__esModule", { value: !0 });
Oi.ActorNotFoundError = void 0;
Oi.toKnownErr = DE;
const Tf = z;
class _f extends Tf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Oi.ActorNotFoundError = _f;
function DE(t) {
  return t instanceof Tf.XRPCError && t.error === "ActorNotFound" ? new _f(t) : t;
}
var Ii = {};
Object.defineProperty(Ii, "__esModule", { value: !0 });
Ii.BadQueryStringError = void 0;
Ii.toKnownErr = PE;
const Cf = z;
let wf = class extends Cf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ii.BadQueryStringError = wf;
function PE(t) {
  return t instanceof Cf.XRPCError && t.error === "BadQueryString" ? new wf(t) : t;
}
var Ni = {};
Object.defineProperty(Ni, "__esModule", { value: !0 });
Ni.BadQueryStringError = void 0;
Ni.toKnownErr = UE;
const Sf = z;
let Lf = class extends Sf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Ni.BadQueryStringError = Lf;
function UE(t) {
  return t instanceof Sf.XRPCError && t.error === "BadQueryString" ? new Lf(t) : t;
}
var Mi = {};
Object.defineProperty(Mi, "__esModule", { value: !0 });
Mi.BadQueryStringError = void 0;
Mi.toKnownErr = KE;
const kf = z;
class Bf extends kf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Mi.BadQueryStringError = Bf;
function KE(t) {
  return t instanceof kf.XRPCError && t.error === "BadQueryString" ? new Bf(t) : t;
}
var $i = {};
Object.defineProperty($i, "__esModule", { value: !0 });
$i.DuplicateTemplateNameError = void 0;
$i.toKnownErr = jE;
const Df = z;
let Pf = class extends Df.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
$i.DuplicateTemplateNameError = Pf;
function jE(t) {
  return t instanceof Df.XRPCError && t.error === "DuplicateTemplateName" ? new Pf(t) : t;
}
var qi = {};
Object.defineProperty(qi, "__esModule", { value: !0 });
qi.DuplicateTemplateNameError = void 0;
qi.toKnownErr = VE;
const Uf = z;
class Kf extends Uf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
qi.DuplicateTemplateNameError = Kf;
function VE(t) {
  return t instanceof Uf.XRPCError && t.error === "DuplicateTemplateName" ? new Kf(t) : t;
}
var Gi = {};
Object.defineProperty(Gi, "__esModule", { value: !0 });
Gi.SubjectHasActionError = void 0;
Gi.toKnownErr = OE;
const jf = z;
class Vf extends jf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Gi.SubjectHasActionError = Vf;
function OE(t) {
  return t instanceof jf.XRPCError && t.error === "SubjectHasAction" ? new Vf(t) : t;
}
var zi = {};
Object.defineProperty(zi, "__esModule", { value: !0 });
zi.RecordNotFoundError = void 0;
zi.toKnownErr = IE;
const Of = z;
class If extends Of.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
zi.RecordNotFoundError = If;
function IE(t) {
  return t instanceof Of.XRPCError && t.error === "RecordNotFound" ? new If(t) : t;
}
var Fi = {};
Object.defineProperty(Fi, "__esModule", { value: !0 });
Fi.RepoNotFoundError = void 0;
Fi.toKnownErr = NE;
const Nf = z;
class Mf extends Nf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Fi.RepoNotFoundError = Mf;
function NE(t) {
  return t instanceof Nf.XRPCError && t.error === "RepoNotFound" ? new Mf(t) : t;
}
var Xi = {};
Object.defineProperty(Xi, "__esModule", { value: !0 });
Xi.SetNotFoundError = void 0;
Xi.toKnownErr = ME;
const $f = z;
let qf = class extends $f.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Xi.SetNotFoundError = qf;
function ME(t) {
  return t instanceof $f.XRPCError && t.error === "SetNotFound" ? new qf(t) : t;
}
var Zi = {};
Object.defineProperty(Zi, "__esModule", { value: !0 });
Zi.SetNotFoundError = void 0;
Zi.toKnownErr = $E;
const Gf = z;
let zf = class extends Gf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
Zi.SetNotFoundError = zf;
function $E(t) {
  return t instanceof Gf.XRPCError && t.error === "SetNotFound" ? new zf(t) : t;
}
var Hi = {};
Object.defineProperty(Hi, "__esModule", { value: !0 });
Hi.SetNotFoundError = void 0;
Hi.toKnownErr = qE;
const Ff = z;
class Xf extends Ff.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Hi.SetNotFoundError = Xf;
function qE(t) {
  return t instanceof Ff.XRPCError && t.error === "SetNotFound" ? new Xf(t) : t;
}
var Wi = {};
Object.defineProperty(Wi, "__esModule", { value: !0 });
Wi.MemberAlreadyExistsError = void 0;
Wi.toKnownErr = GE;
const Zf = z;
class Hf extends Zf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Wi.MemberAlreadyExistsError = Hf;
function GE(t) {
  return t instanceof Zf.XRPCError && t.error === "MemberAlreadyExists" ? new Hf(t) : t;
}
var gr = {};
Object.defineProperty(gr, "__esModule", { value: !0 });
gr.CannotDeleteSelfError = gr.MemberNotFoundError = void 0;
gr.toKnownErr = zE;
const po = z;
let Wf = class extends po.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
};
gr.MemberNotFoundError = Wf;
class Jf extends po.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
gr.CannotDeleteSelfError = Jf;
function zE(t) {
  if (t instanceof po.XRPCError) {
    if (t.error === "MemberNotFound")
      return new Wf(t);
    if (t.error === "CannotDeleteSelf")
      return new Jf(t);
  }
  return t;
}
var Ji = {};
Object.defineProperty(Ji, "__esModule", { value: !0 });
Ji.MemberNotFoundError = void 0;
Ji.toKnownErr = FE;
const Qf = z;
class Yf extends Qf.XRPCError {
  constructor(e) {
    super(e.status, e.error, e.message, e.headers, { cause: e });
  }
}
Ji.MemberNotFoundError = Yf;
function FE(t) {
  return t instanceof Qf.XRPCError && t.error === "MemberNotFound" ? new Yf(t) : t;
}
var nt = {};
Object.defineProperty(nt, "__esModule", { value: !0 });
nt.isStatusAttr = XE;
nt.validateStatusAttr = ZE;
nt.isAccountView = HE;
nt.validateAccountView = WE;
nt.isRepoRef = JE;
nt.validateRepoRef = QE;
nt.isRepoBlobRef = YE;
nt.validateRepoBlobRef = eg;
nt.isThreatSignature = tg;
nt.validateThreatSignature = rg;
const St = M, Un = O;
function XE(t) {
  return (0, St.isObj)(t) && (0, St.hasProp)(t, "$type") && t.$type === "com.atproto.admin.defs#statusAttr";
}
function ZE(t) {
  return Un.lexicons.validate("com.atproto.admin.defs#statusAttr", t);
}
function HE(t) {
  return (0, St.isObj)(t) && (0, St.hasProp)(t, "$type") && t.$type === "com.atproto.admin.defs#accountView";
}
function WE(t) {
  return Un.lexicons.validate("com.atproto.admin.defs#accountView", t);
}
function JE(t) {
  return (0, St.isObj)(t) && (0, St.hasProp)(t, "$type") && t.$type === "com.atproto.admin.defs#repoRef";
}
function QE(t) {
  return Un.lexicons.validate("com.atproto.admin.defs#repoRef", t);
}
function YE(t) {
  return (0, St.isObj)(t) && (0, St.hasProp)(t, "$type") && t.$type === "com.atproto.admin.defs#repoBlobRef";
}
function eg(t) {
  return Un.lexicons.validate("com.atproto.admin.defs#repoBlobRef", t);
}
function tg(t) {
  return (0, St.isObj)(t) && (0, St.hasProp)(t, "$type") && t.$type === "com.atproto.admin.defs#threatSignature";
}
function rg(t) {
  return Un.lexicons.validate("com.atproto.admin.defs#threatSignature", t);
}
var fo = {};
Object.defineProperty(fo, "__esModule", { value: !0 });
fo.toKnownErr = ig;
function ig(t) {
  return t;
}
var yo = {};
Object.defineProperty(yo, "__esModule", { value: !0 });
yo.toKnownErr = ng;
function ng(t) {
  return t;
}
var mo = {};
Object.defineProperty(mo, "__esModule", { value: !0 });
mo.toKnownErr = sg;
function sg(t) {
  return t;
}
var bo = {};
Object.defineProperty(bo, "__esModule", { value: !0 });
bo.toKnownErr = ag;
function ag(t) {
  return t;
}
var ho = {};
Object.defineProperty(ho, "__esModule", { value: !0 });
ho.toKnownErr = og;
function og(t) {
  return t;
}
var Eo = {};
Object.defineProperty(Eo, "__esModule", { value: !0 });
Eo.toKnownErr = lg;
function lg(t) {
  return t;
}
var go = {};
Object.defineProperty(go, "__esModule", { value: !0 });
go.toKnownErr = ug;
function ug(t) {
  return t;
}
var xo = {};
Object.defineProperty(xo, "__esModule", { value: !0 });
xo.toKnownErr = cg;
function cg(t) {
  return t;
}
var Ro = {};
Object.defineProperty(Ro, "__esModule", { value: !0 });
Ro.toKnownErr = pg;
function pg(t) {
  return t;
}
var Ao = {};
Object.defineProperty(Ao, "__esModule", { value: !0 });
Ao.toKnownErr = dg;
function dg(t) {
  return t;
}
var vo = {};
Object.defineProperty(vo, "__esModule", { value: !0 });
vo.toKnownErr = fg;
function fg(t) {
  return t;
}
var To = {};
Object.defineProperty(To, "__esModule", { value: !0 });
To.toKnownErr = yg;
function yg(t) {
  return t;
}
var _o = {};
Object.defineProperty(_o, "__esModule", { value: !0 });
_o.toKnownErr = mg;
function mg(t) {
  return t;
}
var Co = {};
Object.defineProperty(Co, "__esModule", { value: !0 });
Co.toKnownErr = bg;
function bg(t) {
  return t;
}
var wo = {};
Object.defineProperty(wo, "__esModule", { value: !0 });
wo.toKnownErr = hg;
function hg(t) {
  return t;
}
var So = {};
Object.defineProperty(So, "__esModule", { value: !0 });
So.toKnownErr = Eg;
function Eg(t) {
  return t;
}
var Lo = {};
Object.defineProperty(Lo, "__esModule", { value: !0 });
Lo.toKnownErr = gg;
function gg(t) {
  return t;
}
var ko = {};
Object.defineProperty(ko, "__esModule", { value: !0 });
ko.toKnownErr = xg;
function xg(t) {
  return t;
}
var Bo = {};
Object.defineProperty(Bo, "__esModule", { value: !0 });
Bo.toKnownErr = Rg;
function Rg(t) {
  return t;
}
var Do = {};
Object.defineProperty(Do, "__esModule", { value: !0 });
Do.toKnownErr = Ag;
function Ag(t) {
  return t;
}
var st = {};
Object.defineProperty(st, "__esModule", { value: !0 });
st.isLabel = vg;
st.validateLabel = Tg;
st.isSelfLabels = _g;
st.validateSelfLabels = Cg;
st.isSelfLabel = wg;
st.validateSelfLabel = Sg;
st.isLabelValueDefinition = Lg;
st.validateLabelValueDefinition = kg;
st.isLabelValueDefinitionStrings = Bg;
st.validateLabelValueDefinitionStrings = Dg;
const Lt = M, Kn = O;
function vg(t) {
  return (0, Lt.isObj)(t) && (0, Lt.hasProp)(t, "$type") && t.$type === "com.atproto.label.defs#label";
}
function Tg(t) {
  return Kn.lexicons.validate("com.atproto.label.defs#label", t);
}
function _g(t) {
  return (0, Lt.isObj)(t) && (0, Lt.hasProp)(t, "$type") && t.$type === "com.atproto.label.defs#selfLabels";
}
function Cg(t) {
  return Kn.lexicons.validate("com.atproto.label.defs#selfLabels", t);
}
function wg(t) {
  return (0, Lt.isObj)(t) && (0, Lt.hasProp)(t, "$type") && t.$type === "com.atproto.label.defs#selfLabel";
}
function Sg(t) {
  return Kn.lexicons.validate("com.atproto.label.defs#selfLabel", t);
}
function Lg(t) {
  return (0, Lt.isObj)(t) && (0, Lt.hasProp)(t, "$type") && t.$type === "com.atproto.label.defs#labelValueDefinition";
}
function kg(t) {
  return Kn.lexicons.validate("com.atproto.label.defs#labelValueDefinition", t);
}
function Bg(t) {
  return (0, Lt.isObj)(t) && (0, Lt.hasProp)(t, "$type") && t.$type === "com.atproto.label.defs#labelValueDefinitionStrings";
}
function Dg(t) {
  return Kn.lexicons.validate("com.atproto.label.defs#labelValueDefinitionStrings", t);
}
var Po = {};
Object.defineProperty(Po, "__esModule", { value: !0 });
Po.toKnownErr = Pg;
function Pg(t) {
  return t;
}
var Qi = {};
Object.defineProperty(Qi, "__esModule", { value: !0 });
Qi.isLabels = Ug;
Qi.validateLabels = Kg;
Qi.isInfo = jg;
Qi.validateInfo = Vg;
const xs = M, ey = O;
function Ug(t) {
  return (0, xs.isObj)(t) && (0, xs.hasProp)(t, "$type") && t.$type === "com.atproto.label.subscribeLabels#labels";
}
function Kg(t) {
  return ey.lexicons.validate("com.atproto.label.subscribeLabels#labels", t);
}
function jg(t) {
  return (0, xs.isObj)(t) && (0, xs.hasProp)(t, "$type") && t.$type === "com.atproto.label.subscribeLabels#info";
}
function Vg(t) {
  return ey.lexicons.validate("com.atproto.label.subscribeLabels#info", t);
}
var Uo = {};
Object.defineProperty(Uo, "__esModule", { value: !0 });
Uo.toKnownErr = Og;
function Og(t) {
  return t;
}
var Be = {};
Object.defineProperty(Be, "__esModule", { value: !0 });
Be.REASONAPPEAL = Be.REASONOTHER = Be.REASONRUDE = Be.REASONSEXUAL = Be.REASONMISLEADING = Be.REASONVIOLATION = Be.REASONSPAM = void 0;
Be.REASONSPAM = "com.atproto.moderation.defs#reasonSpam";
Be.REASONVIOLATION = "com.atproto.moderation.defs#reasonViolation";
Be.REASONMISLEADING = "com.atproto.moderation.defs#reasonMisleading";
Be.REASONSEXUAL = "com.atproto.moderation.defs#reasonSexual";
Be.REASONRUDE = "com.atproto.moderation.defs#reasonRude";
Be.REASONOTHER = "com.atproto.moderation.defs#reasonOther";
Be.REASONAPPEAL = "com.atproto.moderation.defs#reasonAppeal";
var Vs = {};
Object.defineProperty(Vs, "__esModule", { value: !0 });
Vs.isCommitMeta = Ng;
Vs.validateCommitMeta = Mg;
const sc = M, Ig = O;
function Ng(t) {
  return (0, sc.isObj)(t) && (0, sc.hasProp)(t, "$type") && t.$type === "com.atproto.repo.defs#commitMeta";
}
function Mg(t) {
  return Ig.lexicons.validate("com.atproto.repo.defs#commitMeta", t);
}
var Ko = {};
Object.defineProperty(Ko, "__esModule", { value: !0 });
Ko.toKnownErr = $g;
function $g(t) {
  return t;
}
var jo = {};
Object.defineProperty(jo, "__esModule", { value: !0 });
jo.toKnownErr = qg;
function qg(t) {
  return t;
}
var jn = {};
Object.defineProperty(jn, "__esModule", { value: !0 });
jn.toKnownErr = zg;
jn.isRecordBlob = Fg;
jn.validateRecordBlob = Xg;
const ac = M, Gg = O;
function zg(t) {
  return t;
}
function Fg(t) {
  return (0, ac.isObj)(t) && (0, ac.hasProp)(t, "$type") && t.$type === "com.atproto.repo.listMissingBlobs#recordBlob";
}
function Xg(t) {
  return Gg.lexicons.validate("com.atproto.repo.listMissingBlobs#recordBlob", t);
}
var Vn = {};
Object.defineProperty(Vn, "__esModule", { value: !0 });
Vn.toKnownErr = Hg;
Vn.isRecord = Wg;
Vn.validateRecord = Jg;
const oc = M, Zg = O;
function Hg(t) {
  return t;
}
function Wg(t) {
  return (0, oc.isObj)(t) && (0, oc.hasProp)(t, "$type") && t.$type === "com.atproto.repo.listRecords#record";
}
function Jg(t) {
  return Zg.lexicons.validate("com.atproto.repo.listRecords#record", t);
}
var Os = {};
Object.defineProperty(Os, "__esModule", { value: !0 });
Os.isMain = Yg;
Os.validateMain = ex;
const lc = M, Qg = O;
function Yg(t) {
  return (0, lc.isObj)(t) && (0, lc.hasProp)(t, "$type") && (t.$type === "com.atproto.repo.strongRef#main" || t.$type === "com.atproto.repo.strongRef");
}
function ex(t) {
  return Qg.lexicons.validate("com.atproto.repo.strongRef#main", t);
}
var Vo = {};
Object.defineProperty(Vo, "__esModule", { value: !0 });
Vo.toKnownErr = tx;
function tx(t) {
  return t;
}
var Oo = {};
Object.defineProperty(Oo, "__esModule", { value: !0 });
Oo.toKnownErr = rx;
function rx(t) {
  return t;
}
var Io = {};
Object.defineProperty(Io, "__esModule", { value: !0 });
Io.toKnownErr = ix;
function ix(t) {
  return t;
}
var No = {};
Object.defineProperty(No, "__esModule", { value: !0 });
No.toKnownErr = nx;
function nx(t) {
  return t;
}
var On = {};
Object.defineProperty(On, "__esModule", { value: !0 });
On.toKnownErr = ax;
On.isAccountCodes = ox;
On.validateAccountCodes = lx;
const uc = M, sx = O;
function ax(t) {
  return t;
}
function ox(t) {
  return (0, uc.isObj)(t) && (0, uc.hasProp)(t, "$type") && t.$type === "com.atproto.server.createInviteCodes#accountCodes";
}
function lx(t) {
  return sx.lexicons.validate("com.atproto.server.createInviteCodes#accountCodes", t);
}
var Mo = {};
Object.defineProperty(Mo, "__esModule", { value: !0 });
Mo.toKnownErr = ux;
function ux(t) {
  return t;
}
var Yi = {};
Object.defineProperty(Yi, "__esModule", { value: !0 });
Yi.isInviteCode = cx;
Yi.validateInviteCode = px;
Yi.isInviteCodeUse = dx;
Yi.validateInviteCodeUse = fx;
const Rs = M, ty = O;
function cx(t) {
  return (0, Rs.isObj)(t) && (0, Rs.hasProp)(t, "$type") && t.$type === "com.atproto.server.defs#inviteCode";
}
function px(t) {
  return ty.lexicons.validate("com.atproto.server.defs#inviteCode", t);
}
function dx(t) {
  return (0, Rs.isObj)(t) && (0, Rs.hasProp)(t, "$type") && t.$type === "com.atproto.server.defs#inviteCodeUse";
}
function fx(t) {
  return ty.lexicons.validate("com.atproto.server.defs#inviteCodeUse", t);
}
var $o = {};
Object.defineProperty($o, "__esModule", { value: !0 });
$o.toKnownErr = yx;
function yx(t) {
  return t;
}
var ei = {};
Object.defineProperty(ei, "__esModule", { value: !0 });
ei.toKnownErr = mx;
ei.isLinks = bx;
ei.validateLinks = hx;
ei.isContact = Ex;
ei.validateContact = gx;
const As = M, ry = O;
function mx(t) {
  return t;
}
function bx(t) {
  return (0, As.isObj)(t) && (0, As.hasProp)(t, "$type") && t.$type === "com.atproto.server.describeServer#links";
}
function hx(t) {
  return ry.lexicons.validate("com.atproto.server.describeServer#links", t);
}
function Ex(t) {
  return (0, As.isObj)(t) && (0, As.hasProp)(t, "$type") && t.$type === "com.atproto.server.describeServer#contact";
}
function gx(t) {
  return ry.lexicons.validate("com.atproto.server.describeServer#contact", t);
}
var qo = {};
Object.defineProperty(qo, "__esModule", { value: !0 });
qo.toKnownErr = xx;
function xx(t) {
  return t;
}
var Go = {};
Object.defineProperty(Go, "__esModule", { value: !0 });
Go.toKnownErr = Rx;
function Rx(t) {
  return t;
}
var zo = {};
Object.defineProperty(zo, "__esModule", { value: !0 });
zo.toKnownErr = Ax;
function Ax(t) {
  return t;
}
var Fo = {};
Object.defineProperty(Fo, "__esModule", { value: !0 });
Fo.toKnownErr = vx;
function vx(t) {
  return t;
}
var Xo = {};
Object.defineProperty(Xo, "__esModule", { value: !0 });
Xo.toKnownErr = Tx;
function Tx(t) {
  return t;
}
var Zo = {};
Object.defineProperty(Zo, "__esModule", { value: !0 });
Zo.toKnownErr = _x;
function _x(t) {
  return t;
}
var Ho = {};
Object.defineProperty(Ho, "__esModule", { value: !0 });
Ho.toKnownErr = Cx;
function Cx(t) {
  return t;
}
var Wo = {};
Object.defineProperty(Wo, "__esModule", { value: !0 });
Wo.toKnownErr = wx;
function wx(t) {
  return t;
}
var In = {};
Object.defineProperty(In, "__esModule", { value: !0 });
In.toKnownErr = Lx;
In.isRepo = kx;
In.validateRepo = Bx;
const cc = M, Sx = O;
function Lx(t) {
  return t;
}
function kx(t) {
  return (0, cc.isObj)(t) && (0, cc.hasProp)(t, "$type") && t.$type === "com.atproto.sync.listRepos#repo";
}
function Bx(t) {
  return Sx.lexicons.validate("com.atproto.sync.listRepos#repo", t);
}
var Jo = {};
Object.defineProperty(Jo, "__esModule", { value: !0 });
Jo.toKnownErr = Dx;
function Dx(t) {
  return t;
}
var Qo = {};
Object.defineProperty(Qo, "__esModule", { value: !0 });
Qo.toKnownErr = Px;
function Px(t) {
  return t;
}
var ge = {};
Object.defineProperty(ge, "__esModule", { value: !0 });
ge.isCommit = Ux;
ge.validateCommit = Kx;
ge.isIdentity = jx;
ge.validateIdentity = Vx;
ge.isAccount = Ox;
ge.validateAccount = Ix;
ge.isHandle = Nx;
ge.validateHandle = Mx;
ge.isMigrate = $x;
ge.validateMigrate = qx;
ge.isTombstone = Gx;
ge.validateTombstone = zx;
ge.isInfo = Fx;
ge.validateInfo = Xx;
ge.isRepoOp = Zx;
ge.validateRepoOp = Hx;
const De = M, Dr = O;
function Ux(t) {
  return (0, De.isObj)(t) && (0, De.hasProp)(t, "$type") && t.$type === "com.atproto.sync.subscribeRepos#commit";
}
function Kx(t) {
  return Dr.lexicons.validate("com.atproto.sync.subscribeRepos#commit", t);
}
function jx(t) {
  return (0, De.isObj)(t) && (0, De.hasProp)(t, "$type") && t.$type === "com.atproto.sync.subscribeRepos#identity";
}
function Vx(t) {
  return Dr.lexicons.validate("com.atproto.sync.subscribeRepos#identity", t);
}
function Ox(t) {
  return (0, De.isObj)(t) && (0, De.hasProp)(t, "$type") && t.$type === "com.atproto.sync.subscribeRepos#account";
}
function Ix(t) {
  return Dr.lexicons.validate("com.atproto.sync.subscribeRepos#account", t);
}
function Nx(t) {
  return (0, De.isObj)(t) && (0, De.hasProp)(t, "$type") && t.$type === "com.atproto.sync.subscribeRepos#handle";
}
function Mx(t) {
  return Dr.lexicons.validate("com.atproto.sync.subscribeRepos#handle", t);
}
function $x(t) {
  return (0, De.isObj)(t) && (0, De.hasProp)(t, "$type") && t.$type === "com.atproto.sync.subscribeRepos#migrate";
}
function qx(t) {
  return Dr.lexicons.validate("com.atproto.sync.subscribeRepos#migrate", t);
}
function Gx(t) {
  return (0, De.isObj)(t) && (0, De.hasProp)(t, "$type") && t.$type === "com.atproto.sync.subscribeRepos#tombstone";
}
function zx(t) {
  return Dr.lexicons.validate("com.atproto.sync.subscribeRepos#tombstone", t);
}
function Fx(t) {
  return (0, De.isObj)(t) && (0, De.hasProp)(t, "$type") && t.$type === "com.atproto.sync.subscribeRepos#info";
}
function Xx(t) {
  return Dr.lexicons.validate("com.atproto.sync.subscribeRepos#info", t);
}
function Zx(t) {
  return (0, De.isObj)(t) && (0, De.hasProp)(t, "$type") && t.$type === "com.atproto.sync.subscribeRepos#repoOp";
}
function Hx(t) {
  return Dr.lexicons.validate("com.atproto.sync.subscribeRepos#repoOp", t);
}
var Yo = {};
Object.defineProperty(Yo, "__esModule", { value: !0 });
Yo.toKnownErr = Wx;
function Wx(t) {
  return t;
}
var el = {};
Object.defineProperty(el, "__esModule", { value: !0 });
el.toKnownErr = Jx;
function Jx(t) {
  return t;
}
var tl = {};
Object.defineProperty(tl, "__esModule", { value: !0 });
tl.toKnownErr = Qx;
function Qx(t) {
  return t;
}
var rl = {};
Object.defineProperty(rl, "__esModule", { value: !0 });
rl.toKnownErr = Yx;
function Yx(t) {
  return t;
}
var F = {};
Object.defineProperty(F, "__esModule", { value: !0 });
F.isProfileViewBasic = eR;
F.validateProfileViewBasic = tR;
F.isProfileView = rR;
F.validateProfileView = iR;
F.isProfileViewDetailed = nR;
F.validateProfileViewDetailed = sR;
F.isProfileAssociated = aR;
F.validateProfileAssociated = oR;
F.isProfileAssociatedChat = lR;
F.validateProfileAssociatedChat = uR;
F.isViewerState = cR;
F.validateViewerState = pR;
F.isKnownFollowers = dR;
F.validateKnownFollowers = fR;
F.isAdultContentPref = yR;
F.validateAdultContentPref = mR;
F.isContentLabelPref = bR;
F.validateContentLabelPref = hR;
F.isSavedFeed = ER;
F.validateSavedFeed = gR;
F.isSavedFeedsPrefV2 = xR;
F.validateSavedFeedsPrefV2 = RR;
F.isSavedFeedsPref = AR;
F.validateSavedFeedsPref = vR;
F.isPersonalDetailsPref = TR;
F.validatePersonalDetailsPref = _R;
F.isFeedViewPref = CR;
F.validateFeedViewPref = wR;
F.isThreadViewPref = SR;
F.validateThreadViewPref = LR;
F.isInterestsPref = kR;
F.validateInterestsPref = BR;
F.isMutedWord = DR;
F.validateMutedWord = PR;
F.isMutedWordsPref = UR;
F.validateMutedWordsPref = KR;
F.isHiddenPostsPref = jR;
F.validateHiddenPostsPref = VR;
F.isLabelersPref = OR;
F.validateLabelersPref = IR;
F.isLabelerPrefItem = NR;
F.validateLabelerPrefItem = MR;
F.isBskyAppStatePref = $R;
F.validateBskyAppStatePref = qR;
F.isBskyAppProgressGuide = GR;
F.validateBskyAppProgressGuide = zR;
F.isNux = FR;
F.validateNux = XR;
const H = M, de = O;
function eR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#profileViewBasic";
}
function tR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#profileViewBasic", t);
}
function rR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#profileView";
}
function iR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#profileView", t);
}
function nR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#profileViewDetailed";
}
function sR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#profileViewDetailed", t);
}
function aR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#profileAssociated";
}
function oR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#profileAssociated", t);
}
function lR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#profileAssociatedChat";
}
function uR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#profileAssociatedChat", t);
}
function cR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#viewerState";
}
function pR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#viewerState", t);
}
function dR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#knownFollowers";
}
function fR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#knownFollowers", t);
}
function yR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#adultContentPref";
}
function mR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#adultContentPref", t);
}
function bR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#contentLabelPref";
}
function hR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#contentLabelPref", t);
}
function ER(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#savedFeed";
}
function gR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#savedFeed", t);
}
function xR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#savedFeedsPrefV2";
}
function RR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#savedFeedsPrefV2", t);
}
function AR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#savedFeedsPref";
}
function vR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#savedFeedsPref", t);
}
function TR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#personalDetailsPref";
}
function _R(t) {
  return de.lexicons.validate("app.bsky.actor.defs#personalDetailsPref", t);
}
function CR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#feedViewPref";
}
function wR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#feedViewPref", t);
}
function SR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#threadViewPref";
}
function LR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#threadViewPref", t);
}
function kR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#interestsPref";
}
function BR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#interestsPref", t);
}
function DR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#mutedWord";
}
function PR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#mutedWord", t);
}
function UR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#mutedWordsPref";
}
function KR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#mutedWordsPref", t);
}
function jR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#hiddenPostsPref";
}
function VR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#hiddenPostsPref", t);
}
function OR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#labelersPref";
}
function IR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#labelersPref", t);
}
function NR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#labelerPrefItem";
}
function MR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#labelerPrefItem", t);
}
function $R(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#bskyAppStatePref";
}
function qR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#bskyAppStatePref", t);
}
function GR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#bskyAppProgressGuide";
}
function zR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#bskyAppProgressGuide", t);
}
function FR(t) {
  return (0, H.isObj)(t) && (0, H.hasProp)(t, "$type") && t.$type === "app.bsky.actor.defs#nux";
}
function XR(t) {
  return de.lexicons.validate("app.bsky.actor.defs#nux", t);
}
var il = {};
Object.defineProperty(il, "__esModule", { value: !0 });
il.toKnownErr = ZR;
function ZR(t) {
  return t;
}
var nl = {};
Object.defineProperty(nl, "__esModule", { value: !0 });
nl.toKnownErr = HR;
function HR(t) {
  return t;
}
var sl = {};
Object.defineProperty(sl, "__esModule", { value: !0 });
sl.toKnownErr = WR;
function WR(t) {
  return t;
}
var al = {};
Object.defineProperty(al, "__esModule", { value: !0 });
al.toKnownErr = JR;
function JR(t) {
  return t;
}
var Is = {};
Object.defineProperty(Is, "__esModule", { value: !0 });
Is.isRecord = YR;
Is.validateRecord = eA;
const pc = M, QR = O;
function YR(t) {
  return (0, pc.isObj)(t) && (0, pc.hasProp)(t, "$type") && (t.$type === "app.bsky.actor.profile#main" || t.$type === "app.bsky.actor.profile");
}
function eA(t) {
  return QR.lexicons.validate("app.bsky.actor.profile#main", t);
}
var ol = {};
Object.defineProperty(ol, "__esModule", { value: !0 });
ol.toKnownErr = tA;
function tA(t) {
  return t;
}
var ll = {};
Object.defineProperty(ll, "__esModule", { value: !0 });
ll.toKnownErr = rA;
function rA(t) {
  return t;
}
var ul = {};
Object.defineProperty(ul, "__esModule", { value: !0 });
ul.toKnownErr = iA;
function iA(t) {
  return t;
}
var Ns = {};
Object.defineProperty(Ns, "__esModule", { value: !0 });
Ns.isAspectRatio = sA;
Ns.validateAspectRatio = aA;
const dc = M, nA = O;
function sA(t) {
  return (0, dc.isObj)(t) && (0, dc.hasProp)(t, "$type") && t.$type === "app.bsky.embed.defs#aspectRatio";
}
function aA(t) {
  return nA.lexicons.validate("app.bsky.embed.defs#aspectRatio", t);
}
var Pt = {};
Object.defineProperty(Pt, "__esModule", { value: !0 });
Pt.isMain = oA;
Pt.validateMain = lA;
Pt.isExternal = uA;
Pt.validateExternal = cA;
Pt.isView = pA;
Pt.validateView = dA;
Pt.isViewExternal = fA;
Pt.validateViewExternal = yA;
const xr = M, Ms = O;
function oA(t) {
  return (0, xr.isObj)(t) && (0, xr.hasProp)(t, "$type") && (t.$type === "app.bsky.embed.external#main" || t.$type === "app.bsky.embed.external");
}
function lA(t) {
  return Ms.lexicons.validate("app.bsky.embed.external#main", t);
}
function uA(t) {
  return (0, xr.isObj)(t) && (0, xr.hasProp)(t, "$type") && t.$type === "app.bsky.embed.external#external";
}
function cA(t) {
  return Ms.lexicons.validate("app.bsky.embed.external#external", t);
}
function pA(t) {
  return (0, xr.isObj)(t) && (0, xr.hasProp)(t, "$type") && t.$type === "app.bsky.embed.external#view";
}
function dA(t) {
  return Ms.lexicons.validate("app.bsky.embed.external#view", t);
}
function fA(t) {
  return (0, xr.isObj)(t) && (0, xr.hasProp)(t, "$type") && t.$type === "app.bsky.embed.external#viewExternal";
}
function yA(t) {
  return Ms.lexicons.validate("app.bsky.embed.external#viewExternal", t);
}
var Ut = {};
Object.defineProperty(Ut, "__esModule", { value: !0 });
Ut.isMain = mA;
Ut.validateMain = bA;
Ut.isImage = hA;
Ut.validateImage = EA;
Ut.isView = gA;
Ut.validateView = xA;
Ut.isViewImage = RA;
Ut.validateViewImage = AA;
const Rr = M, $s = O;
function mA(t) {
  return (0, Rr.isObj)(t) && (0, Rr.hasProp)(t, "$type") && (t.$type === "app.bsky.embed.images#main" || t.$type === "app.bsky.embed.images");
}
function bA(t) {
  return $s.lexicons.validate("app.bsky.embed.images#main", t);
}
function hA(t) {
  return (0, Rr.isObj)(t) && (0, Rr.hasProp)(t, "$type") && t.$type === "app.bsky.embed.images#image";
}
function EA(t) {
  return $s.lexicons.validate("app.bsky.embed.images#image", t);
}
function gA(t) {
  return (0, Rr.isObj)(t) && (0, Rr.hasProp)(t, "$type") && t.$type === "app.bsky.embed.images#view";
}
function xA(t) {
  return $s.lexicons.validate("app.bsky.embed.images#view", t);
}
function RA(t) {
  return (0, Rr.isObj)(t) && (0, Rr.hasProp)(t, "$type") && t.$type === "app.bsky.embed.images#viewImage";
}
function AA(t) {
  return $s.lexicons.validate("app.bsky.embed.images#viewImage", t);
}
var qe = {};
Object.defineProperty(qe, "__esModule", { value: !0 });
qe.isMain = vA;
qe.validateMain = TA;
qe.isView = _A;
qe.validateView = CA;
qe.isViewRecord = wA;
qe.validateViewRecord = SA;
qe.isViewNotFound = LA;
qe.validateViewNotFound = kA;
qe.isViewBlocked = BA;
qe.validateViewBlocked = DA;
qe.isViewDetached = PA;
qe.validateViewDetached = UA;
const it = M, en = O;
function vA(t) {
  return (0, it.isObj)(t) && (0, it.hasProp)(t, "$type") && (t.$type === "app.bsky.embed.record#main" || t.$type === "app.bsky.embed.record");
}
function TA(t) {
  return en.lexicons.validate("app.bsky.embed.record#main", t);
}
function _A(t) {
  return (0, it.isObj)(t) && (0, it.hasProp)(t, "$type") && t.$type === "app.bsky.embed.record#view";
}
function CA(t) {
  return en.lexicons.validate("app.bsky.embed.record#view", t);
}
function wA(t) {
  return (0, it.isObj)(t) && (0, it.hasProp)(t, "$type") && t.$type === "app.bsky.embed.record#viewRecord";
}
function SA(t) {
  return en.lexicons.validate("app.bsky.embed.record#viewRecord", t);
}
function LA(t) {
  return (0, it.isObj)(t) && (0, it.hasProp)(t, "$type") && t.$type === "app.bsky.embed.record#viewNotFound";
}
function kA(t) {
  return en.lexicons.validate("app.bsky.embed.record#viewNotFound", t);
}
function BA(t) {
  return (0, it.isObj)(t) && (0, it.hasProp)(t, "$type") && t.$type === "app.bsky.embed.record#viewBlocked";
}
function DA(t) {
  return en.lexicons.validate("app.bsky.embed.record#viewBlocked", t);
}
function PA(t) {
  return (0, it.isObj)(t) && (0, it.hasProp)(t, "$type") && t.$type === "app.bsky.embed.record#viewDetached";
}
function UA(t) {
  return en.lexicons.validate("app.bsky.embed.record#viewDetached", t);
}
var tn = {};
Object.defineProperty(tn, "__esModule", { value: !0 });
tn.isMain = KA;
tn.validateMain = jA;
tn.isView = VA;
tn.validateView = OA;
const vs = M, iy = O;
function KA(t) {
  return (0, vs.isObj)(t) && (0, vs.hasProp)(t, "$type") && (t.$type === "app.bsky.embed.recordWithMedia#main" || t.$type === "app.bsky.embed.recordWithMedia");
}
function jA(t) {
  return iy.lexicons.validate("app.bsky.embed.recordWithMedia#main", t);
}
function VA(t) {
  return (0, vs.isObj)(t) && (0, vs.hasProp)(t, "$type") && t.$type === "app.bsky.embed.recordWithMedia#view";
}
function OA(t) {
  return iy.lexicons.validate("app.bsky.embed.recordWithMedia#view", t);
}
var Pr = {};
Object.defineProperty(Pr, "__esModule", { value: !0 });
Pr.isMain = IA;
Pr.validateMain = NA;
Pr.isCaption = MA;
Pr.validateCaption = $A;
Pr.isView = qA;
Pr.validateView = GA;
const mi = M, cl = O;
function IA(t) {
  return (0, mi.isObj)(t) && (0, mi.hasProp)(t, "$type") && (t.$type === "app.bsky.embed.video#main" || t.$type === "app.bsky.embed.video");
}
function NA(t) {
  return cl.lexicons.validate("app.bsky.embed.video#main", t);
}
function MA(t) {
  return (0, mi.isObj)(t) && (0, mi.hasProp)(t, "$type") && t.$type === "app.bsky.embed.video#caption";
}
function $A(t) {
  return cl.lexicons.validate("app.bsky.embed.video#caption", t);
}
function qA(t) {
  return (0, mi.isObj)(t) && (0, mi.hasProp)(t, "$type") && t.$type === "app.bsky.embed.video#view";
}
function GA(t) {
  return cl.lexicons.validate("app.bsky.embed.video#view", t);
}
var q = {};
Object.defineProperty(q, "__esModule", { value: !0 });
q.INTERACTIONSHARE = q.INTERACTIONQUOTE = q.INTERACTIONREPLY = q.INTERACTIONREPOST = q.INTERACTIONLIKE = q.INTERACTIONSEEN = q.CLICKTHROUGHEMBED = q.CLICKTHROUGHREPOSTER = q.CLICKTHROUGHAUTHOR = q.CLICKTHROUGHITEM = q.REQUESTMORE = q.REQUESTLESS = void 0;
q.isPostView = zA;
q.validatePostView = FA;
q.isViewerState = XA;
q.validateViewerState = ZA;
q.isFeedViewPost = HA;
q.validateFeedViewPost = WA;
q.isReplyRef = JA;
q.validateReplyRef = QA;
q.isReasonRepost = YA;
q.validateReasonRepost = ev;
q.isReasonPin = tv;
q.validateReasonPin = rv;
q.isThreadViewPost = iv;
q.validateThreadViewPost = nv;
q.isNotFoundPost = sv;
q.validateNotFoundPost = av;
q.isBlockedPost = ov;
q.validateBlockedPost = lv;
q.isBlockedAuthor = uv;
q.validateBlockedAuthor = cv;
q.isGeneratorView = pv;
q.validateGeneratorView = dv;
q.isGeneratorViewerState = fv;
q.validateGeneratorViewerState = yv;
q.isSkeletonFeedPost = mv;
q.validateSkeletonFeedPost = bv;
q.isSkeletonReasonRepost = hv;
q.validateSkeletonReasonRepost = Ev;
q.isSkeletonReasonPin = gv;
q.validateSkeletonReasonPin = xv;
q.isThreadgateView = Rv;
q.validateThreadgateView = Av;
q.isInteraction = vv;
q.validateInteraction = Tv;
const ee = M, Te = O;
function zA(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#postView";
}
function FA(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#postView", t);
}
function XA(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#viewerState";
}
function ZA(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#viewerState", t);
}
function HA(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#feedViewPost";
}
function WA(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#feedViewPost", t);
}
function JA(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#replyRef";
}
function QA(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#replyRef", t);
}
function YA(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#reasonRepost";
}
function ev(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#reasonRepost", t);
}
function tv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#reasonPin";
}
function rv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#reasonPin", t);
}
function iv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#threadViewPost";
}
function nv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#threadViewPost", t);
}
function sv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#notFoundPost";
}
function av(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#notFoundPost", t);
}
function ov(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#blockedPost";
}
function lv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#blockedPost", t);
}
function uv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#blockedAuthor";
}
function cv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#blockedAuthor", t);
}
function pv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#generatorView";
}
function dv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#generatorView", t);
}
function fv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#generatorViewerState";
}
function yv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#generatorViewerState", t);
}
function mv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#skeletonFeedPost";
}
function bv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#skeletonFeedPost", t);
}
function hv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#skeletonReasonRepost";
}
function Ev(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#skeletonReasonRepost", t);
}
function gv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#skeletonReasonPin";
}
function xv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#skeletonReasonPin", t);
}
function Rv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#threadgateView";
}
function Av(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#threadgateView", t);
}
function vv(t) {
  return (0, ee.isObj)(t) && (0, ee.hasProp)(t, "$type") && t.$type === "app.bsky.feed.defs#interaction";
}
function Tv(t) {
  return Te.lexicons.validate("app.bsky.feed.defs#interaction", t);
}
q.REQUESTLESS = "app.bsky.feed.defs#requestLess";
q.REQUESTMORE = "app.bsky.feed.defs#requestMore";
q.CLICKTHROUGHITEM = "app.bsky.feed.defs#clickthroughItem";
q.CLICKTHROUGHAUTHOR = "app.bsky.feed.defs#clickthroughAuthor";
q.CLICKTHROUGHREPOSTER = "app.bsky.feed.defs#clickthroughReposter";
q.CLICKTHROUGHEMBED = "app.bsky.feed.defs#clickthroughEmbed";
q.INTERACTIONSEEN = "app.bsky.feed.defs#interactionSeen";
q.INTERACTIONLIKE = "app.bsky.feed.defs#interactionLike";
q.INTERACTIONREPOST = "app.bsky.feed.defs#interactionRepost";
q.INTERACTIONREPLY = "app.bsky.feed.defs#interactionReply";
q.INTERACTIONQUOTE = "app.bsky.feed.defs#interactionQuote";
q.INTERACTIONSHARE = "app.bsky.feed.defs#interactionShare";
var ti = {};
Object.defineProperty(ti, "__esModule", { value: !0 });
ti.toKnownErr = _v;
ti.isFeed = Cv;
ti.validateFeed = wv;
ti.isLinks = Sv;
ti.validateLinks = Lv;
const Ts = M, ny = O;
function _v(t) {
  return t;
}
function Cv(t) {
  return (0, Ts.isObj)(t) && (0, Ts.hasProp)(t, "$type") && t.$type === "app.bsky.feed.describeFeedGenerator#feed";
}
function wv(t) {
  return ny.lexicons.validate("app.bsky.feed.describeFeedGenerator#feed", t);
}
function Sv(t) {
  return (0, Ts.isObj)(t) && (0, Ts.hasProp)(t, "$type") && t.$type === "app.bsky.feed.describeFeedGenerator#links";
}
function Lv(t) {
  return ny.lexicons.validate("app.bsky.feed.describeFeedGenerator#links", t);
}
var qs = {};
Object.defineProperty(qs, "__esModule", { value: !0 });
qs.isRecord = Bv;
qs.validateRecord = Dv;
const fc = M, kv = O;
function Bv(t) {
  return (0, fc.isObj)(t) && (0, fc.hasProp)(t, "$type") && (t.$type === "app.bsky.feed.generator#main" || t.$type === "app.bsky.feed.generator");
}
function Dv(t) {
  return kv.lexicons.validate("app.bsky.feed.generator#main", t);
}
var pl = {};
Object.defineProperty(pl, "__esModule", { value: !0 });
pl.toKnownErr = Pv;
function Pv(t) {
  return t;
}
var dl = {};
Object.defineProperty(dl, "__esModule", { value: !0 });
dl.toKnownErr = Uv;
function Uv(t) {
  return t;
}
var fl = {};
Object.defineProperty(fl, "__esModule", { value: !0 });
fl.toKnownErr = Kv;
function Kv(t) {
  return t;
}
var Nn = {};
Object.defineProperty(Nn, "__esModule", { value: !0 });
Nn.toKnownErr = Vv;
Nn.isLike = Ov;
Nn.validateLike = Iv;
const yc = M, jv = O;
function Vv(t) {
  return t;
}
function Ov(t) {
  return (0, yc.isObj)(t) && (0, yc.hasProp)(t, "$type") && t.$type === "app.bsky.feed.getLikes#like";
}
function Iv(t) {
  return jv.lexicons.validate("app.bsky.feed.getLikes#like", t);
}
var yl = {};
Object.defineProperty(yl, "__esModule", { value: !0 });
yl.toKnownErr = Nv;
function Nv(t) {
  return t;
}
var ml = {};
Object.defineProperty(ml, "__esModule", { value: !0 });
ml.toKnownErr = Mv;
function Mv(t) {
  return t;
}
var bl = {};
Object.defineProperty(bl, "__esModule", { value: !0 });
bl.toKnownErr = $v;
function $v(t) {
  return t;
}
var hl = {};
Object.defineProperty(hl, "__esModule", { value: !0 });
hl.toKnownErr = qv;
function qv(t) {
  return t;
}
var El = {};
Object.defineProperty(El, "__esModule", { value: !0 });
El.toKnownErr = Gv;
function Gv(t) {
  return t;
}
var Gs = {};
Object.defineProperty(Gs, "__esModule", { value: !0 });
Gs.isRecord = Fv;
Gs.validateRecord = Xv;
const mc = M, zv = O;
function Fv(t) {
  return (0, mc.isObj)(t) && (0, mc.hasProp)(t, "$type") && (t.$type === "app.bsky.feed.like#main" || t.$type === "app.bsky.feed.like");
}
function Xv(t) {
  return zv.lexicons.validate("app.bsky.feed.like#main", t);
}
var Kt = {};
Object.defineProperty(Kt, "__esModule", { value: !0 });
Kt.isRecord = Zv;
Kt.validateRecord = Hv;
Kt.isReplyRef = Wv;
Kt.validateReplyRef = Jv;
Kt.isEntity = Qv;
Kt.validateEntity = Yv;
Kt.isTextSlice = eT;
Kt.validateTextSlice = tT;
const Ar = M, zs = O;
function Zv(t) {
  return (0, Ar.isObj)(t) && (0, Ar.hasProp)(t, "$type") && (t.$type === "app.bsky.feed.post#main" || t.$type === "app.bsky.feed.post");
}
function Hv(t) {
  return zs.lexicons.validate("app.bsky.feed.post#main", t);
}
function Wv(t) {
  return (0, Ar.isObj)(t) && (0, Ar.hasProp)(t, "$type") && t.$type === "app.bsky.feed.post#replyRef";
}
function Jv(t) {
  return zs.lexicons.validate("app.bsky.feed.post#replyRef", t);
}
function Qv(t) {
  return (0, Ar.isObj)(t) && (0, Ar.hasProp)(t, "$type") && t.$type === "app.bsky.feed.post#entity";
}
function Yv(t) {
  return zs.lexicons.validate("app.bsky.feed.post#entity", t);
}
function eT(t) {
  return (0, Ar.isObj)(t) && (0, Ar.hasProp)(t, "$type") && t.$type === "app.bsky.feed.post#textSlice";
}
function tT(t) {
  return zs.lexicons.validate("app.bsky.feed.post#textSlice", t);
}
var rn = {};
Object.defineProperty(rn, "__esModule", { value: !0 });
rn.isRecord = rT;
rn.validateRecord = iT;
rn.isDisableRule = nT;
rn.validateDisableRule = sT;
const _s = M, sy = O;
function rT(t) {
  return (0, _s.isObj)(t) && (0, _s.hasProp)(t, "$type") && (t.$type === "app.bsky.feed.postgate#main" || t.$type === "app.bsky.feed.postgate");
}
function iT(t) {
  return sy.lexicons.validate("app.bsky.feed.postgate#main", t);
}
function nT(t) {
  return (0, _s.isObj)(t) && (0, _s.hasProp)(t, "$type") && t.$type === "app.bsky.feed.postgate#disableRule";
}
function sT(t) {
  return sy.lexicons.validate("app.bsky.feed.postgate#disableRule", t);
}
var Fs = {};
Object.defineProperty(Fs, "__esModule", { value: !0 });
Fs.isRecord = oT;
Fs.validateRecord = lT;
const bc = M, aT = O;
function oT(t) {
  return (0, bc.isObj)(t) && (0, bc.hasProp)(t, "$type") && (t.$type === "app.bsky.feed.repost#main" || t.$type === "app.bsky.feed.repost");
}
function lT(t) {
  return aT.lexicons.validate("app.bsky.feed.repost#main", t);
}
var gl = {};
Object.defineProperty(gl, "__esModule", { value: !0 });
gl.toKnownErr = uT;
function uT(t) {
  return t;
}
var jt = {};
Object.defineProperty(jt, "__esModule", { value: !0 });
jt.isRecord = cT;
jt.validateRecord = pT;
jt.isMentionRule = dT;
jt.validateMentionRule = fT;
jt.isFollowingRule = yT;
jt.validateFollowingRule = mT;
jt.isListRule = bT;
jt.validateListRule = hT;
const vr = M, Xs = O;
function cT(t) {
  return (0, vr.isObj)(t) && (0, vr.hasProp)(t, "$type") && (t.$type === "app.bsky.feed.threadgate#main" || t.$type === "app.bsky.feed.threadgate");
}
function pT(t) {
  return Xs.lexicons.validate("app.bsky.feed.threadgate#main", t);
}
function dT(t) {
  return (0, vr.isObj)(t) && (0, vr.hasProp)(t, "$type") && t.$type === "app.bsky.feed.threadgate#mentionRule";
}
function fT(t) {
  return Xs.lexicons.validate("app.bsky.feed.threadgate#mentionRule", t);
}
function yT(t) {
  return (0, vr.isObj)(t) && (0, vr.hasProp)(t, "$type") && t.$type === "app.bsky.feed.threadgate#followingRule";
}
function mT(t) {
  return Xs.lexicons.validate("app.bsky.feed.threadgate#followingRule", t);
}
function bT(t) {
  return (0, vr.isObj)(t) && (0, vr.hasProp)(t, "$type") && t.$type === "app.bsky.feed.threadgate#listRule";
}
function hT(t) {
  return Xs.lexicons.validate("app.bsky.feed.threadgate#listRule", t);
}
var Zs = {};
Object.defineProperty(Zs, "__esModule", { value: !0 });
Zs.isRecord = gT;
Zs.validateRecord = xT;
const hc = M, ET = O;
function gT(t) {
  return (0, hc.isObj)(t) && (0, hc.hasProp)(t, "$type") && (t.$type === "app.bsky.graph.block#main" || t.$type === "app.bsky.graph.block");
}
function xT(t) {
  return ET.lexicons.validate("app.bsky.graph.block#main", t);
}
var pe = {};
Object.defineProperty(pe, "__esModule", { value: !0 });
pe.REFERENCELIST = pe.CURATELIST = pe.MODLIST = void 0;
pe.isListViewBasic = RT;
pe.validateListViewBasic = AT;
pe.isListView = vT;
pe.validateListView = TT;
pe.isListItemView = _T;
pe.validateListItemView = CT;
pe.isStarterPackView = wT;
pe.validateStarterPackView = ST;
pe.isStarterPackViewBasic = LT;
pe.validateStarterPackViewBasic = kT;
pe.isListViewerState = BT;
pe.validateListViewerState = DT;
pe.isNotFoundActor = PT;
pe.validateNotFoundActor = UT;
pe.isRelationship = KT;
pe.validateRelationship = jT;
const Pe = M, Ur = O;
function RT(t) {
  return (0, Pe.isObj)(t) && (0, Pe.hasProp)(t, "$type") && t.$type === "app.bsky.graph.defs#listViewBasic";
}
function AT(t) {
  return Ur.lexicons.validate("app.bsky.graph.defs#listViewBasic", t);
}
function vT(t) {
  return (0, Pe.isObj)(t) && (0, Pe.hasProp)(t, "$type") && t.$type === "app.bsky.graph.defs#listView";
}
function TT(t) {
  return Ur.lexicons.validate("app.bsky.graph.defs#listView", t);
}
function _T(t) {
  return (0, Pe.isObj)(t) && (0, Pe.hasProp)(t, "$type") && t.$type === "app.bsky.graph.defs#listItemView";
}
function CT(t) {
  return Ur.lexicons.validate("app.bsky.graph.defs#listItemView", t);
}
function wT(t) {
  return (0, Pe.isObj)(t) && (0, Pe.hasProp)(t, "$type") && t.$type === "app.bsky.graph.defs#starterPackView";
}
function ST(t) {
  return Ur.lexicons.validate("app.bsky.graph.defs#starterPackView", t);
}
function LT(t) {
  return (0, Pe.isObj)(t) && (0, Pe.hasProp)(t, "$type") && t.$type === "app.bsky.graph.defs#starterPackViewBasic";
}
function kT(t) {
  return Ur.lexicons.validate("app.bsky.graph.defs#starterPackViewBasic", t);
}
pe.MODLIST = "app.bsky.graph.defs#modlist";
pe.CURATELIST = "app.bsky.graph.defs#curatelist";
pe.REFERENCELIST = "app.bsky.graph.defs#referencelist";
function BT(t) {
  return (0, Pe.isObj)(t) && (0, Pe.hasProp)(t, "$type") && t.$type === "app.bsky.graph.defs#listViewerState";
}
function DT(t) {
  return Ur.lexicons.validate("app.bsky.graph.defs#listViewerState", t);
}
function PT(t) {
  return (0, Pe.isObj)(t) && (0, Pe.hasProp)(t, "$type") && t.$type === "app.bsky.graph.defs#notFoundActor";
}
function UT(t) {
  return Ur.lexicons.validate("app.bsky.graph.defs#notFoundActor", t);
}
function KT(t) {
  return (0, Pe.isObj)(t) && (0, Pe.hasProp)(t, "$type") && t.$type === "app.bsky.graph.defs#relationship";
}
function jT(t) {
  return Ur.lexicons.validate("app.bsky.graph.defs#relationship", t);
}
var Hs = {};
Object.defineProperty(Hs, "__esModule", { value: !0 });
Hs.isRecord = OT;
Hs.validateRecord = IT;
const Ec = M, VT = O;
function OT(t) {
  return (0, Ec.isObj)(t) && (0, Ec.hasProp)(t, "$type") && (t.$type === "app.bsky.graph.follow#main" || t.$type === "app.bsky.graph.follow");
}
function IT(t) {
  return VT.lexicons.validate("app.bsky.graph.follow#main", t);
}
var xl = {};
Object.defineProperty(xl, "__esModule", { value: !0 });
xl.toKnownErr = NT;
function NT(t) {
  return t;
}
var Rl = {};
Object.defineProperty(Rl, "__esModule", { value: !0 });
Rl.toKnownErr = MT;
function MT(t) {
  return t;
}
var Al = {};
Object.defineProperty(Al, "__esModule", { value: !0 });
Al.toKnownErr = $T;
function $T(t) {
  return t;
}
var vl = {};
Object.defineProperty(vl, "__esModule", { value: !0 });
vl.toKnownErr = qT;
function qT(t) {
  return t;
}
var Tl = {};
Object.defineProperty(Tl, "__esModule", { value: !0 });
Tl.toKnownErr = GT;
function GT(t) {
  return t;
}
var _l = {};
Object.defineProperty(_l, "__esModule", { value: !0 });
_l.toKnownErr = zT;
function zT(t) {
  return t;
}
var Cl = {};
Object.defineProperty(Cl, "__esModule", { value: !0 });
Cl.toKnownErr = FT;
function FT(t) {
  return t;
}
var wl = {};
Object.defineProperty(wl, "__esModule", { value: !0 });
wl.toKnownErr = XT;
function XT(t) {
  return t;
}
var Sl = {};
Object.defineProperty(Sl, "__esModule", { value: !0 });
Sl.toKnownErr = ZT;
function ZT(t) {
  return t;
}
var Ll = {};
Object.defineProperty(Ll, "__esModule", { value: !0 });
Ll.toKnownErr = HT;
function HT(t) {
  return t;
}
var kl = {};
Object.defineProperty(kl, "__esModule", { value: !0 });
kl.toKnownErr = WT;
function WT(t) {
  return t;
}
var Bl = {};
Object.defineProperty(Bl, "__esModule", { value: !0 });
Bl.toKnownErr = JT;
function JT(t) {
  return t;
}
var Dl = {};
Object.defineProperty(Dl, "__esModule", { value: !0 });
Dl.toKnownErr = QT;
function QT(t) {
  return t;
}
var Ws = {};
Object.defineProperty(Ws, "__esModule", { value: !0 });
Ws.isRecord = e_;
Ws.validateRecord = t_;
const gc = M, YT = O;
function e_(t) {
  return (0, gc.isObj)(t) && (0, gc.hasProp)(t, "$type") && (t.$type === "app.bsky.graph.list#main" || t.$type === "app.bsky.graph.list");
}
function t_(t) {
  return YT.lexicons.validate("app.bsky.graph.list#main", t);
}
var Js = {};
Object.defineProperty(Js, "__esModule", { value: !0 });
Js.isRecord = i_;
Js.validateRecord = n_;
const xc = M, r_ = O;
function i_(t) {
  return (0, xc.isObj)(t) && (0, xc.hasProp)(t, "$type") && (t.$type === "app.bsky.graph.listblock#main" || t.$type === "app.bsky.graph.listblock");
}
function n_(t) {
  return r_.lexicons.validate("app.bsky.graph.listblock#main", t);
}
var Qs = {};
Object.defineProperty(Qs, "__esModule", { value: !0 });
Qs.isRecord = a_;
Qs.validateRecord = o_;
const Rc = M, s_ = O;
function a_(t) {
  return (0, Rc.isObj)(t) && (0, Rc.hasProp)(t, "$type") && (t.$type === "app.bsky.graph.listitem#main" || t.$type === "app.bsky.graph.listitem");
}
function o_(t) {
  return s_.lexicons.validate("app.bsky.graph.listitem#main", t);
}
var Pl = {};
Object.defineProperty(Pl, "__esModule", { value: !0 });
Pl.toKnownErr = l_;
function l_(t) {
  return t;
}
var Ul = {};
Object.defineProperty(Ul, "__esModule", { value: !0 });
Ul.toKnownErr = u_;
function u_(t) {
  return t;
}
var Kl = {};
Object.defineProperty(Kl, "__esModule", { value: !0 });
Kl.toKnownErr = c_;
function c_(t) {
  return t;
}
var jl = {};
Object.defineProperty(jl, "__esModule", { value: !0 });
jl.toKnownErr = p_;
function p_(t) {
  return t;
}
var nn = {};
Object.defineProperty(nn, "__esModule", { value: !0 });
nn.isRecord = d_;
nn.validateRecord = f_;
nn.isFeedItem = y_;
nn.validateFeedItem = m_;
const Cs = M, ay = O;
function d_(t) {
  return (0, Cs.isObj)(t) && (0, Cs.hasProp)(t, "$type") && (t.$type === "app.bsky.graph.starterpack#main" || t.$type === "app.bsky.graph.starterpack");
}
function f_(t) {
  return ay.lexicons.validate("app.bsky.graph.starterpack#main", t);
}
function y_(t) {
  return (0, Cs.isObj)(t) && (0, Cs.hasProp)(t, "$type") && t.$type === "app.bsky.graph.starterpack#feedItem";
}
function m_(t) {
  return ay.lexicons.validate("app.bsky.graph.starterpack#feedItem", t);
}
var Vl = {};
Object.defineProperty(Vl, "__esModule", { value: !0 });
Vl.toKnownErr = b_;
function b_(t) {
  return t;
}
var Ol = {};
Object.defineProperty(Ol, "__esModule", { value: !0 });
Ol.toKnownErr = h_;
function h_(t) {
  return t;
}
var Il = {};
Object.defineProperty(Il, "__esModule", { value: !0 });
Il.toKnownErr = E_;
function E_(t) {
  return t;
}
var Vt = {};
Object.defineProperty(Vt, "__esModule", { value: !0 });
Vt.isLabelerView = g_;
Vt.validateLabelerView = x_;
Vt.isLabelerViewDetailed = R_;
Vt.validateLabelerViewDetailed = A_;
Vt.isLabelerViewerState = v_;
Vt.validateLabelerViewerState = T_;
Vt.isLabelerPolicies = __;
Vt.validateLabelerPolicies = C_;
const Tr = M, Ys = O;
function g_(t) {
  return (0, Tr.isObj)(t) && (0, Tr.hasProp)(t, "$type") && t.$type === "app.bsky.labeler.defs#labelerView";
}
function x_(t) {
  return Ys.lexicons.validate("app.bsky.labeler.defs#labelerView", t);
}
function R_(t) {
  return (0, Tr.isObj)(t) && (0, Tr.hasProp)(t, "$type") && t.$type === "app.bsky.labeler.defs#labelerViewDetailed";
}
function A_(t) {
  return Ys.lexicons.validate("app.bsky.labeler.defs#labelerViewDetailed", t);
}
function v_(t) {
  return (0, Tr.isObj)(t) && (0, Tr.hasProp)(t, "$type") && t.$type === "app.bsky.labeler.defs#labelerViewerState";
}
function T_(t) {
  return Ys.lexicons.validate("app.bsky.labeler.defs#labelerViewerState", t);
}
function __(t) {
  return (0, Tr.isObj)(t) && (0, Tr.hasProp)(t, "$type") && t.$type === "app.bsky.labeler.defs#labelerPolicies";
}
function C_(t) {
  return Ys.lexicons.validate("app.bsky.labeler.defs#labelerPolicies", t);
}
var Nl = {};
Object.defineProperty(Nl, "__esModule", { value: !0 });
Nl.toKnownErr = w_;
function w_(t) {
  return t;
}
var ea = {};
Object.defineProperty(ea, "__esModule", { value: !0 });
ea.isRecord = L_;
ea.validateRecord = k_;
const Ac = M, S_ = O;
function L_(t) {
  return (0, Ac.isObj)(t) && (0, Ac.hasProp)(t, "$type") && (t.$type === "app.bsky.labeler.service#main" || t.$type === "app.bsky.labeler.service");
}
function k_(t) {
  return S_.lexicons.validate("app.bsky.labeler.service#main", t);
}
var Ml = {};
Object.defineProperty(Ml, "__esModule", { value: !0 });
Ml.toKnownErr = B_;
function B_(t) {
  return t;
}
var Mn = {};
Object.defineProperty(Mn, "__esModule", { value: !0 });
Mn.toKnownErr = P_;
Mn.isNotification = U_;
Mn.validateNotification = K_;
const vc = M, D_ = O;
function P_(t) {
  return t;
}
function U_(t) {
  return (0, vc.isObj)(t) && (0, vc.hasProp)(t, "$type") && t.$type === "app.bsky.notification.listNotifications#notification";
}
function K_(t) {
  return D_.lexicons.validate("app.bsky.notification.listNotifications#notification", t);
}
var $l = {};
Object.defineProperty($l, "__esModule", { value: !0 });
$l.toKnownErr = j_;
function j_(t) {
  return t;
}
var ql = {};
Object.defineProperty(ql, "__esModule", { value: !0 });
ql.toKnownErr = V_;
function V_(t) {
  return t;
}
var Gl = {};
Object.defineProperty(Gl, "__esModule", { value: !0 });
Gl.toKnownErr = O_;
function O_(t) {
  return t;
}
var at = {};
Object.defineProperty(at, "__esModule", { value: !0 });
at.isMain = I_;
at.validateMain = N_;
at.isMention = M_;
at.validateMention = $_;
at.isLink = q_;
at.validateLink = G_;
at.isTag = z_;
at.validateTag = F_;
at.isByteSlice = X_;
at.validateByteSlice = Z_;
const kt = M, $n = O;
function I_(t) {
  return (0, kt.isObj)(t) && (0, kt.hasProp)(t, "$type") && (t.$type === "app.bsky.richtext.facet#main" || t.$type === "app.bsky.richtext.facet");
}
function N_(t) {
  return $n.lexicons.validate("app.bsky.richtext.facet#main", t);
}
function M_(t) {
  return (0, kt.isObj)(t) && (0, kt.hasProp)(t, "$type") && t.$type === "app.bsky.richtext.facet#mention";
}
function $_(t) {
  return $n.lexicons.validate("app.bsky.richtext.facet#mention", t);
}
function q_(t) {
  return (0, kt.isObj)(t) && (0, kt.hasProp)(t, "$type") && t.$type === "app.bsky.richtext.facet#link";
}
function G_(t) {
  return $n.lexicons.validate("app.bsky.richtext.facet#link", t);
}
function z_(t) {
  return (0, kt.isObj)(t) && (0, kt.hasProp)(t, "$type") && t.$type === "app.bsky.richtext.facet#tag";
}
function F_(t) {
  return $n.lexicons.validate("app.bsky.richtext.facet#tag", t);
}
function X_(t) {
  return (0, kt.isObj)(t) && (0, kt.hasProp)(t, "$type") && t.$type === "app.bsky.richtext.facet#byteSlice";
}
function Z_(t) {
  return $n.lexicons.validate("app.bsky.richtext.facet#byteSlice", t);
}
var Kr = {};
Object.defineProperty(Kr, "__esModule", { value: !0 });
Kr.isSkeletonSearchPost = H_;
Kr.validateSkeletonSearchPost = W_;
Kr.isSkeletonSearchActor = J_;
Kr.validateSkeletonSearchActor = Q_;
Kr.isSkeletonSearchStarterPack = Y_;
Kr.validateSkeletonSearchStarterPack = eC;
const bi = M, zl = O;
function H_(t) {
  return (0, bi.isObj)(t) && (0, bi.hasProp)(t, "$type") && t.$type === "app.bsky.unspecced.defs#skeletonSearchPost";
}
function W_(t) {
  return zl.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchPost", t);
}
function J_(t) {
  return (0, bi.isObj)(t) && (0, bi.hasProp)(t, "$type") && t.$type === "app.bsky.unspecced.defs#skeletonSearchActor";
}
function Q_(t) {
  return zl.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchActor", t);
}
function Y_(t) {
  return (0, bi.isObj)(t) && (0, bi.hasProp)(t, "$type") && t.$type === "app.bsky.unspecced.defs#skeletonSearchStarterPack";
}
function eC(t) {
  return zl.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchStarterPack", t);
}
var Fl = {};
Object.defineProperty(Fl, "__esModule", { value: !0 });
Fl.toKnownErr = tC;
function tC(t) {
  return t;
}
var Xl = {};
Object.defineProperty(Xl, "__esModule", { value: !0 });
Xl.toKnownErr = rC;
function rC(t) {
  return t;
}
var Zl = {};
Object.defineProperty(Zl, "__esModule", { value: !0 });
Zl.toKnownErr = iC;
function iC(t) {
  return t;
}
var qn = {};
Object.defineProperty(qn, "__esModule", { value: !0 });
qn.toKnownErr = sC;
qn.isSuggestion = aC;
qn.validateSuggestion = oC;
const Tc = M, nC = O;
function sC(t) {
  return t;
}
function aC(t) {
  return (0, Tc.isObj)(t) && (0, Tc.hasProp)(t, "$type") && t.$type === "app.bsky.unspecced.getTaggedSuggestions#suggestion";
}
function oC(t) {
  return nC.lexicons.validate("app.bsky.unspecced.getTaggedSuggestions#suggestion", t);
}
var ta = {};
Object.defineProperty(ta, "__esModule", { value: !0 });
ta.isJobStatus = uC;
ta.validateJobStatus = cC;
const _c = M, lC = O;
function uC(t) {
  return (0, _c.isObj)(t) && (0, _c.hasProp)(t, "$type") && t.$type === "app.bsky.video.defs#jobStatus";
}
function cC(t) {
  return lC.lexicons.validate("app.bsky.video.defs#jobStatus", t);
}
var Hl = {};
Object.defineProperty(Hl, "__esModule", { value: !0 });
Hl.toKnownErr = pC;
function pC(t) {
  return t;
}
var Wl = {};
Object.defineProperty(Wl, "__esModule", { value: !0 });
Wl.toKnownErr = dC;
function dC(t) {
  return t;
}
var Jl = {};
Object.defineProperty(Jl, "__esModule", { value: !0 });
Jl.toKnownErr = fC;
function fC(t) {
  return t;
}
var ra = {};
Object.defineProperty(ra, "__esModule", { value: !0 });
ra.isRecord = mC;
ra.validateRecord = bC;
const Cc = M, yC = O;
function mC(t) {
  return (0, Cc.isObj)(t) && (0, Cc.hasProp)(t, "$type") && (t.$type === "chat.bsky.actor.declaration#main" || t.$type === "chat.bsky.actor.declaration");
}
function bC(t) {
  return yC.lexicons.validate("chat.bsky.actor.declaration#main", t);
}
var ia = {};
Object.defineProperty(ia, "__esModule", { value: !0 });
ia.isProfileViewBasic = EC;
ia.validateProfileViewBasic = gC;
const wc = M, hC = O;
function EC(t) {
  return (0, wc.isObj)(t) && (0, wc.hasProp)(t, "$type") && t.$type === "chat.bsky.actor.defs#profileViewBasic";
}
function gC(t) {
  return hC.lexicons.validate("chat.bsky.actor.defs#profileViewBasic", t);
}
var Ql = {};
Object.defineProperty(Ql, "__esModule", { value: !0 });
Ql.toKnownErr = xC;
function xC(t) {
  return t;
}
var Yl = {};
Object.defineProperty(Yl, "__esModule", { value: !0 });
Yl.toKnownErr = RC;
function RC(t) {
  return t;
}
var me = {};
Object.defineProperty(me, "__esModule", { value: !0 });
me.isMessageRef = AC;
me.validateMessageRef = vC;
me.isMessageInput = TC;
me.validateMessageInput = _C;
me.isMessageView = CC;
me.validateMessageView = wC;
me.isDeletedMessageView = SC;
me.validateDeletedMessageView = LC;
me.isMessageViewSender = kC;
me.validateMessageViewSender = BC;
me.isConvoView = DC;
me.validateConvoView = PC;
me.isLogBeginConvo = UC;
me.validateLogBeginConvo = KC;
me.isLogLeaveConvo = jC;
me.validateLogLeaveConvo = VC;
me.isLogCreateMessage = OC;
me.validateLogCreateMessage = IC;
me.isLogDeleteMessage = NC;
me.validateLogDeleteMessage = MC;
const be = M, Ot = O;
function AC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#messageRef";
}
function vC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#messageRef", t);
}
function TC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#messageInput";
}
function _C(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#messageInput", t);
}
function CC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#messageView";
}
function wC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#messageView", t);
}
function SC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#deletedMessageView";
}
function LC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#deletedMessageView", t);
}
function kC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#messageViewSender";
}
function BC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#messageViewSender", t);
}
function DC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#convoView";
}
function PC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#convoView", t);
}
function UC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#logBeginConvo";
}
function KC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#logBeginConvo", t);
}
function jC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#logLeaveConvo";
}
function VC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#logLeaveConvo", t);
}
function OC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#logCreateMessage";
}
function IC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#logCreateMessage", t);
}
function NC(t) {
  return (0, be.isObj)(t) && (0, be.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.defs#logDeleteMessage";
}
function MC(t) {
  return Ot.lexicons.validate("chat.bsky.convo.defs#logDeleteMessage", t);
}
var eu = {};
Object.defineProperty(eu, "__esModule", { value: !0 });
eu.toKnownErr = $C;
function $C(t) {
  return t;
}
var tu = {};
Object.defineProperty(tu, "__esModule", { value: !0 });
tu.toKnownErr = qC;
function qC(t) {
  return t;
}
var ru = {};
Object.defineProperty(ru, "__esModule", { value: !0 });
ru.toKnownErr = GC;
function GC(t) {
  return t;
}
var iu = {};
Object.defineProperty(iu, "__esModule", { value: !0 });
iu.toKnownErr = zC;
function zC(t) {
  return t;
}
var nu = {};
Object.defineProperty(nu, "__esModule", { value: !0 });
nu.toKnownErr = FC;
function FC(t) {
  return t;
}
var su = {};
Object.defineProperty(su, "__esModule", { value: !0 });
su.toKnownErr = XC;
function XC(t) {
  return t;
}
var au = {};
Object.defineProperty(au, "__esModule", { value: !0 });
au.toKnownErr = ZC;
function ZC(t) {
  return t;
}
var ou = {};
Object.defineProperty(ou, "__esModule", { value: !0 });
ou.toKnownErr = HC;
function HC(t) {
  return t;
}
var lu = {};
Object.defineProperty(lu, "__esModule", { value: !0 });
lu.toKnownErr = WC;
function WC(t) {
  return t;
}
var Gn = {};
Object.defineProperty(Gn, "__esModule", { value: !0 });
Gn.toKnownErr = QC;
Gn.isBatchItem = YC;
Gn.validateBatchItem = ew;
const Sc = M, JC = O;
function QC(t) {
  return t;
}
function YC(t) {
  return (0, Sc.isObj)(t) && (0, Sc.hasProp)(t, "$type") && t.$type === "chat.bsky.convo.sendMessageBatch#batchItem";
}
function ew(t) {
  return JC.lexicons.validate("chat.bsky.convo.sendMessageBatch#batchItem", t);
}
var uu = {};
Object.defineProperty(uu, "__esModule", { value: !0 });
uu.toKnownErr = tw;
function tw(t) {
  return t;
}
var cu = {};
Object.defineProperty(cu, "__esModule", { value: !0 });
cu.toKnownErr = rw;
function rw(t) {
  return t;
}
var zn = {};
Object.defineProperty(zn, "__esModule", { value: !0 });
zn.toKnownErr = nw;
zn.isMetadata = sw;
zn.validateMetadata = aw;
const Lc = M, iw = O;
function nw(t) {
  return t;
}
function sw(t) {
  return (0, Lc.isObj)(t) && (0, Lc.hasProp)(t, "$type") && t.$type === "chat.bsky.moderation.getActorMetadata#metadata";
}
function aw(t) {
  return iw.lexicons.validate("chat.bsky.moderation.getActorMetadata#metadata", t);
}
var pu = {};
Object.defineProperty(pu, "__esModule", { value: !0 });
pu.toKnownErr = ow;
function ow(t) {
  return t;
}
var du = {};
Object.defineProperty(du, "__esModule", { value: !0 });
du.toKnownErr = lw;
function lw(t) {
  return t;
}
var na = {};
Object.defineProperty(na, "__esModule", { value: !0 });
na.isTemplateView = cw;
na.validateTemplateView = pw;
const kc = M, uw = O;
function cw(t) {
  return (0, kc.isObj)(t) && (0, kc.hasProp)(t, "$type") && t.$type === "tools.ozone.communication.defs#templateView";
}
function pw(t) {
  return uw.lexicons.validate("tools.ozone.communication.defs#templateView", t);
}
var fu = {};
Object.defineProperty(fu, "__esModule", { value: !0 });
fu.toKnownErr = dw;
function dw(t) {
  return t;
}
var yu = {};
Object.defineProperty(yu, "__esModule", { value: !0 });
yu.toKnownErr = fw;
function fw(t) {
  return t;
}
var U = {};
Object.defineProperty(U, "__esModule", { value: !0 });
U.REVIEWNONE = U.REVIEWCLOSED = U.REVIEWESCALATED = U.REVIEWOPEN = void 0;
U.isModEventView = yw;
U.validateModEventView = mw;
U.isModEventViewDetail = bw;
U.validateModEventViewDetail = hw;
U.isSubjectStatusView = Ew;
U.validateSubjectStatusView = gw;
U.isModEventTakedown = xw;
U.validateModEventTakedown = Rw;
U.isModEventReverseTakedown = Aw;
U.validateModEventReverseTakedown = vw;
U.isModEventResolveAppeal = Tw;
U.validateModEventResolveAppeal = _w;
U.isModEventComment = Cw;
U.validateModEventComment = ww;
U.isModEventReport = Sw;
U.validateModEventReport = Lw;
U.isModEventLabel = kw;
U.validateModEventLabel = Bw;
U.isModEventAcknowledge = Dw;
U.validateModEventAcknowledge = Pw;
U.isModEventEscalate = Uw;
U.validateModEventEscalate = Kw;
U.isModEventMute = jw;
U.validateModEventMute = Vw;
U.isModEventUnmute = Ow;
U.validateModEventUnmute = Iw;
U.isModEventMuteReporter = Nw;
U.validateModEventMuteReporter = Mw;
U.isModEventUnmuteReporter = $w;
U.validateModEventUnmuteReporter = qw;
U.isModEventEmail = Gw;
U.validateModEventEmail = zw;
U.isModEventDivert = Fw;
U.validateModEventDivert = Xw;
U.isModEventTag = Zw;
U.validateModEventTag = Hw;
U.isAccountEvent = Ww;
U.validateAccountEvent = Jw;
U.isIdentityEvent = Qw;
U.validateIdentityEvent = Yw;
U.isRecordEvent = eS;
U.validateRecordEvent = tS;
U.isRepoView = rS;
U.validateRepoView = iS;
U.isRepoViewDetail = nS;
U.validateRepoViewDetail = sS;
U.isRepoViewNotFound = aS;
U.validateRepoViewNotFound = oS;
U.isRecordView = lS;
U.validateRecordView = uS;
U.isRecordViewDetail = cS;
U.validateRecordViewDetail = pS;
U.isRecordViewNotFound = dS;
U.validateRecordViewNotFound = fS;
U.isModeration = yS;
U.validateModeration = mS;
U.isModerationDetail = bS;
U.validateModerationDetail = hS;
U.isBlobView = ES;
U.validateBlobView = gS;
U.isImageDetails = xS;
U.validateImageDetails = RS;
U.isVideoDetails = AS;
U.validateVideoDetails = vS;
U.isAccountHosting = TS;
U.validateAccountHosting = _S;
U.isRecordHosting = CS;
U.validateRecordHosting = wS;
const V = M, te = O;
function yw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventView";
}
function mw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventView", t);
}
function bw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventViewDetail";
}
function hw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventViewDetail", t);
}
function Ew(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#subjectStatusView";
}
function gw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#subjectStatusView", t);
}
U.REVIEWOPEN = "tools.ozone.moderation.defs#reviewOpen";
U.REVIEWESCALATED = "tools.ozone.moderation.defs#reviewEscalated";
U.REVIEWCLOSED = "tools.ozone.moderation.defs#reviewClosed";
U.REVIEWNONE = "tools.ozone.moderation.defs#reviewNone";
function xw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventTakedown";
}
function Rw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventTakedown", t);
}
function Aw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventReverseTakedown";
}
function vw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventReverseTakedown", t);
}
function Tw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventResolveAppeal";
}
function _w(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventResolveAppeal", t);
}
function Cw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventComment";
}
function ww(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventComment", t);
}
function Sw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventReport";
}
function Lw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventReport", t);
}
function kw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventLabel";
}
function Bw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventLabel", t);
}
function Dw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventAcknowledge";
}
function Pw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventAcknowledge", t);
}
function Uw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventEscalate";
}
function Kw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventEscalate", t);
}
function jw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventMute";
}
function Vw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventMute", t);
}
function Ow(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventUnmute";
}
function Iw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventUnmute", t);
}
function Nw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventMuteReporter";
}
function Mw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventMuteReporter", t);
}
function $w(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventUnmuteReporter";
}
function qw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventUnmuteReporter", t);
}
function Gw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventEmail";
}
function zw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventEmail", t);
}
function Fw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventDivert";
}
function Xw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventDivert", t);
}
function Zw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#modEventTag";
}
function Hw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#modEventTag", t);
}
function Ww(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#accountEvent";
}
function Jw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#accountEvent", t);
}
function Qw(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#identityEvent";
}
function Yw(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#identityEvent", t);
}
function eS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#recordEvent";
}
function tS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#recordEvent", t);
}
function rS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#repoView";
}
function iS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#repoView", t);
}
function nS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#repoViewDetail";
}
function sS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#repoViewDetail", t);
}
function aS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#repoViewNotFound";
}
function oS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#repoViewNotFound", t);
}
function lS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#recordView";
}
function uS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#recordView", t);
}
function cS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#recordViewDetail";
}
function pS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#recordViewDetail", t);
}
function dS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#recordViewNotFound";
}
function fS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#recordViewNotFound", t);
}
function yS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#moderation";
}
function mS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#moderation", t);
}
function bS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#moderationDetail";
}
function hS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#moderationDetail", t);
}
function ES(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#blobView";
}
function gS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#blobView", t);
}
function xS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#imageDetails";
}
function RS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#imageDetails", t);
}
function AS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#videoDetails";
}
function vS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#videoDetails", t);
}
function TS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#accountHosting";
}
function _S(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#accountHosting", t);
}
function CS(t) {
  return (0, V.isObj)(t) && (0, V.hasProp)(t, "$type") && t.$type === "tools.ozone.moderation.defs#recordHosting";
}
function wS(t) {
  return te.lexicons.validate("tools.ozone.moderation.defs#recordHosting", t);
}
var mu = {};
Object.defineProperty(mu, "__esModule", { value: !0 });
mu.toKnownErr = SS;
function SS(t) {
  return t;
}
var bu = {};
Object.defineProperty(bu, "__esModule", { value: !0 });
bu.toKnownErr = LS;
function LS(t) {
  return t;
}
var hu = {};
Object.defineProperty(hu, "__esModule", { value: !0 });
hu.toKnownErr = kS;
function kS(t) {
  return t;
}
var Eu = {};
Object.defineProperty(Eu, "__esModule", { value: !0 });
Eu.toKnownErr = BS;
function BS(t) {
  return t;
}
var gu = {};
Object.defineProperty(gu, "__esModule", { value: !0 });
gu.toKnownErr = DS;
function DS(t) {
  return t;
}
var xu = {};
Object.defineProperty(xu, "__esModule", { value: !0 });
xu.toKnownErr = PS;
function PS(t) {
  return t;
}
var ri = {};
Object.defineProperty(ri, "__esModule", { value: !0 });
ri.toKnownErr = US;
ri.isServiceConfig = KS;
ri.validateServiceConfig = jS;
ri.isViewerConfig = VS;
ri.validateViewerConfig = OS;
const ws = M, oy = O;
function US(t) {
  return t;
}
function KS(t) {
  return (0, ws.isObj)(t) && (0, ws.hasProp)(t, "$type") && t.$type === "tools.ozone.server.getConfig#serviceConfig";
}
function jS(t) {
  return oy.lexicons.validate("tools.ozone.server.getConfig#serviceConfig", t);
}
function VS(t) {
  return (0, ws.isObj)(t) && (0, ws.hasProp)(t, "$type") && t.$type === "tools.ozone.server.getConfig#viewerConfig";
}
function OS(t) {
  return oy.lexicons.validate("tools.ozone.server.getConfig#viewerConfig", t);
}
var Ru = {};
Object.defineProperty(Ru, "__esModule", { value: !0 });
Ru.toKnownErr = IS;
function IS(t) {
  return t;
}
var sn = {};
Object.defineProperty(sn, "__esModule", { value: !0 });
sn.isSet = NS;
sn.validateSet = MS;
sn.isSetView = $S;
sn.validateSetView = qS;
const Ss = M, ly = O;
function NS(t) {
  return (0, Ss.isObj)(t) && (0, Ss.hasProp)(t, "$type") && t.$type === "tools.ozone.set.defs#set";
}
function MS(t) {
  return ly.lexicons.validate("tools.ozone.set.defs#set", t);
}
function $S(t) {
  return (0, Ss.isObj)(t) && (0, Ss.hasProp)(t, "$type") && t.$type === "tools.ozone.set.defs#setView";
}
function qS(t) {
  return ly.lexicons.validate("tools.ozone.set.defs#setView", t);
}
var Au = {};
Object.defineProperty(Au, "__esModule", { value: !0 });
Au.toKnownErr = GS;
function GS(t) {
  return t;
}
var vu = {};
Object.defineProperty(vu, "__esModule", { value: !0 });
vu.toKnownErr = zS;
function zS(t) {
  return t;
}
var sa = {};
Object.defineProperty(sa, "__esModule", { value: !0 });
sa.isOption = XS;
sa.validateOption = ZS;
const Bc = M, FS = O;
function XS(t) {
  return (0, Bc.isObj)(t) && (0, Bc.hasProp)(t, "$type") && t.$type === "tools.ozone.setting.defs#option";
}
function ZS(t) {
  return FS.lexicons.validate("tools.ozone.setting.defs#option", t);
}
var Tu = {};
Object.defineProperty(Tu, "__esModule", { value: !0 });
Tu.toKnownErr = HS;
function HS(t) {
  return t;
}
var _u = {};
Object.defineProperty(_u, "__esModule", { value: !0 });
_u.toKnownErr = WS;
function WS(t) {
  return t;
}
var Cu = {};
Object.defineProperty(Cu, "__esModule", { value: !0 });
Cu.toKnownErr = JS;
function JS(t) {
  return t;
}
var aa = {};
Object.defineProperty(aa, "__esModule", { value: !0 });
aa.isSigDetail = YS;
aa.validateSigDetail = eL;
const Dc = M, QS = O;
function YS(t) {
  return (0, Dc.isObj)(t) && (0, Dc.hasProp)(t, "$type") && t.$type === "tools.ozone.signature.defs#sigDetail";
}
function eL(t) {
  return QS.lexicons.validate("tools.ozone.signature.defs#sigDetail", t);
}
var wu = {};
Object.defineProperty(wu, "__esModule", { value: !0 });
wu.toKnownErr = tL;
function tL(t) {
  return t;
}
var Fn = {};
Object.defineProperty(Fn, "__esModule", { value: !0 });
Fn.toKnownErr = iL;
Fn.isRelatedAccount = nL;
Fn.validateRelatedAccount = sL;
const Pc = M, rL = O;
function iL(t) {
  return t;
}
function nL(t) {
  return (0, Pc.isObj)(t) && (0, Pc.hasProp)(t, "$type") && t.$type === "tools.ozone.signature.findRelatedAccounts#relatedAccount";
}
function sL(t) {
  return rL.lexicons.validate("tools.ozone.signature.findRelatedAccounts#relatedAccount", t);
}
var Su = {};
Object.defineProperty(Su, "__esModule", { value: !0 });
Su.toKnownErr = aL;
function aL(t) {
  return t;
}
var wt = {};
Object.defineProperty(wt, "__esModule", { value: !0 });
wt.ROLETRIAGE = wt.ROLEMODERATOR = wt.ROLEADMIN = void 0;
wt.isMember = lL;
wt.validateMember = uL;
const Uc = M, oL = O;
function lL(t) {
  return (0, Uc.isObj)(t) && (0, Uc.hasProp)(t, "$type") && t.$type === "tools.ozone.team.defs#member";
}
function uL(t) {
  return oL.lexicons.validate("tools.ozone.team.defs#member", t);
}
wt.ROLEADMIN = "tools.ozone.team.defs#roleAdmin";
wt.ROLEMODERATOR = "tools.ozone.team.defs#roleModerator";
wt.ROLETRIAGE = "tools.ozone.team.defs#roleTriage";
var Lu = {};
Object.defineProperty(Lu, "__esModule", { value: !0 });
Lu.toKnownErr = cL;
function cL(t) {
  return t;
}
var pL = L && L.__createBinding || (Object.create ? function(t, e, r, n) {
  n === void 0 && (n = r);
  var s = Object.getOwnPropertyDescriptor(e, r);
  (!s || ("get" in s ? !e.__esModule : s.writable || s.configurable)) && (s = { enumerable: !0, get: function() {
    return e[r];
  } }), Object.defineProperty(t, n, s);
} : function(t, e, r, n) {
  n === void 0 && (n = r), t[n] = e[r];
}), dL = L && L.__setModuleDefault || (Object.create ? function(t, e) {
  Object.defineProperty(t, "default", { enumerable: !0, value: e });
} : function(t, e) {
  t.default = e;
}), b = L && L.__importStar || function(t) {
  if (t && t.__esModule) return t;
  var e = {};
  if (t != null) for (var r in t) r !== "default" && Object.prototype.hasOwnProperty.call(t, r) && pL(e, t, r);
  return dL(e, t), e;
};
Object.defineProperty(o, "__esModule", { value: !0 });
o.ComAtprotoServerDeleteSession = o.ComAtprotoServerDeleteAccount = o.ComAtprotoServerDefs = o.ComAtprotoServerDeactivateAccount = o.ComAtprotoServerCreateSession = o.ComAtprotoServerCreateInviteCodes = o.ComAtprotoServerCreateInviteCode = o.ComAtprotoServerCreateAppPassword = o.ComAtprotoServerCreateAccount = o.ComAtprotoServerConfirmEmail = o.ComAtprotoServerCheckAccountStatus = o.ComAtprotoServerActivateAccount = o.ComAtprotoRepoUploadBlob = o.ComAtprotoRepoStrongRef = o.ComAtprotoRepoPutRecord = o.ComAtprotoRepoListRecords = o.ComAtprotoRepoListMissingBlobs = o.ComAtprotoRepoImportRepo = o.ComAtprotoRepoGetRecord = o.ComAtprotoRepoDescribeRepo = o.ComAtprotoRepoDeleteRecord = o.ComAtprotoRepoDefs = o.ComAtprotoRepoCreateRecord = o.ComAtprotoRepoApplyWrites = o.ComAtprotoModerationDefs = o.ComAtprotoModerationCreateReport = o.ComAtprotoLabelSubscribeLabels = o.ComAtprotoLabelQueryLabels = o.ComAtprotoLabelDefs = o.ComAtprotoIdentityUpdateHandle = o.ComAtprotoIdentitySubmitPlcOperation = o.ComAtprotoIdentitySignPlcOperation = o.ComAtprotoIdentityResolveHandle = o.ComAtprotoIdentityRequestPlcOperationSignature = o.ComAtprotoIdentityGetRecommendedDidCredentials = o.ComAtprotoAdminUpdateSubjectStatus = o.ComAtprotoAdminUpdateAccountPassword = o.ComAtprotoAdminUpdateAccountHandle = o.ComAtprotoAdminUpdateAccountEmail = o.ComAtprotoAdminSendEmail = o.ComAtprotoAdminSearchAccounts = o.ComAtprotoAdminGetSubjectStatus = o.ComAtprotoAdminGetInviteCodes = o.ComAtprotoAdminGetAccountInfos = o.ComAtprotoAdminGetAccountInfo = o.ComAtprotoAdminEnableAccountInvites = o.ComAtprotoAdminDisableInviteCodes = o.ComAtprotoAdminDisableAccountInvites = o.ComAtprotoAdminDeleteAccount = o.ComAtprotoAdminDefs = void 0;
o.AppBskyFeedGetActorFeeds = o.AppBskyFeedGenerator = o.AppBskyFeedDescribeFeedGenerator = o.AppBskyFeedDefs = o.AppBskyEmbedVideo = o.AppBskyEmbedRecordWithMedia = o.AppBskyEmbedRecord = o.AppBskyEmbedImages = o.AppBskyEmbedExternal = o.AppBskyEmbedDefs = o.AppBskyActorSearchActorsTypeahead = o.AppBskyActorSearchActors = o.AppBskyActorPutPreferences = o.AppBskyActorProfile = o.AppBskyActorGetSuggestions = o.AppBskyActorGetProfiles = o.AppBskyActorGetProfile = o.AppBskyActorGetPreferences = o.AppBskyActorDefs = o.ComAtprotoTempRequestPhoneVerification = o.ComAtprotoTempFetchLabels = o.ComAtprotoTempCheckSignupQueue = o.ComAtprotoTempAddReservedHandle = o.ComAtprotoSyncSubscribeRepos = o.ComAtprotoSyncRequestCrawl = o.ComAtprotoSyncNotifyOfUpdate = o.ComAtprotoSyncListRepos = o.ComAtprotoSyncListBlobs = o.ComAtprotoSyncGetRepoStatus = o.ComAtprotoSyncGetRepo = o.ComAtprotoSyncGetRecord = o.ComAtprotoSyncGetLatestCommit = o.ComAtprotoSyncGetHead = o.ComAtprotoSyncGetCheckout = o.ComAtprotoSyncGetBlocks = o.ComAtprotoSyncGetBlob = o.ComAtprotoServerUpdateEmail = o.ComAtprotoServerRevokeAppPassword = o.ComAtprotoServerResetPassword = o.ComAtprotoServerReserveSigningKey = o.ComAtprotoServerRequestPasswordReset = o.ComAtprotoServerRequestEmailUpdate = o.ComAtprotoServerRequestEmailConfirmation = o.ComAtprotoServerRequestAccountDelete = o.ComAtprotoServerRefreshSession = o.ComAtprotoServerListAppPasswords = o.ComAtprotoServerGetSession = o.ComAtprotoServerGetServiceAuth = o.ComAtprotoServerGetAccountInviteCodes = o.ComAtprotoServerDescribeServer = void 0;
o.AppBskyLabelerDefs = o.AppBskyGraphUnmuteThread = o.AppBskyGraphUnmuteActorList = o.AppBskyGraphUnmuteActor = o.AppBskyGraphStarterpack = o.AppBskyGraphSearchStarterPacks = o.AppBskyGraphMuteThread = o.AppBskyGraphMuteActorList = o.AppBskyGraphMuteActor = o.AppBskyGraphListitem = o.AppBskyGraphListblock = o.AppBskyGraphList = o.AppBskyGraphGetSuggestedFollowsByActor = o.AppBskyGraphGetStarterPacks = o.AppBskyGraphGetStarterPack = o.AppBskyGraphGetRelationships = o.AppBskyGraphGetMutes = o.AppBskyGraphGetLists = o.AppBskyGraphGetListMutes = o.AppBskyGraphGetListBlocks = o.AppBskyGraphGetList = o.AppBskyGraphGetKnownFollowers = o.AppBskyGraphGetFollows = o.AppBskyGraphGetFollowers = o.AppBskyGraphGetBlocks = o.AppBskyGraphGetActorStarterPacks = o.AppBskyGraphFollow = o.AppBskyGraphDefs = o.AppBskyGraphBlock = o.AppBskyFeedThreadgate = o.AppBskyFeedSendInteractions = o.AppBskyFeedSearchPosts = o.AppBskyFeedRepost = o.AppBskyFeedPostgate = o.AppBskyFeedPost = o.AppBskyFeedLike = o.AppBskyFeedGetTimeline = o.AppBskyFeedGetSuggestedFeeds = o.AppBskyFeedGetRepostedBy = o.AppBskyFeedGetQuotes = o.AppBskyFeedGetPosts = o.AppBskyFeedGetPostThread = o.AppBskyFeedGetListFeed = o.AppBskyFeedGetLikes = o.AppBskyFeedGetFeedSkeleton = o.AppBskyFeedGetFeedGenerators = o.AppBskyFeedGetFeedGenerator = o.AppBskyFeedGetFeed = o.AppBskyFeedGetAuthorFeed = o.AppBskyFeedGetActorLikes = void 0;
o.ToolsOzoneModerationGetRecords = o.ToolsOzoneModerationGetRecord = o.ToolsOzoneModerationGetEvent = o.ToolsOzoneModerationEmitEvent = o.ToolsOzoneModerationDefs = o.ToolsOzoneCommunicationUpdateTemplate = o.ToolsOzoneCommunicationListTemplates = o.ToolsOzoneCommunicationDeleteTemplate = o.ToolsOzoneCommunicationDefs = o.ToolsOzoneCommunicationCreateTemplate = o.ChatBskyModerationUpdateActorAccess = o.ChatBskyModerationGetMessageContext = o.ChatBskyModerationGetActorMetadata = o.ChatBskyConvoUpdateRead = o.ChatBskyConvoUnmuteConvo = o.ChatBskyConvoSendMessageBatch = o.ChatBskyConvoSendMessage = o.ChatBskyConvoMuteConvo = o.ChatBskyConvoListConvos = o.ChatBskyConvoLeaveConvo = o.ChatBskyConvoGetMessages = o.ChatBskyConvoGetLog = o.ChatBskyConvoGetConvoForMembers = o.ChatBskyConvoGetConvo = o.ChatBskyConvoDeleteMessageForSelf = o.ChatBskyConvoDefs = o.ChatBskyActorExportAccountData = o.ChatBskyActorDeleteAccount = o.ChatBskyActorDefs = o.ChatBskyActorDeclaration = o.AppBskyVideoUploadVideo = o.AppBskyVideoGetUploadLimits = o.AppBskyVideoGetJobStatus = o.AppBskyVideoDefs = o.AppBskyUnspeccedSearchStarterPacksSkeleton = o.AppBskyUnspeccedSearchPostsSkeleton = o.AppBskyUnspeccedSearchActorsSkeleton = o.AppBskyUnspeccedGetTaggedSuggestions = o.AppBskyUnspeccedGetSuggestionsSkeleton = o.AppBskyUnspeccedGetPopularFeedGenerators = o.AppBskyUnspeccedGetConfig = o.AppBskyUnspeccedDefs = o.AppBskyRichtextFacet = o.AppBskyNotificationUpdateSeen = o.AppBskyNotificationRegisterPush = o.AppBskyNotificationPutPreferences = o.AppBskyNotificationListNotifications = o.AppBskyNotificationGetUnreadCount = o.AppBskyLabelerService = o.AppBskyLabelerGetServices = void 0;
o.LikeRecord = o.GeneratorRecord = o.AppBskyFeedNS = o.AppBskyEmbedNS = o.ProfileRecord = o.AppBskyActorNS = o.AppBskyNS = o.AppNS = o.ComAtprotoTempNS = o.ComAtprotoSyncNS = o.ComAtprotoServerNS = o.ComAtprotoRepoNS = o.ComAtprotoModerationNS = o.ComAtprotoLabelNS = o.ComAtprotoIdentityNS = o.ComAtprotoAdminNS = o.ComAtprotoNS = o.ComNS = o.AtpBaseClient = o.TOOLS_OZONE_TEAM = o.TOOLS_OZONE_MODERATION = o.APP_BSKY_GRAPH = o.APP_BSKY_FEED = o.COM_ATPROTO_MODERATION = o.ToolsOzoneTeamUpdateMember = o.ToolsOzoneTeamListMembers = o.ToolsOzoneTeamDeleteMember = o.ToolsOzoneTeamDefs = o.ToolsOzoneTeamAddMember = o.ToolsOzoneSignatureSearchAccounts = o.ToolsOzoneSignatureFindRelatedAccounts = o.ToolsOzoneSignatureFindCorrelation = o.ToolsOzoneSignatureDefs = o.ToolsOzoneSettingUpsertOption = o.ToolsOzoneSettingRemoveOptions = o.ToolsOzoneSettingListOptions = o.ToolsOzoneSettingDefs = o.ToolsOzoneSetUpsertSet = o.ToolsOzoneSetQuerySets = o.ToolsOzoneSetGetValues = o.ToolsOzoneSetDeleteValues = o.ToolsOzoneSetDeleteSet = o.ToolsOzoneSetDefs = o.ToolsOzoneSetAddValues = o.ToolsOzoneServerGetConfig = o.ToolsOzoneModerationSearchRepos = o.ToolsOzoneModerationQueryStatuses = o.ToolsOzoneModerationQueryEvents = o.ToolsOzoneModerationGetRepos = o.ToolsOzoneModerationGetRepo = void 0;
o.ToolsOzoneTeamNS = o.ToolsOzoneSignatureNS = o.ToolsOzoneSettingNS = o.ToolsOzoneSetNS = o.ToolsOzoneServerNS = o.ToolsOzoneModerationNS = o.ToolsOzoneCommunicationNS = o.ToolsOzoneNS = o.ToolsNS = o.ChatBskyModerationNS = o.ChatBskyConvoNS = o.DeclarationRecord = o.ChatBskyActorNS = o.ChatBskyNS = o.ChatNS = o.AppBskyVideoNS = o.AppBskyUnspeccedNS = o.AppBskyRichtextNS = o.AppBskyNotificationNS = o.ServiceRecord = o.AppBskyLabelerNS = o.StarterpackRecord = o.ListitemRecord = o.ListblockRecord = o.ListRecord = o.FollowRecord = o.BlockRecord = o.AppBskyGraphNS = o.ThreadgateRecord = o.RepostRecord = o.PostgateRecord = o.PostRecord = void 0;
const fL = z, yL = O, mL = b(Ee), bL = b(Ri), hL = b(Ai), EL = b(vi), gL = b(Ti), xL = b(Qe), RL = b(he), AL = b(kr), vL = b(yr), TL = b(mr), _L = b(_i), CL = b(Ci), wL = b(Br), SL = b(wi), LL = b(br), kL = b(Ct), BL = b(Ne), DL = b(Me), PL = b(ki), UL = b(Ye), KL = b($e), jL = b(et), VL = b(Di), OL = b(tt), IL = b(hr), NL = b(Er), ML = b(Pi), $L = b(Ui), qL = b(Ki), GL = b(ji), zL = b(Vi), FL = b(Oi), XL = b(Ii), ZL = b(Ni), HL = b(Mi), WL = b($i), JL = b(qi), QL = b(Gi), YL = b(zi), ek = b(Fi), tk = b(Xi), rk = b(Zi), ik = b(Hi), nk = b(Wi), sk = b(gr), ak = b(Ji);
o.ComAtprotoAdminDefs = b(nt);
o.ComAtprotoAdminDeleteAccount = b(fo);
o.ComAtprotoAdminDisableAccountInvites = b(yo);
o.ComAtprotoAdminDisableInviteCodes = b(mo);
o.ComAtprotoAdminEnableAccountInvites = b(bo);
o.ComAtprotoAdminGetAccountInfo = b(ho);
o.ComAtprotoAdminGetAccountInfos = b(Eo);
o.ComAtprotoAdminGetInviteCodes = b(go);
o.ComAtprotoAdminGetSubjectStatus = b(xo);
o.ComAtprotoAdminSearchAccounts = b(Ro);
o.ComAtprotoAdminSendEmail = b(Ao);
o.ComAtprotoAdminUpdateAccountEmail = b(vo);
o.ComAtprotoAdminUpdateAccountHandle = b(To);
o.ComAtprotoAdminUpdateAccountPassword = b(_o);
o.ComAtprotoAdminUpdateSubjectStatus = b(Co);
o.ComAtprotoIdentityGetRecommendedDidCredentials = b(wo);
o.ComAtprotoIdentityRequestPlcOperationSignature = b(So);
o.ComAtprotoIdentityResolveHandle = b(Lo);
o.ComAtprotoIdentitySignPlcOperation = b(ko);
o.ComAtprotoIdentitySubmitPlcOperation = b(Bo);
o.ComAtprotoIdentityUpdateHandle = b(Do);
o.ComAtprotoLabelDefs = b(st);
o.ComAtprotoLabelQueryLabels = b(Po);
o.ComAtprotoLabelSubscribeLabels = b(Qi);
o.ComAtprotoModerationCreateReport = b(Uo);
o.ComAtprotoModerationDefs = b(Be);
o.ComAtprotoRepoApplyWrites = b(Ee);
o.ComAtprotoRepoCreateRecord = b(Ri);
o.ComAtprotoRepoDefs = b(Vs);
o.ComAtprotoRepoDeleteRecord = b(Ai);
o.ComAtprotoRepoDescribeRepo = b(Ko);
o.ComAtprotoRepoGetRecord = b(vi);
o.ComAtprotoRepoImportRepo = b(jo);
o.ComAtprotoRepoListMissingBlobs = b(jn);
o.ComAtprotoRepoListRecords = b(Vn);
o.ComAtprotoRepoPutRecord = b(Ti);
o.ComAtprotoRepoStrongRef = b(Os);
o.ComAtprotoRepoUploadBlob = b(Vo);
o.ComAtprotoServerActivateAccount = b(Oo);
o.ComAtprotoServerCheckAccountStatus = b(Io);
o.ComAtprotoServerConfirmEmail = b(Qe);
o.ComAtprotoServerCreateAccount = b(he);
o.ComAtprotoServerCreateAppPassword = b(kr);
o.ComAtprotoServerCreateInviteCode = b(No);
o.ComAtprotoServerCreateInviteCodes = b(On);
o.ComAtprotoServerCreateSession = b(yr);
o.ComAtprotoServerDeactivateAccount = b(Mo);
o.ComAtprotoServerDefs = b(Yi);
o.ComAtprotoServerDeleteAccount = b(mr);
o.ComAtprotoServerDeleteSession = b($o);
o.ComAtprotoServerDescribeServer = b(ei);
o.ComAtprotoServerGetAccountInviteCodes = b(_i);
o.ComAtprotoServerGetServiceAuth = b(Ci);
o.ComAtprotoServerGetSession = b(qo);
o.ComAtprotoServerListAppPasswords = b(Br);
o.ComAtprotoServerRefreshSession = b(wi);
o.ComAtprotoServerRequestAccountDelete = b(Go);
o.ComAtprotoServerRequestEmailConfirmation = b(zo);
o.ComAtprotoServerRequestEmailUpdate = b(Fo);
o.ComAtprotoServerRequestPasswordReset = b(Xo);
o.ComAtprotoServerReserveSigningKey = b(Zo);
o.ComAtprotoServerResetPassword = b(br);
o.ComAtprotoServerRevokeAppPassword = b(Ho);
o.ComAtprotoServerUpdateEmail = b(Ct);
o.ComAtprotoSyncGetBlob = b(Ne);
o.ComAtprotoSyncGetBlocks = b(Me);
o.ComAtprotoSyncGetCheckout = b(Wo);
o.ComAtprotoSyncGetHead = b(ki);
o.ComAtprotoSyncGetLatestCommit = b(Ye);
o.ComAtprotoSyncGetRecord = b($e);
o.ComAtprotoSyncGetRepo = b(et);
o.ComAtprotoSyncGetRepoStatus = b(Di);
o.ComAtprotoSyncListBlobs = b(tt);
o.ComAtprotoSyncListRepos = b(In);
o.ComAtprotoSyncNotifyOfUpdate = b(Jo);
o.ComAtprotoSyncRequestCrawl = b(Qo);
o.ComAtprotoSyncSubscribeRepos = b(ge);
o.ComAtprotoTempAddReservedHandle = b(Yo);
o.ComAtprotoTempCheckSignupQueue = b(el);
o.ComAtprotoTempFetchLabels = b(tl);
o.ComAtprotoTempRequestPhoneVerification = b(rl);
o.AppBskyActorDefs = b(F);
o.AppBskyActorGetPreferences = b(il);
o.AppBskyActorGetProfile = b(nl);
o.AppBskyActorGetProfiles = b(sl);
o.AppBskyActorGetSuggestions = b(al);
o.AppBskyActorProfile = b(Is);
o.AppBskyActorPutPreferences = b(ol);
o.AppBskyActorSearchActors = b(ll);
o.AppBskyActorSearchActorsTypeahead = b(ul);
o.AppBskyEmbedDefs = b(Ns);
o.AppBskyEmbedExternal = b(Pt);
o.AppBskyEmbedImages = b(Ut);
o.AppBskyEmbedRecord = b(qe);
o.AppBskyEmbedRecordWithMedia = b(tn);
o.AppBskyEmbedVideo = b(Pr);
o.AppBskyFeedDefs = b(q);
o.AppBskyFeedDescribeFeedGenerator = b(ti);
o.AppBskyFeedGenerator = b(qs);
o.AppBskyFeedGetActorFeeds = b(pl);
o.AppBskyFeedGetActorLikes = b(hr);
o.AppBskyFeedGetAuthorFeed = b(Er);
o.AppBskyFeedGetFeed = b(Pi);
o.AppBskyFeedGetFeedGenerator = b(dl);
o.AppBskyFeedGetFeedGenerators = b(fl);
o.AppBskyFeedGetFeedSkeleton = b(Ui);
o.AppBskyFeedGetLikes = b(Nn);
o.AppBskyFeedGetListFeed = b(Ki);
o.AppBskyFeedGetPostThread = b(ji);
o.AppBskyFeedGetPosts = b(yl);
o.AppBskyFeedGetQuotes = b(ml);
o.AppBskyFeedGetRepostedBy = b(bl);
o.AppBskyFeedGetSuggestedFeeds = b(hl);
o.AppBskyFeedGetTimeline = b(El);
o.AppBskyFeedLike = b(Gs);
o.AppBskyFeedPost = b(Kt);
o.AppBskyFeedPostgate = b(rn);
o.AppBskyFeedRepost = b(Fs);
o.AppBskyFeedSearchPosts = b(Vi);
o.AppBskyFeedSendInteractions = b(gl);
o.AppBskyFeedThreadgate = b(jt);
o.AppBskyGraphBlock = b(Zs);
o.AppBskyGraphDefs = b(pe);
o.AppBskyGraphFollow = b(Hs);
o.AppBskyGraphGetActorStarterPacks = b(xl);
o.AppBskyGraphGetBlocks = b(Rl);
o.AppBskyGraphGetFollowers = b(Al);
o.AppBskyGraphGetFollows = b(vl);
o.AppBskyGraphGetKnownFollowers = b(Tl);
o.AppBskyGraphGetList = b(_l);
o.AppBskyGraphGetListBlocks = b(Cl);
o.AppBskyGraphGetListMutes = b(wl);
o.AppBskyGraphGetLists = b(Sl);
o.AppBskyGraphGetMutes = b(Ll);
o.AppBskyGraphGetRelationships = b(Oi);
o.AppBskyGraphGetStarterPack = b(kl);
o.AppBskyGraphGetStarterPacks = b(Bl);
o.AppBskyGraphGetSuggestedFollowsByActor = b(Dl);
o.AppBskyGraphList = b(Ws);
o.AppBskyGraphListblock = b(Js);
o.AppBskyGraphListitem = b(Qs);
o.AppBskyGraphMuteActor = b(Pl);
o.AppBskyGraphMuteActorList = b(Ul);
o.AppBskyGraphMuteThread = b(Kl);
o.AppBskyGraphSearchStarterPacks = b(jl);
o.AppBskyGraphStarterpack = b(nn);
o.AppBskyGraphUnmuteActor = b(Vl);
o.AppBskyGraphUnmuteActorList = b(Ol);
o.AppBskyGraphUnmuteThread = b(Il);
o.AppBskyLabelerDefs = b(Vt);
o.AppBskyLabelerGetServices = b(Nl);
o.AppBskyLabelerService = b(ea);
o.AppBskyNotificationGetUnreadCount = b(Ml);
o.AppBskyNotificationListNotifications = b(Mn);
o.AppBskyNotificationPutPreferences = b($l);
o.AppBskyNotificationRegisterPush = b(ql);
o.AppBskyNotificationUpdateSeen = b(Gl);
o.AppBskyRichtextFacet = b(at);
o.AppBskyUnspeccedDefs = b(Kr);
o.AppBskyUnspeccedGetConfig = b(Fl);
o.AppBskyUnspeccedGetPopularFeedGenerators = b(Xl);
o.AppBskyUnspeccedGetSuggestionsSkeleton = b(Zl);
o.AppBskyUnspeccedGetTaggedSuggestions = b(qn);
o.AppBskyUnspeccedSearchActorsSkeleton = b(Ii);
o.AppBskyUnspeccedSearchPostsSkeleton = b(Ni);
o.AppBskyUnspeccedSearchStarterPacksSkeleton = b(Mi);
o.AppBskyVideoDefs = b(ta);
o.AppBskyVideoGetJobStatus = b(Hl);
o.AppBskyVideoGetUploadLimits = b(Wl);
o.AppBskyVideoUploadVideo = b(Jl);
o.ChatBskyActorDeclaration = b(ra);
o.ChatBskyActorDefs = b(ia);
o.ChatBskyActorDeleteAccount = b(Ql);
o.ChatBskyActorExportAccountData = b(Yl);
o.ChatBskyConvoDefs = b(me);
o.ChatBskyConvoDeleteMessageForSelf = b(eu);
o.ChatBskyConvoGetConvo = b(tu);
o.ChatBskyConvoGetConvoForMembers = b(ru);
o.ChatBskyConvoGetLog = b(iu);
o.ChatBskyConvoGetMessages = b(nu);
o.ChatBskyConvoLeaveConvo = b(su);
o.ChatBskyConvoListConvos = b(au);
o.ChatBskyConvoMuteConvo = b(ou);
o.ChatBskyConvoSendMessage = b(lu);
o.ChatBskyConvoSendMessageBatch = b(Gn);
o.ChatBskyConvoUnmuteConvo = b(uu);
o.ChatBskyConvoUpdateRead = b(cu);
o.ChatBskyModerationGetActorMetadata = b(zn);
o.ChatBskyModerationGetMessageContext = b(pu);
o.ChatBskyModerationUpdateActorAccess = b(du);
o.ToolsOzoneCommunicationCreateTemplate = b($i);
o.ToolsOzoneCommunicationDefs = b(na);
o.ToolsOzoneCommunicationDeleteTemplate = b(fu);
o.ToolsOzoneCommunicationListTemplates = b(yu);
o.ToolsOzoneCommunicationUpdateTemplate = b(qi);
o.ToolsOzoneModerationDefs = b(U);
o.ToolsOzoneModerationEmitEvent = b(Gi);
o.ToolsOzoneModerationGetEvent = b(mu);
o.ToolsOzoneModerationGetRecord = b(zi);
o.ToolsOzoneModerationGetRecords = b(bu);
o.ToolsOzoneModerationGetRepo = b(Fi);
o.ToolsOzoneModerationGetRepos = b(hu);
o.ToolsOzoneModerationQueryEvents = b(Eu);
o.ToolsOzoneModerationQueryStatuses = b(gu);
o.ToolsOzoneModerationSearchRepos = b(xu);
o.ToolsOzoneServerGetConfig = b(ri);
o.ToolsOzoneSetAddValues = b(Ru);
o.ToolsOzoneSetDefs = b(sn);
o.ToolsOzoneSetDeleteSet = b(Xi);
o.ToolsOzoneSetDeleteValues = b(Zi);
o.ToolsOzoneSetGetValues = b(Hi);
o.ToolsOzoneSetQuerySets = b(Au);
o.ToolsOzoneSetUpsertSet = b(vu);
o.ToolsOzoneSettingDefs = b(sa);
o.ToolsOzoneSettingListOptions = b(Tu);
o.ToolsOzoneSettingRemoveOptions = b(_u);
o.ToolsOzoneSettingUpsertOption = b(Cu);
o.ToolsOzoneSignatureDefs = b(aa);
o.ToolsOzoneSignatureFindCorrelation = b(wu);
o.ToolsOzoneSignatureFindRelatedAccounts = b(Fn);
o.ToolsOzoneSignatureSearchAccounts = b(Su);
o.ToolsOzoneTeamAddMember = b(Wi);
o.ToolsOzoneTeamDefs = b(wt);
o.ToolsOzoneTeamDeleteMember = b(gr);
o.ToolsOzoneTeamListMembers = b(Lu);
o.ToolsOzoneTeamUpdateMember = b(Ji);
o.COM_ATPROTO_MODERATION = {
  DefsReasonSpam: "com.atproto.moderation.defs#reasonSpam",
  DefsReasonViolation: "com.atproto.moderation.defs#reasonViolation",
  DefsReasonMisleading: "com.atproto.moderation.defs#reasonMisleading",
  DefsReasonSexual: "com.atproto.moderation.defs#reasonSexual",
  DefsReasonRude: "com.atproto.moderation.defs#reasonRude",
  DefsReasonOther: "com.atproto.moderation.defs#reasonOther",
  DefsReasonAppeal: "com.atproto.moderation.defs#reasonAppeal"
};
o.APP_BSKY_FEED = {
  DefsRequestLess: "app.bsky.feed.defs#requestLess",
  DefsRequestMore: "app.bsky.feed.defs#requestMore",
  DefsClickthroughItem: "app.bsky.feed.defs#clickthroughItem",
  DefsClickthroughAuthor: "app.bsky.feed.defs#clickthroughAuthor",
  DefsClickthroughReposter: "app.bsky.feed.defs#clickthroughReposter",
  DefsClickthroughEmbed: "app.bsky.feed.defs#clickthroughEmbed",
  DefsInteractionSeen: "app.bsky.feed.defs#interactionSeen",
  DefsInteractionLike: "app.bsky.feed.defs#interactionLike",
  DefsInteractionRepost: "app.bsky.feed.defs#interactionRepost",
  DefsInteractionReply: "app.bsky.feed.defs#interactionReply",
  DefsInteractionQuote: "app.bsky.feed.defs#interactionQuote",
  DefsInteractionShare: "app.bsky.feed.defs#interactionShare"
};
o.APP_BSKY_GRAPH = {
  DefsModlist: "app.bsky.graph.defs#modlist",
  DefsCuratelist: "app.bsky.graph.defs#curatelist",
  DefsReferencelist: "app.bsky.graph.defs#referencelist"
};
o.TOOLS_OZONE_MODERATION = {
  DefsReviewOpen: "tools.ozone.moderation.defs#reviewOpen",
  DefsReviewEscalated: "tools.ozone.moderation.defs#reviewEscalated",
  DefsReviewClosed: "tools.ozone.moderation.defs#reviewClosed",
  DefsReviewNone: "tools.ozone.moderation.defs#reviewNone"
};
o.TOOLS_OZONE_TEAM = {
  DefsRoleAdmin: "tools.ozone.team.defs#roleAdmin",
  DefsRoleModerator: "tools.ozone.team.defs#roleModerator",
  DefsRoleTriage: "tools.ozone.team.defs#roleTriage"
};
class ok extends fL.XrpcClient {
  constructor(e) {
    super(e, yL.schemas), Object.defineProperty(this, "com", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "app", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "chat", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "tools", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.com = new uy(this), this.app = new gy(this), this.chat = new Gy(this), this.tools = new Wy(this);
  }
  /** @deprecated use `this` instead */
  get xrpc() {
    return this;
  }
}
o.AtpBaseClient = ok;
class uy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "atproto", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.atproto = new cy(e);
  }
}
o.ComNS = uy;
class cy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "admin", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "identity", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "label", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "moderation", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "repo", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "server", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "sync", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "temp", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.admin = new py(e), this.identity = new dy(e), this.label = new fy(e), this.moderation = new yy(e), this.repo = new my(e), this.server = new by(e), this.sync = new hy(e), this.temp = new Ey(e);
  }
}
o.ComAtprotoNS = cy;
class py {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  deleteAccount(e, r) {
    return this._client.call("com.atproto.admin.deleteAccount", r == null ? void 0 : r.qp, e, r);
  }
  disableAccountInvites(e, r) {
    return this._client.call("com.atproto.admin.disableAccountInvites", r == null ? void 0 : r.qp, e, r);
  }
  disableInviteCodes(e, r) {
    return this._client.call("com.atproto.admin.disableInviteCodes", r == null ? void 0 : r.qp, e, r);
  }
  enableAccountInvites(e, r) {
    return this._client.call("com.atproto.admin.enableAccountInvites", r == null ? void 0 : r.qp, e, r);
  }
  getAccountInfo(e, r) {
    return this._client.call("com.atproto.admin.getAccountInfo", e, void 0, r);
  }
  getAccountInfos(e, r) {
    return this._client.call("com.atproto.admin.getAccountInfos", e, void 0, r);
  }
  getInviteCodes(e, r) {
    return this._client.call("com.atproto.admin.getInviteCodes", e, void 0, r);
  }
  getSubjectStatus(e, r) {
    return this._client.call("com.atproto.admin.getSubjectStatus", e, void 0, r);
  }
  searchAccounts(e, r) {
    return this._client.call("com.atproto.admin.searchAccounts", e, void 0, r);
  }
  sendEmail(e, r) {
    return this._client.call("com.atproto.admin.sendEmail", r == null ? void 0 : r.qp, e, r);
  }
  updateAccountEmail(e, r) {
    return this._client.call("com.atproto.admin.updateAccountEmail", r == null ? void 0 : r.qp, e, r);
  }
  updateAccountHandle(e, r) {
    return this._client.call("com.atproto.admin.updateAccountHandle", r == null ? void 0 : r.qp, e, r);
  }
  updateAccountPassword(e, r) {
    return this._client.call("com.atproto.admin.updateAccountPassword", r == null ? void 0 : r.qp, e, r);
  }
  updateSubjectStatus(e, r) {
    return this._client.call("com.atproto.admin.updateSubjectStatus", r == null ? void 0 : r.qp, e, r);
  }
}
o.ComAtprotoAdminNS = py;
class dy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  getRecommendedDidCredentials(e, r) {
    return this._client.call("com.atproto.identity.getRecommendedDidCredentials", e, void 0, r);
  }
  requestPlcOperationSignature(e, r) {
    return this._client.call("com.atproto.identity.requestPlcOperationSignature", r == null ? void 0 : r.qp, e, r);
  }
  resolveHandle(e, r) {
    return this._client.call("com.atproto.identity.resolveHandle", e, void 0, r);
  }
  signPlcOperation(e, r) {
    return this._client.call("com.atproto.identity.signPlcOperation", r == null ? void 0 : r.qp, e, r);
  }
  submitPlcOperation(e, r) {
    return this._client.call("com.atproto.identity.submitPlcOperation", r == null ? void 0 : r.qp, e, r);
  }
  updateHandle(e, r) {
    return this._client.call("com.atproto.identity.updateHandle", r == null ? void 0 : r.qp, e, r);
  }
}
o.ComAtprotoIdentityNS = dy;
class fy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  queryLabels(e, r) {
    return this._client.call("com.atproto.label.queryLabels", e, void 0, r);
  }
}
o.ComAtprotoLabelNS = fy;
class yy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  createReport(e, r) {
    return this._client.call("com.atproto.moderation.createReport", r == null ? void 0 : r.qp, e, r);
  }
}
o.ComAtprotoModerationNS = yy;
class my {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  applyWrites(e, r) {
    return this._client.call("com.atproto.repo.applyWrites", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw mL.toKnownErr(n);
    });
  }
  createRecord(e, r) {
    return this._client.call("com.atproto.repo.createRecord", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw bL.toKnownErr(n);
    });
  }
  deleteRecord(e, r) {
    return this._client.call("com.atproto.repo.deleteRecord", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw hL.toKnownErr(n);
    });
  }
  describeRepo(e, r) {
    return this._client.call("com.atproto.repo.describeRepo", e, void 0, r);
  }
  getRecord(e, r) {
    return this._client.call("com.atproto.repo.getRecord", e, void 0, r).catch((n) => {
      throw EL.toKnownErr(n);
    });
  }
  importRepo(e, r) {
    return this._client.call("com.atproto.repo.importRepo", r == null ? void 0 : r.qp, e, r);
  }
  listMissingBlobs(e, r) {
    return this._client.call("com.atproto.repo.listMissingBlobs", e, void 0, r);
  }
  listRecords(e, r) {
    return this._client.call("com.atproto.repo.listRecords", e, void 0, r);
  }
  putRecord(e, r) {
    return this._client.call("com.atproto.repo.putRecord", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw gL.toKnownErr(n);
    });
  }
  uploadBlob(e, r) {
    return this._client.call("com.atproto.repo.uploadBlob", r == null ? void 0 : r.qp, e, r);
  }
}
o.ComAtprotoRepoNS = my;
class by {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  activateAccount(e, r) {
    return this._client.call("com.atproto.server.activateAccount", r == null ? void 0 : r.qp, e, r);
  }
  checkAccountStatus(e, r) {
    return this._client.call("com.atproto.server.checkAccountStatus", e, void 0, r);
  }
  confirmEmail(e, r) {
    return this._client.call("com.atproto.server.confirmEmail", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw xL.toKnownErr(n);
    });
  }
  createAccount(e, r) {
    return this._client.call("com.atproto.server.createAccount", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw RL.toKnownErr(n);
    });
  }
  createAppPassword(e, r) {
    return this._client.call("com.atproto.server.createAppPassword", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw AL.toKnownErr(n);
    });
  }
  createInviteCode(e, r) {
    return this._client.call("com.atproto.server.createInviteCode", r == null ? void 0 : r.qp, e, r);
  }
  createInviteCodes(e, r) {
    return this._client.call("com.atproto.server.createInviteCodes", r == null ? void 0 : r.qp, e, r);
  }
  createSession(e, r) {
    return this._client.call("com.atproto.server.createSession", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw vL.toKnownErr(n);
    });
  }
  deactivateAccount(e, r) {
    return this._client.call("com.atproto.server.deactivateAccount", r == null ? void 0 : r.qp, e, r);
  }
  deleteAccount(e, r) {
    return this._client.call("com.atproto.server.deleteAccount", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw TL.toKnownErr(n);
    });
  }
  deleteSession(e, r) {
    return this._client.call("com.atproto.server.deleteSession", r == null ? void 0 : r.qp, e, r);
  }
  describeServer(e, r) {
    return this._client.call("com.atproto.server.describeServer", e, void 0, r);
  }
  getAccountInviteCodes(e, r) {
    return this._client.call("com.atproto.server.getAccountInviteCodes", e, void 0, r).catch((n) => {
      throw _L.toKnownErr(n);
    });
  }
  getServiceAuth(e, r) {
    return this._client.call("com.atproto.server.getServiceAuth", e, void 0, r).catch((n) => {
      throw CL.toKnownErr(n);
    });
  }
  getSession(e, r) {
    return this._client.call("com.atproto.server.getSession", e, void 0, r);
  }
  listAppPasswords(e, r) {
    return this._client.call("com.atproto.server.listAppPasswords", e, void 0, r).catch((n) => {
      throw wL.toKnownErr(n);
    });
  }
  refreshSession(e, r) {
    return this._client.call("com.atproto.server.refreshSession", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw SL.toKnownErr(n);
    });
  }
  requestAccountDelete(e, r) {
    return this._client.call("com.atproto.server.requestAccountDelete", r == null ? void 0 : r.qp, e, r);
  }
  requestEmailConfirmation(e, r) {
    return this._client.call("com.atproto.server.requestEmailConfirmation", r == null ? void 0 : r.qp, e, r);
  }
  requestEmailUpdate(e, r) {
    return this._client.call("com.atproto.server.requestEmailUpdate", r == null ? void 0 : r.qp, e, r);
  }
  requestPasswordReset(e, r) {
    return this._client.call("com.atproto.server.requestPasswordReset", r == null ? void 0 : r.qp, e, r);
  }
  reserveSigningKey(e, r) {
    return this._client.call("com.atproto.server.reserveSigningKey", r == null ? void 0 : r.qp, e, r);
  }
  resetPassword(e, r) {
    return this._client.call("com.atproto.server.resetPassword", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw LL.toKnownErr(n);
    });
  }
  revokeAppPassword(e, r) {
    return this._client.call("com.atproto.server.revokeAppPassword", r == null ? void 0 : r.qp, e, r);
  }
  updateEmail(e, r) {
    return this._client.call("com.atproto.server.updateEmail", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw kL.toKnownErr(n);
    });
  }
}
o.ComAtprotoServerNS = by;
class hy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  getBlob(e, r) {
    return this._client.call("com.atproto.sync.getBlob", e, void 0, r).catch((n) => {
      throw BL.toKnownErr(n);
    });
  }
  getBlocks(e, r) {
    return this._client.call("com.atproto.sync.getBlocks", e, void 0, r).catch((n) => {
      throw DL.toKnownErr(n);
    });
  }
  getCheckout(e, r) {
    return this._client.call("com.atproto.sync.getCheckout", e, void 0, r);
  }
  getHead(e, r) {
    return this._client.call("com.atproto.sync.getHead", e, void 0, r).catch((n) => {
      throw PL.toKnownErr(n);
    });
  }
  getLatestCommit(e, r) {
    return this._client.call("com.atproto.sync.getLatestCommit", e, void 0, r).catch((n) => {
      throw UL.toKnownErr(n);
    });
  }
  getRecord(e, r) {
    return this._client.call("com.atproto.sync.getRecord", e, void 0, r).catch((n) => {
      throw KL.toKnownErr(n);
    });
  }
  getRepo(e, r) {
    return this._client.call("com.atproto.sync.getRepo", e, void 0, r).catch((n) => {
      throw jL.toKnownErr(n);
    });
  }
  getRepoStatus(e, r) {
    return this._client.call("com.atproto.sync.getRepoStatus", e, void 0, r).catch((n) => {
      throw VL.toKnownErr(n);
    });
  }
  listBlobs(e, r) {
    return this._client.call("com.atproto.sync.listBlobs", e, void 0, r).catch((n) => {
      throw OL.toKnownErr(n);
    });
  }
  listRepos(e, r) {
    return this._client.call("com.atproto.sync.listRepos", e, void 0, r);
  }
  notifyOfUpdate(e, r) {
    return this._client.call("com.atproto.sync.notifyOfUpdate", r == null ? void 0 : r.qp, e, r);
  }
  requestCrawl(e, r) {
    return this._client.call("com.atproto.sync.requestCrawl", r == null ? void 0 : r.qp, e, r);
  }
}
o.ComAtprotoSyncNS = hy;
class Ey {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  addReservedHandle(e, r) {
    return this._client.call("com.atproto.temp.addReservedHandle", r == null ? void 0 : r.qp, e, r);
  }
  checkSignupQueue(e, r) {
    return this._client.call("com.atproto.temp.checkSignupQueue", e, void 0, r);
  }
  fetchLabels(e, r) {
    return this._client.call("com.atproto.temp.fetchLabels", e, void 0, r);
  }
  requestPhoneVerification(e, r) {
    return this._client.call("com.atproto.temp.requestPhoneVerification", r == null ? void 0 : r.qp, e, r);
  }
}
o.ComAtprotoTempNS = Ey;
class gy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "bsky", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.bsky = new xy(e);
  }
}
o.AppNS = gy;
class xy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "actor", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "embed", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "feed", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "graph", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "labeler", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "notification", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "richtext", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "unspecced", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "video", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.actor = new Ry(e), this.embed = new vy(e), this.feed = new Ty(e), this.graph = new By(e), this.labeler = new Oy(e), this.notification = new Ny(e), this.richtext = new My(e), this.unspecced = new $y(e), this.video = new qy(e);
  }
}
o.AppBskyNS = xy;
class Ry {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "profile", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.profile = new Ay(e);
  }
  getPreferences(e, r) {
    return this._client.call("app.bsky.actor.getPreferences", e, void 0, r);
  }
  getProfile(e, r) {
    return this._client.call("app.bsky.actor.getProfile", e, void 0, r);
  }
  getProfiles(e, r) {
    return this._client.call("app.bsky.actor.getProfiles", e, void 0, r);
  }
  getSuggestions(e, r) {
    return this._client.call("app.bsky.actor.getSuggestions", e, void 0, r);
  }
  putPreferences(e, r) {
    return this._client.call("app.bsky.actor.putPreferences", r == null ? void 0 : r.qp, e, r);
  }
  searchActors(e, r) {
    return this._client.call("app.bsky.actor.searchActors", e, void 0, r);
  }
  searchActorsTypeahead(e, r) {
    return this._client.call("app.bsky.actor.searchActorsTypeahead", e, void 0, r);
  }
}
o.AppBskyActorNS = Ry;
class Ay {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.actor.profile",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.actor.profile",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.actor.profile", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.actor.profile", rkey: "self", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.actor.profile", ...e }, { headers: r });
  }
}
o.ProfileRecord = Ay;
class vy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
}
o.AppBskyEmbedNS = vy;
class Ty {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "generator", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "like", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "post", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "postgate", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "repost", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "threadgate", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.generator = new _y(e), this.like = new Cy(e), this.post = new wy(e), this.postgate = new Sy(e), this.repost = new Ly(e), this.threadgate = new ky(e);
  }
  describeFeedGenerator(e, r) {
    return this._client.call("app.bsky.feed.describeFeedGenerator", e, void 0, r);
  }
  getActorFeeds(e, r) {
    return this._client.call("app.bsky.feed.getActorFeeds", e, void 0, r);
  }
  getActorLikes(e, r) {
    return this._client.call("app.bsky.feed.getActorLikes", e, void 0, r).catch((n) => {
      throw IL.toKnownErr(n);
    });
  }
  getAuthorFeed(e, r) {
    return this._client.call("app.bsky.feed.getAuthorFeed", e, void 0, r).catch((n) => {
      throw NL.toKnownErr(n);
    });
  }
  getFeed(e, r) {
    return this._client.call("app.bsky.feed.getFeed", e, void 0, r).catch((n) => {
      throw ML.toKnownErr(n);
    });
  }
  getFeedGenerator(e, r) {
    return this._client.call("app.bsky.feed.getFeedGenerator", e, void 0, r);
  }
  getFeedGenerators(e, r) {
    return this._client.call("app.bsky.feed.getFeedGenerators", e, void 0, r);
  }
  getFeedSkeleton(e, r) {
    return this._client.call("app.bsky.feed.getFeedSkeleton", e, void 0, r).catch((n) => {
      throw $L.toKnownErr(n);
    });
  }
  getLikes(e, r) {
    return this._client.call("app.bsky.feed.getLikes", e, void 0, r);
  }
  getListFeed(e, r) {
    return this._client.call("app.bsky.feed.getListFeed", e, void 0, r).catch((n) => {
      throw qL.toKnownErr(n);
    });
  }
  getPostThread(e, r) {
    return this._client.call("app.bsky.feed.getPostThread", e, void 0, r).catch((n) => {
      throw GL.toKnownErr(n);
    });
  }
  getPosts(e, r) {
    return this._client.call("app.bsky.feed.getPosts", e, void 0, r);
  }
  getQuotes(e, r) {
    return this._client.call("app.bsky.feed.getQuotes", e, void 0, r);
  }
  getRepostedBy(e, r) {
    return this._client.call("app.bsky.feed.getRepostedBy", e, void 0, r);
  }
  getSuggestedFeeds(e, r) {
    return this._client.call("app.bsky.feed.getSuggestedFeeds", e, void 0, r);
  }
  getTimeline(e, r) {
    return this._client.call("app.bsky.feed.getTimeline", e, void 0, r);
  }
  searchPosts(e, r) {
    return this._client.call("app.bsky.feed.searchPosts", e, void 0, r).catch((n) => {
      throw zL.toKnownErr(n);
    });
  }
  sendInteractions(e, r) {
    return this._client.call("app.bsky.feed.sendInteractions", r == null ? void 0 : r.qp, e, r);
  }
}
o.AppBskyFeedNS = Ty;
class _y {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.feed.generator",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.feed.generator",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.feed.generator", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.generator", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.generator", ...e }, { headers: r });
  }
}
o.GeneratorRecord = _y;
class Cy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.feed.like",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.feed.like",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.feed.like", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.like", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.like", ...e }, { headers: r });
  }
}
o.LikeRecord = Cy;
class wy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.feed.post",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.feed.post",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.feed.post", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.post", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.post", ...e }, { headers: r });
  }
}
o.PostRecord = wy;
class Sy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.feed.postgate",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.feed.postgate",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.feed.postgate", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.postgate", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.postgate", ...e }, { headers: r });
  }
}
o.PostgateRecord = Sy;
class Ly {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.feed.repost",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.feed.repost",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.feed.repost", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.repost", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.repost", ...e }, { headers: r });
  }
}
o.RepostRecord = Ly;
class ky {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.feed.threadgate",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.feed.threadgate",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.feed.threadgate", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.threadgate", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.threadgate", ...e }, { headers: r });
  }
}
o.ThreadgateRecord = ky;
class By {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "block", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "follow", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "list", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "listblock", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "listitem", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "starterpack", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.block = new Dy(e), this.follow = new Py(e), this.list = new Uy(e), this.listblock = new Ky(e), this.listitem = new jy(e), this.starterpack = new Vy(e);
  }
  getActorStarterPacks(e, r) {
    return this._client.call("app.bsky.graph.getActorStarterPacks", e, void 0, r);
  }
  getBlocks(e, r) {
    return this._client.call("app.bsky.graph.getBlocks", e, void 0, r);
  }
  getFollowers(e, r) {
    return this._client.call("app.bsky.graph.getFollowers", e, void 0, r);
  }
  getFollows(e, r) {
    return this._client.call("app.bsky.graph.getFollows", e, void 0, r);
  }
  getKnownFollowers(e, r) {
    return this._client.call("app.bsky.graph.getKnownFollowers", e, void 0, r);
  }
  getList(e, r) {
    return this._client.call("app.bsky.graph.getList", e, void 0, r);
  }
  getListBlocks(e, r) {
    return this._client.call("app.bsky.graph.getListBlocks", e, void 0, r);
  }
  getListMutes(e, r) {
    return this._client.call("app.bsky.graph.getListMutes", e, void 0, r);
  }
  getLists(e, r) {
    return this._client.call("app.bsky.graph.getLists", e, void 0, r);
  }
  getMutes(e, r) {
    return this._client.call("app.bsky.graph.getMutes", e, void 0, r);
  }
  getRelationships(e, r) {
    return this._client.call("app.bsky.graph.getRelationships", e, void 0, r).catch((n) => {
      throw FL.toKnownErr(n);
    });
  }
  getStarterPack(e, r) {
    return this._client.call("app.bsky.graph.getStarterPack", e, void 0, r);
  }
  getStarterPacks(e, r) {
    return this._client.call("app.bsky.graph.getStarterPacks", e, void 0, r);
  }
  getSuggestedFollowsByActor(e, r) {
    return this._client.call("app.bsky.graph.getSuggestedFollowsByActor", e, void 0, r);
  }
  muteActor(e, r) {
    return this._client.call("app.bsky.graph.muteActor", r == null ? void 0 : r.qp, e, r);
  }
  muteActorList(e, r) {
    return this._client.call("app.bsky.graph.muteActorList", r == null ? void 0 : r.qp, e, r);
  }
  muteThread(e, r) {
    return this._client.call("app.bsky.graph.muteThread", r == null ? void 0 : r.qp, e, r);
  }
  searchStarterPacks(e, r) {
    return this._client.call("app.bsky.graph.searchStarterPacks", e, void 0, r);
  }
  unmuteActor(e, r) {
    return this._client.call("app.bsky.graph.unmuteActor", r == null ? void 0 : r.qp, e, r);
  }
  unmuteActorList(e, r) {
    return this._client.call("app.bsky.graph.unmuteActorList", r == null ? void 0 : r.qp, e, r);
  }
  unmuteThread(e, r) {
    return this._client.call("app.bsky.graph.unmuteThread", r == null ? void 0 : r.qp, e, r);
  }
}
o.AppBskyGraphNS = By;
class Dy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.graph.block",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.graph.block",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.graph.block", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.block", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.block", ...e }, { headers: r });
  }
}
o.BlockRecord = Dy;
class Py {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.graph.follow",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.graph.follow",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.graph.follow", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.follow", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.follow", ...e }, { headers: r });
  }
}
o.FollowRecord = Py;
class Uy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.graph.list",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.graph.list",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.graph.list", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.list", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.list", ...e }, { headers: r });
  }
}
o.ListRecord = Uy;
class Ky {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.graph.listblock",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.graph.listblock",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.graph.listblock", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.listblock", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listblock", ...e }, { headers: r });
  }
}
o.ListblockRecord = Ky;
class jy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.graph.listitem",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.graph.listitem",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.graph.listitem", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.listitem", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listitem", ...e }, { headers: r });
  }
}
o.ListitemRecord = jy;
class Vy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.graph.starterpack",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.graph.starterpack",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.graph.starterpack", (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.starterpack", ...e, record: r }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.starterpack", ...e }, { headers: r });
  }
}
o.StarterpackRecord = Vy;
class Oy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "service", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.service = new Iy(e);
  }
  getServices(e, r) {
    return this._client.call("app.bsky.labeler.getServices", e, void 0, r);
  }
}
o.AppBskyLabelerNS = Oy;
class Iy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "app.bsky.labeler.service",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "app.bsky.labeler.service",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "app.bsky.labeler.service", (await this._client.call("com.atproto.repo.createRecord", void 0, {
      collection: "app.bsky.labeler.service",
      rkey: "self",
      ...e,
      record: r
    }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.labeler.service", ...e }, { headers: r });
  }
}
o.ServiceRecord = Iy;
class Ny {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  getUnreadCount(e, r) {
    return this._client.call("app.bsky.notification.getUnreadCount", e, void 0, r);
  }
  listNotifications(e, r) {
    return this._client.call("app.bsky.notification.listNotifications", e, void 0, r);
  }
  putPreferences(e, r) {
    return this._client.call("app.bsky.notification.putPreferences", r == null ? void 0 : r.qp, e, r);
  }
  registerPush(e, r) {
    return this._client.call("app.bsky.notification.registerPush", r == null ? void 0 : r.qp, e, r);
  }
  updateSeen(e, r) {
    return this._client.call("app.bsky.notification.updateSeen", r == null ? void 0 : r.qp, e, r);
  }
}
o.AppBskyNotificationNS = Ny;
class My {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
}
o.AppBskyRichtextNS = My;
class $y {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  getConfig(e, r) {
    return this._client.call("app.bsky.unspecced.getConfig", e, void 0, r);
  }
  getPopularFeedGenerators(e, r) {
    return this._client.call("app.bsky.unspecced.getPopularFeedGenerators", e, void 0, r);
  }
  getSuggestionsSkeleton(e, r) {
    return this._client.call("app.bsky.unspecced.getSuggestionsSkeleton", e, void 0, r);
  }
  getTaggedSuggestions(e, r) {
    return this._client.call("app.bsky.unspecced.getTaggedSuggestions", e, void 0, r);
  }
  searchActorsSkeleton(e, r) {
    return this._client.call("app.bsky.unspecced.searchActorsSkeleton", e, void 0, r).catch((n) => {
      throw XL.toKnownErr(n);
    });
  }
  searchPostsSkeleton(e, r) {
    return this._client.call("app.bsky.unspecced.searchPostsSkeleton", e, void 0, r).catch((n) => {
      throw ZL.toKnownErr(n);
    });
  }
  searchStarterPacksSkeleton(e, r) {
    return this._client.call("app.bsky.unspecced.searchStarterPacksSkeleton", e, void 0, r).catch((n) => {
      throw HL.toKnownErr(n);
    });
  }
}
o.AppBskyUnspeccedNS = $y;
class qy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  getJobStatus(e, r) {
    return this._client.call("app.bsky.video.getJobStatus", e, void 0, r);
  }
  getUploadLimits(e, r) {
    return this._client.call("app.bsky.video.getUploadLimits", e, void 0, r);
  }
  uploadVideo(e, r) {
    return this._client.call("app.bsky.video.uploadVideo", r == null ? void 0 : r.qp, e, r);
  }
}
o.AppBskyVideoNS = qy;
class Gy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "bsky", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.bsky = new zy(e);
  }
}
o.ChatNS = Gy;
class zy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "actor", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "convo", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "moderation", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.actor = new Fy(e), this.convo = new Zy(e), this.moderation = new Hy(e);
  }
}
o.ChatBskyNS = zy;
class Fy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "declaration", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.declaration = new Xy(e);
  }
  deleteAccount(e, r) {
    return this._client.call("chat.bsky.actor.deleteAccount", r == null ? void 0 : r.qp, e, r);
  }
  exportAccountData(e, r) {
    return this._client.call("chat.bsky.actor.exportAccountData", e, void 0, r);
  }
}
o.ChatBskyActorNS = Fy;
class Xy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  async list(e) {
    return (await this._client.call("com.atproto.repo.listRecords", {
      collection: "chat.bsky.actor.declaration",
      ...e
    })).data;
  }
  async get(e) {
    return (await this._client.call("com.atproto.repo.getRecord", {
      collection: "chat.bsky.actor.declaration",
      ...e
    })).data;
  }
  async create(e, r, n) {
    return r.$type = "chat.bsky.actor.declaration", (await this._client.call("com.atproto.repo.createRecord", void 0, {
      collection: "chat.bsky.actor.declaration",
      rkey: "self",
      ...e,
      record: r
    }, { encoding: "application/json", headers: n })).data;
  }
  async delete(e, r) {
    await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "chat.bsky.actor.declaration", ...e }, { headers: r });
  }
}
o.DeclarationRecord = Xy;
class Zy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  deleteMessageForSelf(e, r) {
    return this._client.call("chat.bsky.convo.deleteMessageForSelf", r == null ? void 0 : r.qp, e, r);
  }
  getConvo(e, r) {
    return this._client.call("chat.bsky.convo.getConvo", e, void 0, r);
  }
  getConvoForMembers(e, r) {
    return this._client.call("chat.bsky.convo.getConvoForMembers", e, void 0, r);
  }
  getLog(e, r) {
    return this._client.call("chat.bsky.convo.getLog", e, void 0, r);
  }
  getMessages(e, r) {
    return this._client.call("chat.bsky.convo.getMessages", e, void 0, r);
  }
  leaveConvo(e, r) {
    return this._client.call("chat.bsky.convo.leaveConvo", r == null ? void 0 : r.qp, e, r);
  }
  listConvos(e, r) {
    return this._client.call("chat.bsky.convo.listConvos", e, void 0, r);
  }
  muteConvo(e, r) {
    return this._client.call("chat.bsky.convo.muteConvo", r == null ? void 0 : r.qp, e, r);
  }
  sendMessage(e, r) {
    return this._client.call("chat.bsky.convo.sendMessage", r == null ? void 0 : r.qp, e, r);
  }
  sendMessageBatch(e, r) {
    return this._client.call("chat.bsky.convo.sendMessageBatch", r == null ? void 0 : r.qp, e, r);
  }
  unmuteConvo(e, r) {
    return this._client.call("chat.bsky.convo.unmuteConvo", r == null ? void 0 : r.qp, e, r);
  }
  updateRead(e, r) {
    return this._client.call("chat.bsky.convo.updateRead", r == null ? void 0 : r.qp, e, r);
  }
}
o.ChatBskyConvoNS = Zy;
class Hy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  getActorMetadata(e, r) {
    return this._client.call("chat.bsky.moderation.getActorMetadata", e, void 0, r);
  }
  getMessageContext(e, r) {
    return this._client.call("chat.bsky.moderation.getMessageContext", e, void 0, r);
  }
  updateActorAccess(e, r) {
    return this._client.call("chat.bsky.moderation.updateActorAccess", r == null ? void 0 : r.qp, e, r);
  }
}
o.ChatBskyModerationNS = Hy;
class Wy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "ozone", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.ozone = new Jy(e);
  }
}
o.ToolsNS = Wy;
class Jy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "communication", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "moderation", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "server", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "set", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "setting", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "signature", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "team", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e, this.communication = new Qy(e), this.moderation = new Yy(e), this.server = new em(e), this.set = new tm(e), this.setting = new rm(e), this.signature = new im(e), this.team = new nm(e);
  }
}
o.ToolsOzoneNS = Jy;
class Qy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  createTemplate(e, r) {
    return this._client.call("tools.ozone.communication.createTemplate", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw WL.toKnownErr(n);
    });
  }
  deleteTemplate(e, r) {
    return this._client.call("tools.ozone.communication.deleteTemplate", r == null ? void 0 : r.qp, e, r);
  }
  listTemplates(e, r) {
    return this._client.call("tools.ozone.communication.listTemplates", e, void 0, r);
  }
  updateTemplate(e, r) {
    return this._client.call("tools.ozone.communication.updateTemplate", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw JL.toKnownErr(n);
    });
  }
}
o.ToolsOzoneCommunicationNS = Qy;
class Yy {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  emitEvent(e, r) {
    return this._client.call("tools.ozone.moderation.emitEvent", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw QL.toKnownErr(n);
    });
  }
  getEvent(e, r) {
    return this._client.call("tools.ozone.moderation.getEvent", e, void 0, r);
  }
  getRecord(e, r) {
    return this._client.call("tools.ozone.moderation.getRecord", e, void 0, r).catch((n) => {
      throw YL.toKnownErr(n);
    });
  }
  getRecords(e, r) {
    return this._client.call("tools.ozone.moderation.getRecords", e, void 0, r);
  }
  getRepo(e, r) {
    return this._client.call("tools.ozone.moderation.getRepo", e, void 0, r).catch((n) => {
      throw ek.toKnownErr(n);
    });
  }
  getRepos(e, r) {
    return this._client.call("tools.ozone.moderation.getRepos", e, void 0, r);
  }
  queryEvents(e, r) {
    return this._client.call("tools.ozone.moderation.queryEvents", e, void 0, r);
  }
  queryStatuses(e, r) {
    return this._client.call("tools.ozone.moderation.queryStatuses", e, void 0, r);
  }
  searchRepos(e, r) {
    return this._client.call("tools.ozone.moderation.searchRepos", e, void 0, r);
  }
}
o.ToolsOzoneModerationNS = Yy;
class em {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  getConfig(e, r) {
    return this._client.call("tools.ozone.server.getConfig", e, void 0, r);
  }
}
o.ToolsOzoneServerNS = em;
class tm {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  addValues(e, r) {
    return this._client.call("tools.ozone.set.addValues", r == null ? void 0 : r.qp, e, r);
  }
  deleteSet(e, r) {
    return this._client.call("tools.ozone.set.deleteSet", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw tk.toKnownErr(n);
    });
  }
  deleteValues(e, r) {
    return this._client.call("tools.ozone.set.deleteValues", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw rk.toKnownErr(n);
    });
  }
  getValues(e, r) {
    return this._client.call("tools.ozone.set.getValues", e, void 0, r).catch((n) => {
      throw ik.toKnownErr(n);
    });
  }
  querySets(e, r) {
    return this._client.call("tools.ozone.set.querySets", e, void 0, r);
  }
  upsertSet(e, r) {
    return this._client.call("tools.ozone.set.upsertSet", r == null ? void 0 : r.qp, e, r);
  }
}
o.ToolsOzoneSetNS = tm;
class rm {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  listOptions(e, r) {
    return this._client.call("tools.ozone.setting.listOptions", e, void 0, r);
  }
  removeOptions(e, r) {
    return this._client.call("tools.ozone.setting.removeOptions", r == null ? void 0 : r.qp, e, r);
  }
  upsertOption(e, r) {
    return this._client.call("tools.ozone.setting.upsertOption", r == null ? void 0 : r.qp, e, r);
  }
}
o.ToolsOzoneSettingNS = rm;
class im {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  findCorrelation(e, r) {
    return this._client.call("tools.ozone.signature.findCorrelation", e, void 0, r);
  }
  findRelatedAccounts(e, r) {
    return this._client.call("tools.ozone.signature.findRelatedAccounts", e, void 0, r);
  }
  searchAccounts(e, r) {
    return this._client.call("tools.ozone.signature.searchAccounts", e, void 0, r);
  }
}
o.ToolsOzoneSignatureNS = im;
class nm {
  constructor(e) {
    Object.defineProperty(this, "_client", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this._client = e;
  }
  addMember(e, r) {
    return this._client.call("tools.ozone.team.addMember", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw nk.toKnownErr(n);
    });
  }
  deleteMember(e, r) {
    return this._client.call("tools.ozone.team.deleteMember", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw sk.toKnownErr(n);
    });
  }
  listMembers(e, r) {
    return this._client.call("tools.ozone.team.listMembers", e, void 0, r);
  }
  updateMember(e, r) {
    return this._client.call("tools.ozone.team.updateMember", r == null ? void 0 : r.qp, e, r).catch((n) => {
      throw ak.toKnownErr(n);
    });
  }
}
o.ToolsOzoneTeamNS = nm;
var hi = {}, an = {};
Object.defineProperty(an, "__esModule", { value: !0 });
an.UnicodeString = void 0;
const lk = Bt, Kc = new TextEncoder(), uk = new TextDecoder();
class ck {
  constructor(e) {
    Object.defineProperty(this, "utf16", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "utf8", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "_graphemeLen", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.utf16 = e, this.utf8 = Kc.encode(e);
  }
  get length() {
    return this.utf8.byteLength;
  }
  get graphemeLength() {
    return this._graphemeLen || (this._graphemeLen = (0, lk.graphemeLen)(this.utf16)), this._graphemeLen;
  }
  slice(e, r) {
    return uk.decode(this.utf8.slice(e, r));
  }
  utf16IndexToUtf8Index(e) {
    return Kc.encode(this.utf16.slice(0, e)).byteLength;
  }
  toString() {
    return this.utf16;
  }
}
an.UnicodeString = ck;
var oa = {};
Object.defineProperty(oa, "__esModule", { value: !0 });
oa.sanitizeRichText = yk;
const pk = an, dk = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/, fk = `

`;
function yk(t, e) {
  return e.cleanNewlines && (t = mk(t, dk, fk)), t;
}
function mk(t, e, r) {
  t = t.clone();
  let n = t.unicodeText.utf16.match(e);
  for (; n && typeof n.index < "u"; ) {
    const s = t.unicodeText, u = t.unicodeText.utf16IndexToUtf8Index(n.index), c = u + new pk.UnicodeString(n[0]).length;
    if (t.delete(u, c), t.unicodeText.utf16 === s.utf16)
      break;
    t.insert(u, r), n = t.unicodeText.utf16.match(e);
  }
  return t;
}
var ku = {};
const bk = [
  "aaa",
  "aarp",
  "abb",
  "abbott",
  "abbvie",
  "abc",
  "able",
  "abogado",
  "abudhabi",
  "ac",
  "academy",
  "accenture",
  "accountant",
  "accountants",
  "aco",
  "actor",
  "ad",
  "ads",
  "adult",
  "ae",
  "aeg",
  "aero",
  "aetna",
  "af",
  "afl",
  "africa",
  "ag",
  "agakhan",
  "agency",
  "ai",
  "aig",
  "airbus",
  "airforce",
  "airtel",
  "akdn",
  "al",
  "alibaba",
  "alipay",
  "allfinanz",
  "allstate",
  "ally",
  "alsace",
  "alstom",
  "am",
  "amazon",
  "americanexpress",
  "americanfamily",
  "amex",
  "amfam",
  "amica",
  "amsterdam",
  "analytics",
  "android",
  "anquan",
  "anz",
  "ao",
  "aol",
  "apartments",
  "app",
  "apple",
  "aq",
  "aquarelle",
  "ar",
  "arab",
  "aramco",
  "archi",
  "army",
  "arpa",
  "art",
  "arte",
  "as",
  "asda",
  "asia",
  "associates",
  "at",
  "athleta",
  "attorney",
  "au",
  "auction",
  "audi",
  "audible",
  "audio",
  "auspost",
  "author",
  "auto",
  "autos",
  "aw",
  "aws",
  "ax",
  "axa",
  "az",
  "azure",
  "ba",
  "baby",
  "baidu",
  "banamex",
  "band",
  "bank",
  "bar",
  "barcelona",
  "barclaycard",
  "barclays",
  "barefoot",
  "bargains",
  "baseball",
  "basketball",
  "bauhaus",
  "bayern",
  "bb",
  "bbc",
  "bbt",
  "bbva",
  "bcg",
  "bcn",
  "bd",
  "be",
  "beats",
  "beauty",
  "beer",
  "bentley",
  "berlin",
  "best",
  "bestbuy",
  "bet",
  "bf",
  "bg",
  "bh",
  "bharti",
  "bi",
  "bible",
  "bid",
  "bike",
  "bing",
  "bingo",
  "bio",
  "biz",
  "bj",
  "black",
  "blackfriday",
  "blockbuster",
  "blog",
  "bloomberg",
  "blue",
  "bm",
  "bms",
  "bmw",
  "bn",
  "bnpparibas",
  "bo",
  "boats",
  "boehringer",
  "bofa",
  "bom",
  "bond",
  "boo",
  "book",
  "booking",
  "bosch",
  "bostik",
  "boston",
  "bot",
  "boutique",
  "box",
  "br",
  "bradesco",
  "bridgestone",
  "broadway",
  "broker",
  "brother",
  "brussels",
  "bs",
  "bt",
  "build",
  "builders",
  "business",
  "buy",
  "buzz",
  "bv",
  "bw",
  "by",
  "bz",
  "bzh",
  "ca",
  "cab",
  "cafe",
  "cal",
  "call",
  "calvinklein",
  "cam",
  "camera",
  "camp",
  "canon",
  "capetown",
  "capital",
  "capitalone",
  "car",
  "caravan",
  "cards",
  "care",
  "career",
  "careers",
  "cars",
  "casa",
  "case",
  "cash",
  "casino",
  "cat",
  "catering",
  "catholic",
  "cba",
  "cbn",
  "cbre",
  "cc",
  "cd",
  "center",
  "ceo",
  "cern",
  "cf",
  "cfa",
  "cfd",
  "cg",
  "ch",
  "chanel",
  "channel",
  "charity",
  "chase",
  "chat",
  "cheap",
  "chintai",
  "christmas",
  "chrome",
  "church",
  "ci",
  "cipriani",
  "circle",
  "cisco",
  "citadel",
  "citi",
  "citic",
  "city",
  "ck",
  "cl",
  "claims",
  "cleaning",
  "click",
  "clinic",
  "clinique",
  "clothing",
  "cloud",
  "club",
  "clubmed",
  "cm",
  "cn",
  "co",
  "coach",
  "codes",
  "coffee",
  "college",
  "cologne",
  "com",
  "commbank",
  "community",
  "company",
  "compare",
  "computer",
  "comsec",
  "condos",
  "construction",
  "consulting",
  "contact",
  "contractors",
  "cooking",
  "cool",
  "coop",
  "corsica",
  "country",
  "coupon",
  "coupons",
  "courses",
  "cpa",
  "cr",
  "credit",
  "creditcard",
  "creditunion",
  "cricket",
  "crown",
  "crs",
  "cruise",
  "cruises",
  "cu",
  "cuisinella",
  "cv",
  "cw",
  "cx",
  "cy",
  "cymru",
  "cyou",
  "cz",
  "dad",
  "dance",
  "data",
  "date",
  "dating",
  "datsun",
  "day",
  "dclk",
  "dds",
  "de",
  "deal",
  "dealer",
  "deals",
  "degree",
  "delivery",
  "dell",
  "deloitte",
  "delta",
  "democrat",
  "dental",
  "dentist",
  "desi",
  "design",
  "dev",
  "dhl",
  "diamonds",
  "diet",
  "digital",
  "direct",
  "directory",
  "discount",
  "discover",
  "dish",
  "diy",
  "dj",
  "dk",
  "dm",
  "dnp",
  "do",
  "docs",
  "doctor",
  "dog",
  "domains",
  "dot",
  "download",
  "drive",
  "dtv",
  "dubai",
  "dunlop",
  "dupont",
  "durban",
  "dvag",
  "dvr",
  "dz",
  "earth",
  "eat",
  "ec",
  "eco",
  "edeka",
  "edu",
  "education",
  "ee",
  "eg",
  "email",
  "emerck",
  "energy",
  "engineer",
  "engineering",
  "enterprises",
  "epson",
  "equipment",
  "er",
  "ericsson",
  "erni",
  "es",
  "esq",
  "estate",
  "et",
  "eu",
  "eurovision",
  "eus",
  "events",
  "exchange",
  "expert",
  "exposed",
  "express",
  "extraspace",
  "fage",
  "fail",
  "fairwinds",
  "faith",
  "family",
  "fan",
  "fans",
  "farm",
  "farmers",
  "fashion",
  "fast",
  "fedex",
  "feedback",
  "ferrari",
  "ferrero",
  "fi",
  "fidelity",
  "fido",
  "film",
  "final",
  "finance",
  "financial",
  "fire",
  "firestone",
  "firmdale",
  "fish",
  "fishing",
  "fit",
  "fitness",
  "fj",
  "fk",
  "flickr",
  "flights",
  "flir",
  "florist",
  "flowers",
  "fly",
  "fm",
  "fo",
  "foo",
  "food",
  "football",
  "ford",
  "forex",
  "forsale",
  "forum",
  "foundation",
  "fox",
  "fr",
  "free",
  "fresenius",
  "frl",
  "frogans",
  "frontier",
  "ftr",
  "fujitsu",
  "fun",
  "fund",
  "furniture",
  "futbol",
  "fyi",
  "ga",
  "gal",
  "gallery",
  "gallo",
  "gallup",
  "game",
  "games",
  "gap",
  "garden",
  "gay",
  "gb",
  "gbiz",
  "gd",
  "gdn",
  "ge",
  "gea",
  "gent",
  "genting",
  "george",
  "gf",
  "gg",
  "ggee",
  "gh",
  "gi",
  "gift",
  "gifts",
  "gives",
  "giving",
  "gl",
  "glass",
  "gle",
  "global",
  "globo",
  "gm",
  "gmail",
  "gmbh",
  "gmo",
  "gmx",
  "gn",
  "godaddy",
  "gold",
  "goldpoint",
  "golf",
  "goo",
  "goodyear",
  "goog",
  "google",
  "gop",
  "got",
  "gov",
  "gp",
  "gq",
  "gr",
  "grainger",
  "graphics",
  "gratis",
  "green",
  "gripe",
  "grocery",
  "group",
  "gs",
  "gt",
  "gu",
  "gucci",
  "guge",
  "guide",
  "guitars",
  "guru",
  "gw",
  "gy",
  "hair",
  "hamburg",
  "hangout",
  "haus",
  "hbo",
  "hdfc",
  "hdfcbank",
  "health",
  "healthcare",
  "help",
  "helsinki",
  "here",
  "hermes",
  "hiphop",
  "hisamitsu",
  "hitachi",
  "hiv",
  "hk",
  "hkt",
  "hm",
  "hn",
  "hockey",
  "holdings",
  "holiday",
  "homedepot",
  "homegoods",
  "homes",
  "homesense",
  "honda",
  "horse",
  "hospital",
  "host",
  "hosting",
  "hot",
  "hotels",
  "hotmail",
  "house",
  "how",
  "hr",
  "hsbc",
  "ht",
  "hu",
  "hughes",
  "hyatt",
  "hyundai",
  "ibm",
  "icbc",
  "ice",
  "icu",
  "id",
  "ie",
  "ieee",
  "ifm",
  "ikano",
  "il",
  "im",
  "imamat",
  "imdb",
  "immo",
  "immobilien",
  "in",
  "inc",
  "industries",
  "infiniti",
  "info",
  "ing",
  "ink",
  "institute",
  "insurance",
  "insure",
  "int",
  "international",
  "intuit",
  "investments",
  "io",
  "ipiranga",
  "iq",
  "ir",
  "irish",
  "is",
  "ismaili",
  "ist",
  "istanbul",
  "it",
  "itau",
  "itv",
  "jaguar",
  "java",
  "jcb",
  "je",
  "jeep",
  "jetzt",
  "jewelry",
  "jio",
  "jll",
  "jm",
  "jmp",
  "jnj",
  "jo",
  "jobs",
  "joburg",
  "jot",
  "joy",
  "jp",
  "jpmorgan",
  "jprs",
  "juegos",
  "juniper",
  "kaufen",
  "kddi",
  "ke",
  "kerryhotels",
  "kerrylogistics",
  "kerryproperties",
  "kfh",
  "kg",
  "kh",
  "ki",
  "kia",
  "kids",
  "kim",
  "kindle",
  "kitchen",
  "kiwi",
  "km",
  "kn",
  "koeln",
  "komatsu",
  "kosher",
  "kp",
  "kpmg",
  "kpn",
  "kr",
  "krd",
  "kred",
  "kuokgroup",
  "kw",
  "ky",
  "kyoto",
  "kz",
  "la",
  "lacaixa",
  "lamborghini",
  "lamer",
  "lancaster",
  "land",
  "landrover",
  "lanxess",
  "lasalle",
  "lat",
  "latino",
  "latrobe",
  "law",
  "lawyer",
  "lb",
  "lc",
  "lds",
  "lease",
  "leclerc",
  "lefrak",
  "legal",
  "lego",
  "lexus",
  "lgbt",
  "li",
  "lidl",
  "life",
  "lifeinsurance",
  "lifestyle",
  "lighting",
  "like",
  "lilly",
  "limited",
  "limo",
  "lincoln",
  "link",
  "lipsy",
  "live",
  "living",
  "lk",
  "llc",
  "llp",
  "loan",
  "loans",
  "locker",
  "locus",
  "lol",
  "london",
  "lotte",
  "lotto",
  "love",
  "lpl",
  "lplfinancial",
  "lr",
  "ls",
  "lt",
  "ltd",
  "ltda",
  "lu",
  "lundbeck",
  "luxe",
  "luxury",
  "lv",
  "ly",
  "ma",
  "madrid",
  "maif",
  "maison",
  "makeup",
  "man",
  "management",
  "mango",
  "map",
  "market",
  "marketing",
  "markets",
  "marriott",
  "marshalls",
  "mattel",
  "mba",
  "mc",
  "mckinsey",
  "md",
  "me",
  "med",
  "media",
  "meet",
  "melbourne",
  "meme",
  "memorial",
  "men",
  "menu",
  "merckmsd",
  "mg",
  "mh",
  "miami",
  "microsoft",
  "mil",
  "mini",
  "mint",
  "mit",
  "mitsubishi",
  "mk",
  "ml",
  "mlb",
  "mls",
  "mm",
  "mma",
  "mn",
  "mo",
  "mobi",
  "mobile",
  "moda",
  "moe",
  "moi",
  "mom",
  "monash",
  "money",
  "monster",
  "mormon",
  "mortgage",
  "moscow",
  "moto",
  "motorcycles",
  "mov",
  "movie",
  "mp",
  "mq",
  "mr",
  "ms",
  "msd",
  "mt",
  "mtn",
  "mtr",
  "mu",
  "museum",
  "music",
  "mv",
  "mw",
  "mx",
  "my",
  "mz",
  "na",
  "nab",
  "nagoya",
  "name",
  "navy",
  "nba",
  "nc",
  "ne",
  "nec",
  "net",
  "netbank",
  "netflix",
  "network",
  "neustar",
  "new",
  "news",
  "next",
  "nextdirect",
  "nexus",
  "nf",
  "nfl",
  "ng",
  "ngo",
  "nhk",
  "ni",
  "nico",
  "nike",
  "nikon",
  "ninja",
  "nissan",
  "nissay",
  "nl",
  "no",
  "nokia",
  "norton",
  "now",
  "nowruz",
  "nowtv",
  "np",
  "nr",
  "nra",
  "nrw",
  "ntt",
  "nu",
  "nyc",
  "nz",
  "obi",
  "observer",
  "office",
  "okinawa",
  "olayan",
  "olayangroup",
  "ollo",
  "om",
  "omega",
  "one",
  "ong",
  "onl",
  "online",
  "ooo",
  "open",
  "oracle",
  "orange",
  "org",
  "organic",
  "origins",
  "osaka",
  "otsuka",
  "ott",
  "ovh",
  "pa",
  "page",
  "panasonic",
  "paris",
  "pars",
  "partners",
  "parts",
  "party",
  "pay",
  "pccw",
  "pe",
  "pet",
  "pf",
  "pfizer",
  "pg",
  "ph",
  "pharmacy",
  "phd",
  "philips",
  "phone",
  "photo",
  "photography",
  "photos",
  "physio",
  "pics",
  "pictet",
  "pictures",
  "pid",
  "pin",
  "ping",
  "pink",
  "pioneer",
  "pizza",
  "pk",
  "pl",
  "place",
  "play",
  "playstation",
  "plumbing",
  "plus",
  "pm",
  "pn",
  "pnc",
  "pohl",
  "poker",
  "politie",
  "porn",
  "post",
  "pr",
  "pramerica",
  "praxi",
  "press",
  "prime",
  "pro",
  "prod",
  "productions",
  "prof",
  "progressive",
  "promo",
  "properties",
  "property",
  "protection",
  "pru",
  "prudential",
  "ps",
  "pt",
  "pub",
  "pw",
  "pwc",
  "py",
  "qa",
  "qpon",
  "quebec",
  "quest",
  "racing",
  "radio",
  "re",
  "read",
  "realestate",
  "realtor",
  "realty",
  "recipes",
  "red",
  "redstone",
  "redumbrella",
  "rehab",
  "reise",
  "reisen",
  "reit",
  "reliance",
  "ren",
  "rent",
  "rentals",
  "repair",
  "report",
  "republican",
  "rest",
  "restaurant",
  "review",
  "reviews",
  "rexroth",
  "rich",
  "richardli",
  "ricoh",
  "ril",
  "rio",
  "rip",
  "ro",
  "rocks",
  "rodeo",
  "rogers",
  "room",
  "rs",
  "rsvp",
  "ru",
  "rugby",
  "ruhr",
  "run",
  "rw",
  "rwe",
  "ryukyu",
  "sa",
  "saarland",
  "safe",
  "safety",
  "sakura",
  "sale",
  "salon",
  "samsclub",
  "samsung",
  "sandvik",
  "sandvikcoromant",
  "sanofi",
  "sap",
  "sarl",
  "sas",
  "save",
  "saxo",
  "sb",
  "sbi",
  "sbs",
  "sc",
  "scb",
  "schaeffler",
  "schmidt",
  "scholarships",
  "school",
  "schule",
  "schwarz",
  "science",
  "scot",
  "sd",
  "se",
  "search",
  "seat",
  "secure",
  "security",
  "seek",
  "select",
  "sener",
  "services",
  "seven",
  "sew",
  "sex",
  "sexy",
  "sfr",
  "sg",
  "sh",
  "shangrila",
  "sharp",
  "shell",
  "shia",
  "shiksha",
  "shoes",
  "shop",
  "shopping",
  "shouji",
  "show",
  "si",
  "silk",
  "sina",
  "singles",
  "site",
  "sj",
  "sk",
  "ski",
  "skin",
  "sky",
  "skype",
  "sl",
  "sling",
  "sm",
  "smart",
  "smile",
  "sn",
  "sncf",
  "so",
  "soccer",
  "social",
  "softbank",
  "software",
  "sohu",
  "solar",
  "solutions",
  "song",
  "sony",
  "soy",
  "spa",
  "space",
  "sport",
  "spot",
  "sr",
  "srl",
  "ss",
  "st",
  "stada",
  "staples",
  "star",
  "statebank",
  "statefarm",
  "stc",
  "stcgroup",
  "stockholm",
  "storage",
  "store",
  "stream",
  "studio",
  "study",
  "style",
  "su",
  "sucks",
  "supplies",
  "supply",
  "support",
  "surf",
  "surgery",
  "suzuki",
  "sv",
  "swatch",
  "swiss",
  "sx",
  "sy",
  "sydney",
  "systems",
  "sz",
  "tab",
  "taipei",
  "talk",
  "taobao",
  "target",
  "tatamotors",
  "tatar",
  "tattoo",
  "tax",
  "taxi",
  "tc",
  "tci",
  "td",
  "tdk",
  "team",
  "tech",
  "technology",
  "tel",
  "temasek",
  "tennis",
  "teva",
  "tf",
  "tg",
  "th",
  "thd",
  "theater",
  "theatre",
  "tiaa",
  "tickets",
  "tienda",
  "tips",
  "tires",
  "tirol",
  "tj",
  "tjmaxx",
  "tjx",
  "tk",
  "tkmaxx",
  "tl",
  "tm",
  "tmall",
  "tn",
  "to",
  "today",
  "tokyo",
  "tools",
  "top",
  "toray",
  "toshiba",
  "total",
  "tours",
  "town",
  "toyota",
  "toys",
  "tr",
  "trade",
  "trading",
  "training",
  "travel",
  "travelers",
  "travelersinsurance",
  "trust",
  "trv",
  "tt",
  "tube",
  "tui",
  "tunes",
  "tushu",
  "tv",
  "tvs",
  "tw",
  "tz",
  "ua",
  "ubank",
  "ubs",
  "ug",
  "uk",
  "unicom",
  "university",
  "uno",
  "uol",
  "ups",
  "us",
  "uy",
  "uz",
  "va",
  "vacations",
  "vana",
  "vanguard",
  "vc",
  "ve",
  "vegas",
  "ventures",
  "verisign",
  "vermögensberater",
  "vermögensberatung",
  "versicherung",
  "vet",
  "vg",
  "vi",
  "viajes",
  "video",
  "vig",
  "viking",
  "villas",
  "vin",
  "vip",
  "virgin",
  "visa",
  "vision",
  "viva",
  "vivo",
  "vlaanderen",
  "vn",
  "vodka",
  "volvo",
  "vote",
  "voting",
  "voto",
  "voyage",
  "vu",
  "wales",
  "walmart",
  "walter",
  "wang",
  "wanggou",
  "watch",
  "watches",
  "weather",
  "weatherchannel",
  "webcam",
  "weber",
  "website",
  "wed",
  "wedding",
  "weibo",
  "weir",
  "wf",
  "whoswho",
  "wien",
  "wiki",
  "williamhill",
  "win",
  "windows",
  "wine",
  "winners",
  "wme",
  "wolterskluwer",
  "woodside",
  "work",
  "works",
  "world",
  "wow",
  "ws",
  "wtc",
  "wtf",
  "xbox",
  "xerox",
  "xihuan",
  "xin",
  "xxx",
  "xyz",
  "yachts",
  "yahoo",
  "yamaxun",
  "yandex",
  "ye",
  "yodobashi",
  "yoga",
  "yokohama",
  "you",
  "youtube",
  "yt",
  "yun",
  "za",
  "zappos",
  "zara",
  "zero",
  "zip",
  "zm",
  "zone",
  "zuerich",
  "zw",
  "ελ",
  "ευ",
  "бг",
  "бел",
  "дети",
  "ею",
  "католик",
  "ком",
  "мкд",
  "мон",
  "москва",
  "онлайн",
  "орг",
  "рус",
  "рф",
  "сайт",
  "срб",
  "укр",
  "қаз",
  "հայ",
  "ישראל",
  "קום",
  "ابوظبي",
  "ارامكو",
  "الاردن",
  "البحرين",
  "الجزائر",
  "السعودية",
  "العليان",
  "المغرب",
  "امارات",
  "ایران",
  "بارت",
  "بازار",
  "بيتك",
  "بھارت",
  "تونس",
  "سودان",
  "سورية",
  "شبكة",
  "عراق",
  "عرب",
  "عمان",
  "فلسطين",
  "قطر",
  "كاثوليك",
  "كوم",
  "مصر",
  "مليسيا",
  "موريتانيا",
  "موقع",
  "همراه",
  "پاکستان",
  "ڀارت",
  "कॉम",
  "नेट",
  "भारत",
  "भारतम्",
  "भारोत",
  "संगठन",
  "বাংলা",
  "ভারত",
  "ভাৰত",
  "ਭਾਰਤ",
  "ભારત",
  "ଭାରତ",
  "இந்தியா",
  "இலங்கை",
  "சிங்கப்பூர்",
  "భారత్",
  "ಭಾರತ",
  "ഭാരതം",
  "ලංකා",
  "คอม",
  "ไทย",
  "ລາວ",
  "გე",
  "みんな",
  "アマゾン",
  "クラウド",
  "グーグル",
  "コム",
  "ストア",
  "セール",
  "ファッション",
  "ポイント",
  "世界",
  "中信",
  "中国",
  "中國",
  "中文网",
  "亚马逊",
  "企业",
  "佛山",
  "信息",
  "健康",
  "八卦",
  "公司",
  "公益",
  "台湾",
  "台灣",
  "商城",
  "商店",
  "商标",
  "嘉里",
  "嘉里大酒店",
  "在线",
  "大拿",
  "天主教",
  "娱乐",
  "家電",
  "广东",
  "微博",
  "慈善",
  "我爱你",
  "手机",
  "招聘",
  "政务",
  "政府",
  "新加坡",
  "新闻",
  "时尚",
  "書籍",
  "机构",
  "淡马锡",
  "游戏",
  "澳門",
  "点看",
  "移动",
  "组织机构",
  "网址",
  "网店",
  "网站",
  "网络",
  "联通",
  "谷歌",
  "购物",
  "通販",
  "集团",
  "電訊盈科",
  "飞利浦",
  "食品",
  "餐厅",
  "香格里拉",
  "香港",
  "닷넷",
  "닷컴",
  "삼성",
  "한국"
];
var ft = {};
Object.defineProperty(ft, "__esModule", { value: !0 });
ft.TAG_REGEX = ft.TRAILING_PUNCTUATION_REGEX = ft.URL_REGEX = ft.MENTION_REGEX = void 0;
ft.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
ft.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
ft.TRAILING_PUNCTUATION_REGEX = new RegExp("\\p{P}+$", "gu");
ft.TAG_REGEX = // eslint-disable-next-line no-misleading-character-class
/(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;
var hk = L && L.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
};
Object.defineProperty(ku, "__esModule", { value: !0 });
ku.detectFacets = gk;
const Ek = hk(bk), fs = ft;
function gk(t) {
  var n;
  let e;
  const r = [];
  {
    const s = fs.MENTION_REGEX;
    for (; e = s.exec(t.utf16); ) {
      if (!jc(e[3]) && !e[3].endsWith(".test"))
        continue;
      const u = t.utf16.indexOf(e[3], e.index) - 1;
      r.push({
        $type: "app.bsky.richtext.facet",
        index: {
          byteStart: t.utf16IndexToUtf8Index(u),
          byteEnd: t.utf16IndexToUtf8Index(u + e[3].length + 1)
        },
        features: [
          {
            $type: "app.bsky.richtext.facet#mention",
            did: e[3]
            // must be resolved afterwards
          }
        ]
      });
    }
  }
  {
    const s = fs.URL_REGEX;
    for (; e = s.exec(t.utf16); ) {
      let u = e[2];
      if (!u.startsWith("http")) {
        const f = (n = e.groups) == null ? void 0 : n.domain;
        if (!f || !jc(f))
          continue;
        u = `https://${u}`;
      }
      const c = t.utf16.indexOf(e[2], e.index), l = { start: c, end: c + e[2].length };
      /[.,;:!?]$/.test(u) && (u = u.slice(0, -1), l.end--), /[)]$/.test(u) && !u.includes("(") && (u = u.slice(0, -1), l.end--), r.push({
        index: {
          byteStart: t.utf16IndexToUtf8Index(l.start),
          byteEnd: t.utf16IndexToUtf8Index(l.end)
        },
        features: [
          {
            $type: "app.bsky.richtext.facet#link",
            uri: u
          }
        ]
      });
    }
  }
  {
    const s = fs.TAG_REGEX;
    for (; e = s.exec(t.utf16); ) {
      const u = e[1];
      let c = e[2];
      if (!c || (c = c.trim().replace(fs.TRAILING_PUNCTUATION_REGEX, ""), c.length === 0 || c.length > 64))
        continue;
      const l = e.index + u.length;
      r.push({
        index: {
          byteStart: t.utf16IndexToUtf8Index(l),
          byteEnd: t.utf16IndexToUtf8Index(l + 1 + c.length)
        },
        features: [
          {
            $type: "app.bsky.richtext.facet#tag",
            tag: c
          }
        ]
      });
    }
  }
  return r.length > 0 ? r : void 0;
}
function jc(t) {
  return !!Ek.default.find((e) => {
    const r = t.lastIndexOf(e);
    return r === -1 ? !1 : t.charAt(r - 1) === "." && r === t.length - e.length;
  });
}
Object.defineProperty(hi, "__esModule", { value: !0 });
hi.RichText = hi.RichTextSegment = void 0;
const Fr = o, ka = an, xk = oa, Vc = ku;
class ci {
  constructor(e, r) {
    Object.defineProperty(this, "text", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: e
    }), Object.defineProperty(this, "facet", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: r
    });
  }
  get link() {
    var r;
    const e = (r = this.facet) == null ? void 0 : r.features.find(Fr.AppBskyRichtextFacet.isLink);
    if (Fr.AppBskyRichtextFacet.isLink(e))
      return e;
  }
  isLink() {
    return !!this.link;
  }
  get mention() {
    var r;
    const e = (r = this.facet) == null ? void 0 : r.features.find(Fr.AppBskyRichtextFacet.isMention);
    if (Fr.AppBskyRichtextFacet.isMention(e))
      return e;
  }
  isMention() {
    return !!this.mention;
  }
  get tag() {
    var r;
    const e = (r = this.facet) == null ? void 0 : r.features.find(Fr.AppBskyRichtextFacet.isTag);
    if (Fr.AppBskyRichtextFacet.isTag(e))
      return e;
  }
  isTag() {
    return !!this.tag;
  }
}
hi.RichTextSegment = ci;
class Bu {
  constructor(e, r) {
    var n, s;
    Object.defineProperty(this, "unicodeText", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "facets", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.unicodeText = new ka.UnicodeString(e.text), this.facets = e.facets, !((n = this.facets) != null && n.length) && ((s = e.entities) != null && s.length) && (this.facets = Ak(this.unicodeText, e.entities)), this.facets && (this.facets = this.facets.filter(Rk).sort(Ba)), r != null && r.cleanNewlines && (0, xk.sanitizeRichText)(this, { cleanNewlines: !0 }).copyInto(this);
  }
  get text() {
    return this.unicodeText.toString();
  }
  get length() {
    return this.unicodeText.length;
  }
  get graphemeLength() {
    return this.unicodeText.graphemeLength;
  }
  clone() {
    return new Bu({
      text: this.unicodeText.utf16,
      facets: Oc(this.facets)
    });
  }
  copyInto(e) {
    e.unicodeText = this.unicodeText, e.facets = Oc(this.facets);
  }
  *segments() {
    const e = this.facets || [];
    if (!e.length) {
      yield new ci(this.unicodeText.utf16);
      return;
    }
    let r = 0, n = 0;
    do {
      const s = e[n];
      if (r < s.index.byteStart)
        yield new ci(this.unicodeText.slice(r, s.index.byteStart));
      else if (r > s.index.byteStart) {
        n++;
        continue;
      }
      if (s.index.byteStart < s.index.byteEnd) {
        const u = this.unicodeText.slice(s.index.byteStart, s.index.byteEnd);
        u.trim() ? yield new ci(u, s) : yield new ci(u);
      }
      r = s.index.byteEnd, n++;
    } while (n < e.length);
    r < this.unicodeText.length && (yield new ci(this.unicodeText.slice(r, this.unicodeText.length)));
  }
  insert(e, r) {
    var s;
    if (this.unicodeText = new ka.UnicodeString(this.unicodeText.slice(0, e) + r + this.unicodeText.slice(e)), !((s = this.facets) != null && s.length))
      return this;
    const n = r.length;
    for (const u of this.facets)
      e <= u.index.byteStart ? (u.index.byteStart += n, u.index.byteEnd += n) : e >= u.index.byteStart && e < u.index.byteEnd && (u.index.byteEnd += n);
    return this;
  }
  delete(e, r) {
    var s;
    if (this.unicodeText = new ka.UnicodeString(this.unicodeText.slice(0, e) + this.unicodeText.slice(r)), !((s = this.facets) != null && s.length))
      return this;
    const n = r - e;
    for (const u of this.facets)
      e <= u.index.byteStart && r >= u.index.byteEnd ? (u.index.byteStart = 0, u.index.byteEnd = 0) : e > u.index.byteEnd || (e > u.index.byteStart && e <= u.index.byteEnd && r > u.index.byteEnd ? u.index.byteEnd = e : e >= u.index.byteStart && r <= u.index.byteEnd ? u.index.byteEnd -= n : e < u.index.byteStart && r >= u.index.byteStart && r <= u.index.byteEnd ? (u.index.byteStart = e, u.index.byteEnd -= n) : r < u.index.byteStart && (u.index.byteStart -= n, u.index.byteEnd -= n));
    return this.facets = this.facets.filter((u) => u.index.byteStart < u.index.byteEnd), this;
  }
  /**
   * Detects facets such as links and mentions
   * Note: Overwrites the existing facets with auto-detected facets
   */
  async detectFacets(e) {
    if (this.facets = (0, Vc.detectFacets)(this.unicodeText), this.facets) {
      const r = [];
      for (const n of this.facets)
        for (const s of n.features)
          Fr.AppBskyRichtextFacet.isMention(s) && r.push(e.com.atproto.identity.resolveHandle({ handle: s.did }).then((u) => u == null ? void 0 : u.data.did).catch((u) => {
          }).then((u) => {
            s.did = u || "";
          }));
      await Promise.allSettled(r), this.facets.sort(Ba);
    }
  }
  /**
   * Detects facets such as links and mentions but does not resolve them
   * Will produce invalid facets! For instance, mentions will not have their DIDs set.
   * Note: Overwrites the existing facets with auto-detected facets
   */
  detectFacetsWithoutResolution() {
    this.facets = (0, Vc.detectFacets)(this.unicodeText), this.facets && this.facets.sort(Ba);
  }
}
hi.RichText = Bu;
const Ba = (t, e) => t.index.byteStart - e.index.byteStart, Rk = (t) => (
  // discard negative-length facets. zero-length facets are valid
  t.index.byteStart <= t.index.byteEnd
);
function Ak(t, e) {
  const r = [];
  for (const n of e)
    n.type === "link" ? r.push({
      $type: "app.bsky.richtext.facet",
      index: {
        byteStart: t.utf16IndexToUtf8Index(n.index.start),
        byteEnd: t.utf16IndexToUtf8Index(n.index.end)
      },
      features: [{ $type: "app.bsky.richtext.facet#link", uri: n.value }]
    }) : n.type === "mention" && r.push({
      $type: "app.bsky.richtext.facet",
      index: {
        byteStart: t.utf16IndexToUtf8Index(n.index.start),
        byteEnd: t.utf16IndexToUtf8Index(n.index.end)
      },
      features: [
        { $type: "app.bsky.richtext.facet#mention", did: n.value }
      ]
    });
  return r;
}
function Oc(t) {
  return typeof t > "u" ? t : JSON.parse(JSON.stringify(t));
}
var Du = {}, jr = {}, yt = {}, je = {};
Object.defineProperty(je, "__esModule", { value: !0 });
je.NOOP_BEHAVIOR = je.HIDE_BEHAVIOR = je.MUTEWORD_BEHAVIOR = je.MUTE_BEHAVIOR = je.BLOCK_BEHAVIOR = je.CUSTOM_LABEL_VALUE_RE = void 0;
je.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
je.BLOCK_BEHAVIOR = {
  profileList: "blur",
  profileView: "alert",
  avatar: "blur",
  banner: "blur",
  contentList: "blur",
  contentView: "blur"
};
je.MUTE_BEHAVIOR = {
  profileList: "inform",
  profileView: "alert",
  contentList: "blur",
  contentView: "inform"
};
je.MUTEWORD_BEHAVIOR = {
  contentList: "blur",
  contentView: "blur"
};
je.HIDE_BEHAVIOR = {
  contentList: "blur",
  contentView: "blur"
};
je.NOOP_BEHAVIOR = {};
var Xn = {};
Object.defineProperty(Xn, "__esModule", { value: !0 });
Xn.ModerationUI = void 0;
class vk {
  constructor() {
    Object.defineProperty(this, "noOverride", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: !1
    }), Object.defineProperty(this, "filters", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: []
    }), Object.defineProperty(this, "blurs", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: []
    }), Object.defineProperty(this, "alerts", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: []
    }), Object.defineProperty(this, "informs", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: []
    });
  }
  get filter() {
    return this.filters.length !== 0;
  }
  get blur() {
    return this.blurs.length !== 0;
  }
  get alert() {
    return this.alerts.length !== 0;
  }
  get inform() {
    return this.informs.length !== 0;
  }
}
Xn.ModerationUI = vk;
var _r = {};
Object.defineProperty(_r, "__esModule", { value: !0 });
_r.LABELS = _r.DEFAULT_LABEL_SETTINGS = void 0;
_r.DEFAULT_LABEL_SETTINGS = {
  porn: "hide",
  sexual: "warn",
  nudity: "ignore",
  "graphic-media": "warn"
};
_r.LABELS = {
  "!hide": {
    identifier: "!hide",
    configurable: !1,
    defaultSetting: "hide",
    flags: ["no-override", "no-self"],
    severity: "alert",
    blurs: "content",
    behaviors: {
      account: {
        profileList: "blur",
        profileView: "blur",
        avatar: "blur",
        banner: "blur",
        displayName: "blur",
        contentList: "blur",
        contentView: "blur"
      },
      profile: {
        avatar: "blur",
        banner: "blur",
        displayName: "blur"
      },
      content: {
        contentList: "blur",
        contentView: "blur"
      }
    },
    locales: []
  },
  "!warn": {
    identifier: "!warn",
    configurable: !1,
    defaultSetting: "warn",
    flags: ["no-self"],
    severity: "none",
    blurs: "content",
    behaviors: {
      account: {
        profileList: "blur",
        profileView: "blur",
        avatar: "blur",
        banner: "blur",
        contentList: "blur",
        contentView: "blur"
      },
      profile: {
        avatar: "blur",
        banner: "blur",
        displayName: "blur"
      },
      content: {
        contentList: "blur",
        contentView: "blur"
      }
    },
    locales: []
  },
  "!no-unauthenticated": {
    identifier: "!no-unauthenticated",
    configurable: !1,
    defaultSetting: "hide",
    flags: ["no-override", "unauthed"],
    severity: "none",
    blurs: "content",
    behaviors: {
      account: {
        profileList: "blur",
        profileView: "blur",
        avatar: "blur",
        banner: "blur",
        displayName: "blur",
        contentList: "blur",
        contentView: "blur"
      },
      profile: {
        avatar: "blur",
        banner: "blur",
        displayName: "blur"
      },
      content: {
        contentList: "blur",
        contentView: "blur"
      }
    },
    locales: []
  },
  porn: {
    identifier: "porn",
    configurable: !0,
    defaultSetting: "hide",
    flags: ["adult"],
    severity: "none",
    blurs: "media",
    behaviors: {
      account: {
        avatar: "blur",
        banner: "blur"
      },
      profile: {
        avatar: "blur",
        banner: "blur"
      },
      content: {
        contentMedia: "blur"
      }
    },
    locales: []
  },
  sexual: {
    identifier: "sexual",
    configurable: !0,
    defaultSetting: "warn",
    flags: ["adult"],
    severity: "none",
    blurs: "media",
    behaviors: {
      account: {
        avatar: "blur",
        banner: "blur"
      },
      profile: {
        avatar: "blur",
        banner: "blur"
      },
      content: {
        contentMedia: "blur"
      }
    },
    locales: []
  },
  nudity: {
    identifier: "nudity",
    configurable: !0,
    defaultSetting: "ignore",
    flags: [],
    severity: "none",
    blurs: "media",
    behaviors: {
      account: {
        avatar: "blur",
        banner: "blur"
      },
      profile: {
        avatar: "blur",
        banner: "blur"
      },
      content: {
        contentMedia: "blur"
      }
    },
    locales: []
  },
  "graphic-media": {
    identifier: "graphic-media",
    flags: ["adult"],
    configurable: !0,
    defaultSetting: "warn",
    severity: "none",
    blurs: "media",
    behaviors: {
      account: {
        avatar: "blur",
        banner: "blur"
      },
      profile: {
        avatar: "blur",
        banner: "blur"
      },
      content: {
        contentMedia: "blur"
      }
    },
    locales: []
  }
};
Object.defineProperty(yt, "__esModule", { value: !0 });
yt.ModerationDecision = void 0;
const Oe = je, Tk = Xn, Ic = _r;
var fr;
(function(t) {
  t[t.High = 0] = "High", t[t.Medium = 1] = "Medium", t[t.Low = 2] = "Low";
})(fr || (fr = {}));
class Pu {
  constructor() {
    Object.defineProperty(this, "did", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: ""
    }), Object.defineProperty(this, "isMe", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: !1
    }), Object.defineProperty(this, "causes", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: []
    });
  }
  static merge(...e) {
    const r = e.filter((s) => !!s), n = new Pu();
    return r[0] && (n.did = r[0].did, n.isMe = r[0].isMe), n.causes = r.flatMap((s) => s.causes), n;
  }
  downgrade() {
    for (const e of this.causes)
      e.downgraded = !0;
    return this;
  }
  get blocked() {
    return !!this.blockCause;
  }
  get muted() {
    return !!this.muteCause;
  }
  get blockCause() {
    return this.causes.find((e) => e.type === "blocking" || e.type === "blocked-by" || e.type === "block-other");
  }
  get muteCause() {
    return this.causes.find((e) => e.type === "muted");
  }
  get labelCauses() {
    return this.causes.filter((e) => e.type === "label");
  }
  ui(e) {
    const r = new Tk.ModerationUI();
    for (const n of this.causes)
      if (n.type === "blocking" || n.type === "blocked-by" || n.type === "block-other") {
        if (this.isMe)
          continue;
        (e === "profileList" || e === "contentList") && r.filters.push(n), n.downgraded || (Oe.BLOCK_BEHAVIOR[e] === "blur" ? (r.noOverride = !0, r.blurs.push(n)) : Oe.BLOCK_BEHAVIOR[e] === "alert" ? r.alerts.push(n) : Oe.BLOCK_BEHAVIOR[e] === "inform" && r.informs.push(n));
      } else if (n.type === "muted") {
        if (this.isMe)
          continue;
        (e === "profileList" || e === "contentList") && r.filters.push(n), n.downgraded || (Oe.MUTE_BEHAVIOR[e] === "blur" ? r.blurs.push(n) : Oe.MUTE_BEHAVIOR[e] === "alert" ? r.alerts.push(n) : Oe.MUTE_BEHAVIOR[e] === "inform" && r.informs.push(n));
      } else if (n.type === "mute-word") {
        if (this.isMe)
          continue;
        e === "contentList" && r.filters.push(n), n.downgraded || (Oe.MUTEWORD_BEHAVIOR[e] === "blur" ? r.blurs.push(n) : Oe.MUTEWORD_BEHAVIOR[e] === "alert" ? r.alerts.push(n) : Oe.MUTEWORD_BEHAVIOR[e] === "inform" && r.informs.push(n));
      } else n.type === "hidden" ? ((e === "profileList" || e === "contentList") && r.filters.push(n), n.downgraded || (Oe.HIDE_BEHAVIOR[e] === "blur" ? r.blurs.push(n) : Oe.HIDE_BEHAVIOR[e] === "alert" ? r.alerts.push(n) : Oe.HIDE_BEHAVIOR[e] === "inform" && r.informs.push(n))) : n.type === "label" && (e === "profileList" && n.target === "account" ? n.setting === "hide" && !this.isMe && r.filters.push(n) : e === "contentList" && (n.target === "account" || n.target === "content") && n.setting === "hide" && !this.isMe && r.filters.push(n), n.downgraded || (n.behavior[e] === "blur" ? (r.blurs.push(n), n.noOverride && !this.isMe && (r.noOverride = !0)) : n.behavior[e] === "alert" ? r.alerts.push(n) : n.behavior[e] === "inform" && r.informs.push(n)));
    return r.filters.sort(Nc), r.blurs.sort(Nc), r;
  }
  setDid(e) {
    this.did = e;
  }
  setIsMe(e) {
    this.isMe = e;
  }
  addHidden(e) {
    e && this.causes.push({
      type: "hidden",
      source: { type: "user" },
      priority: 6
    });
  }
  addMutedWord(e) {
    e && this.causes.push({
      type: "mute-word",
      source: { type: "user" },
      priority: 6
    });
  }
  addBlocking(e) {
    e && this.causes.push({
      type: "blocking",
      source: { type: "user" },
      priority: 3
    });
  }
  addBlockingByList(e) {
    e && this.causes.push({
      type: "blocking",
      source: { type: "list", list: e },
      priority: 3
    });
  }
  addBlockedBy(e) {
    e && this.causes.push({
      type: "blocked-by",
      source: { type: "user" },
      priority: 4
    });
  }
  addBlockOther(e) {
    e && this.causes.push({
      type: "block-other",
      source: { type: "user" },
      priority: 4
    });
  }
  addLabel(e, r, n) {
    var A, E;
    const s = Oe.CUSTOM_LABEL_VALUE_RE.test(r.val) && ((E = (A = n.labelDefs) == null ? void 0 : A[r.src]) == null ? void 0 : E.find((v) => v.identifier === r.val)) || Ic.LABELS[r.val];
    if (!s)
      return;
    const u = r.src === this.did, c = u ? void 0 : n.prefs.labelers.find((v) => v.did === r.src);
    if (!u && !c || u && s.flags.includes("no-self"))
      return;
    let l = s.defaultSetting || "ignore";
    if (s.configurable ? s.flags.includes("adult") && !n.prefs.adultContentEnabled ? l = "hide" : c != null && c.labels[s.identifier] ? l = c == null ? void 0 : c.labels[s.identifier] : n.prefs.labels[s.identifier] && (l = n.prefs.labels[s.identifier]) : l = s.defaultSetting || "hide", l === "ignore" || s.flags.includes("unauthed") && n.userDid)
      return;
    let f;
    const p = _k(s.behaviors[e]);
    s.flags.includes("no-override") || s.flags.includes("adult") && !n.prefs.adultContentEnabled ? f = 1 : l === "hide" ? f = 2 : p === fr.High ? f = 5 : p === fr.Medium ? f = 7 : f = 8;
    let m = !1;
    (s.flags.includes("no-override") || s.flags.includes("adult") && !n.prefs.adultContentEnabled) && (m = !0), this.causes.push({
      type: "label",
      source: u || !c ? { type: "user" } : { type: "labeler", did: c.did },
      label: r,
      labelDef: s,
      target: e,
      setting: l,
      behavior: s.behaviors[e] || Oe.NOOP_BEHAVIOR,
      noOverride: m,
      priority: f
    });
  }
  addMuted(e) {
    e && this.causes.push({
      type: "muted",
      source: { type: "user" },
      priority: 6
    });
  }
  addMutedByList(e) {
    e && this.causes.push({
      type: "muted",
      source: { type: "list", list: e },
      priority: 6
    });
  }
}
yt.ModerationDecision = Pu;
function _k(t) {
  return t ? t.profileView === "blur" || t.contentView === "blur" ? fr.High : t.contentList === "blur" || t.contentMedia === "blur" ? fr.Medium : fr.Low : fr.Low;
}
function Nc(t, e) {
  return t.priority - e.priority;
}
Object.defineProperty(jr, "__esModule", { value: !0 });
jr.decideAccount = wk;
jr.filterAccountLabels = sm;
const Ck = yt;
function wk(t, e) {
  var n, s, u, c, l, f, p, m, A;
  const r = new Ck.ModerationDecision();
  r.setDid(t.did), r.setIsMe(t.did === e.userDid), (n = t.viewer) != null && n.muted && ((s = t.viewer) != null && s.mutedByList ? r.addMutedByList((u = t.viewer) == null ? void 0 : u.mutedByList) : r.addMuted((c = t.viewer) == null ? void 0 : c.muted)), (l = t.viewer) != null && l.blocking && ((f = t.viewer) != null && f.blockingByList ? r.addBlockingByList((p = t.viewer) == null ? void 0 : p.blockingByList) : r.addBlocking((m = t.viewer) == null ? void 0 : m.blocking)), r.addBlockedBy((A = t.viewer) == null ? void 0 : A.blockedBy);
  for (const E of sm(t.labels))
    r.addLabel("account", E, e);
  return r;
}
function sm(t) {
  return t ? t.filter((e) => !e.uri.endsWith("/app.bsky.actor.profile/self") || e.val === "!no-unauthenticated") : [];
}
var Vr = {};
Object.defineProperty(Vr, "__esModule", { value: !0 });
Vr.decideProfile = Lk;
Vr.filterProfileLabels = am;
const Sk = yt;
function Lk(t, e) {
  const r = new Sk.ModerationDecision();
  r.setDid(t.did), r.setIsMe(t.did === e.userDid);
  for (const n of am(t.labels))
    r.addLabel("profile", n, e);
  return r;
}
function am(t) {
  return t ? t.filter((e) => e.uri.endsWith("/app.bsky.actor.profile/self")) : [];
}
var Uu = {};
Object.defineProperty(Uu, "__esModule", { value: !0 });
Uu.decideNotification = Dk;
const Mc = yt, kk = jr, Bk = Vr;
function Dk(t, e) {
  var n;
  const r = new Mc.ModerationDecision();
  if (r.setDid(t.author.did), r.setIsMe(t.author.did === e.userDid), (n = t.labels) != null && n.length)
    for (const s of t.labels)
      r.addLabel("content", s, e);
  return Mc.ModerationDecision.merge(r, (0, kk.decideAccount)(t.author, e), (0, Bk.decideProfile)(t.author, e));
}
var Ku = {}, la = {};
Object.defineProperty(la, "__esModule", { value: !0 });
la.hasMutedWord = Kk;
const Pk = o, $c = {
  LEADING_TRAILING_PUNCTUATION: new RegExp("(?:^\\p{P}+|\\p{P}+$)", "gu"),
  ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
  SEPARATORS: /[/\-–—()[\]_]+/g,
  WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
}, Uk = [
  "ja",
  // Japanese
  "zh",
  // Chinese
  "ko",
  // Korean
  "th",
  // Thai
  "vi"
  // Vietnamese
];
function Kk({ mutedWords: t, text: e, facets: r, outlineTags: n, languages: s, actor: u }) {
  var f;
  const c = Uk.includes((s == null ? void 0 : s[0]) || ""), l = [].concat(n || []).concat((r || []).flatMap((p) => p.features.filter(Pk.AppBskyRichtextFacet.isTag).map((m) => m.tag))).map((p) => p.toLowerCase());
  for (const p of t) {
    const m = p.value.toLowerCase(), A = e.toLowerCase();
    if (p.expiresAt && p.expiresAt < (/* @__PURE__ */ new Date()).toISOString() || p.actorTarget === "exclude-following" && ((f = u == null ? void 0 : u.viewer) != null && f.following))
      continue;
    if (l.includes(m))
      return !0;
    if (!p.targets.includes("content"))
      continue;
    if ((m.length === 1 || c) && A.includes(m))
      return !0;
    if (m.length > A.length)
      continue;
    if (m === A || new RegExp("(?:\\s|\\p{P})+?", "u").test(m) && A.includes(m))
      return !0;
    const E = A.split($c.WORD_BOUNDARY);
    for (const v of E) {
      if (v === m)
        return !0;
      const k = v.replace($c.LEADING_TRAILING_PUNCTUATION, "");
      if (m === k)
        return !0;
      if (!(m.length > k.length) && new RegExp("\\p{P}+", "u").test(k)) {
        const P = k.replace(new RegExp("\\p{P}+", "gu"), " ");
        if (P === m || P.replace(/\s/gu, "") === m)
          return !0;
        const C = k.split(new RegExp("\\p{P}+", "u"));
        for (const T of C)
          if (T === m)
            return !0;
      }
    }
  }
  return !1;
}
Object.defineProperty(Ku, "__esModule", { value: !0 });
Ku.decidePost = jk;
const Tn = yt, ue = o, pt = la, om = jr, lm = Vr;
function jk(t, e) {
  var s;
  const r = new Tn.ModerationDecision();
  if (r.setDid(t.author.did), r.setIsMe(t.author.did === e.userDid), (s = t.labels) != null && s.length)
    for (const u of t.labels)
      r.addLabel("content", u, e);
  r.addHidden(Vk(t, e.prefs.hiddenPosts)), r.isMe || r.addMutedWord(Ok(t, e.prefs.mutedWords));
  let n;
  return t.embed && (ue.AppBskyEmbedRecord.isViewRecord(t.embed.record) ? n = qc(t.embed.record, e) : ue.AppBskyEmbedRecordWithMedia.isView(t.embed) && ue.AppBskyEmbedRecord.isViewRecord(t.embed.record.record) ? n = qc(t.embed.record.record, e) : ue.AppBskyEmbedRecord.isViewBlocked(t.embed.record) ? n = Gc(t.embed.record, e) : ue.AppBskyEmbedRecordWithMedia.isView(t.embed) && ue.AppBskyEmbedRecord.isViewBlocked(t.embed.record.record) && (n = Gc(t.embed.record.record, e))), Tn.ModerationDecision.merge(r, n == null ? void 0 : n.downgrade(), (0, om.decideAccount)(t.author, e), (0, lm.decideProfile)(t.author, e));
}
function qc(t, e) {
  var n;
  const r = new Tn.ModerationDecision();
  if (r.setDid(t.author.did), r.setIsMe(t.author.did === e.userDid), (n = t.labels) != null && n.length)
    for (const s of t.labels)
      r.addLabel("content", s, e);
  return Tn.ModerationDecision.merge(r, (0, om.decideAccount)(t.author, e), (0, lm.decideProfile)(t.author, e));
}
function Gc(t, e) {
  var n, s, u, c, l, f, p, m, A;
  const r = new Tn.ModerationDecision();
  return r.setDid(t.author.did), r.setIsMe(t.author.did === e.userDid), (n = t.author.viewer) != null && n.muted && ((s = t.author.viewer) != null && s.mutedByList ? r.addMutedByList((u = t.author.viewer) == null ? void 0 : u.mutedByList) : r.addMuted((c = t.author.viewer) == null ? void 0 : c.muted)), (l = t.author.viewer) != null && l.blocking && ((f = t.author.viewer) != null && f.blockingByList ? r.addBlockingByList((p = t.author.viewer) == null ? void 0 : p.blockingByList) : r.addBlocking((m = t.author.viewer) == null ? void 0 : m.blocking)), r.addBlockedBy((A = t.author.viewer) == null ? void 0 : A.blockedBy), r;
}
function Vk(t, e) {
  return e != null && e.length ? !!(e.includes(t.uri) || t.embed && (ue.AppBskyEmbedRecord.isViewRecord(t.embed.record) && e.includes(t.embed.record.uri) || ue.AppBskyEmbedRecordWithMedia.isView(t.embed) && ue.AppBskyEmbedRecord.isViewRecord(t.embed.record.record) && e.includes(t.embed.record.record.uri))) : !1;
}
function Ok(t, e) {
  if (!(e != null && e.length))
    return !1;
  const r = t.author;
  if (ue.AppBskyFeedPost.isRecord(t.record)) {
    if ((0, pt.hasMutedWord)({
      mutedWords: e,
      text: t.record.text,
      facets: t.record.facets,
      outlineTags: t.record.tags,
      languages: t.record.langs,
      actor: r
    }))
      return !0;
    if (t.record.embed && ue.AppBskyEmbedImages.isMain(t.record.embed)) {
      for (const n of t.record.embed.images)
        if ((0, pt.hasMutedWord)({
          mutedWords: e,
          text: n.alt,
          languages: t.record.langs,
          actor: r
        }))
          return !0;
    }
  }
  if (t.embed) {
    if (ue.AppBskyEmbedRecord.isViewRecord(t.embed.record)) {
      if (ue.AppBskyFeedPost.isRecord(t.embed.record.value)) {
        const n = t.embed.record.value, s = t.embed.record.author;
        if ((0, pt.hasMutedWord)({
          mutedWords: e,
          text: n.text,
          facets: n.facets,
          outlineTags: n.tags,
          languages: n.langs,
          actor: s
        }))
          return !0;
        if (ue.AppBskyEmbedImages.isMain(n.embed)) {
          for (const u of n.embed.images)
            if ((0, pt.hasMutedWord)({
              mutedWords: e,
              text: u.alt,
              languages: n.langs,
              actor: s
            }))
              return !0;
        }
        if (ue.AppBskyEmbedExternal.isMain(n.embed)) {
          const { external: u } = n.embed;
          if ((0, pt.hasMutedWord)({
            mutedWords: e,
            text: u.title + " " + u.description,
            languages: [],
            actor: s
          }))
            return !0;
        }
        if (ue.AppBskyEmbedRecordWithMedia.isMain(n.embed)) {
          if (ue.AppBskyEmbedExternal.isMain(n.embed.media)) {
            const { external: u } = n.embed.media;
            if ((0, pt.hasMutedWord)({
              mutedWords: e,
              text: u.title + " " + u.description,
              languages: [],
              actor: s
            }))
              return !0;
          }
          if (ue.AppBskyEmbedImages.isMain(n.embed.media)) {
            for (const u of n.embed.media.images)
              if ((0, pt.hasMutedWord)({
                mutedWords: e,
                text: u.alt,
                languages: ue.AppBskyFeedPost.isRecord(n.record) ? n.langs : [],
                actor: s
              }))
                return !0;
          }
        }
      }
    } else if (ue.AppBskyEmbedExternal.isView(t.embed)) {
      const { external: n } = t.embed;
      if ((0, pt.hasMutedWord)({
        mutedWords: e,
        text: n.title + " " + n.description,
        languages: [],
        actor: r
      }))
        return !0;
    } else if (ue.AppBskyEmbedRecordWithMedia.isView(t.embed) && ue.AppBskyEmbedRecord.isViewRecord(t.embed.record.record)) {
      const n = t.embed.record.record.author;
      if (ue.AppBskyFeedPost.isRecord(t.embed.record.record.value)) {
        const s = t.embed.record.record.value;
        if ((0, pt.hasMutedWord)({
          mutedWords: e,
          text: s.text,
          facets: s.facets,
          outlineTags: s.tags,
          languages: s.langs,
          actor: n
        }))
          return !0;
      }
      if (ue.AppBskyEmbedImages.isView(t.embed.media)) {
        for (const s of t.embed.media.images)
          if ((0, pt.hasMutedWord)({
            mutedWords: e,
            text: s.alt,
            languages: ue.AppBskyFeedPost.isRecord(t.record) ? t.record.langs : [],
            actor: n
          }))
            return !0;
      }
      if (ue.AppBskyEmbedExternal.isView(t.embed.media)) {
        const { external: s } = t.embed.media;
        if ((0, pt.hasMutedWord)({
          mutedWords: e,
          text: s.title + " " + s.description,
          languages: [],
          actor: n
        }))
          return !0;
      }
    }
  }
  return !1;
}
var ju = {};
Object.defineProperty(ju, "__esModule", { value: !0 });
ju.decideFeedGenerator = Mk;
const zc = yt, Ik = jr, Nk = Vr;
function Mk(t, e) {
  var n;
  const r = new zc.ModerationDecision();
  if (r.setDid(t.creator.did), r.setIsMe(t.creator.did === e.userDid), (n = t.labels) != null && n.length)
    for (const s of t.labels)
      r.addLabel("content", s, e);
  return zc.ModerationDecision.merge(r, (0, Ik.decideAccount)(t.creator, e), (0, Nk.decideProfile)(t.creator, e));
}
var Vu = {};
Object.defineProperty(Vu, "__esModule", { value: !0 });
Vu.decideUserList = zk;
const $k = Jr, Fc = yt, qk = jr, Gk = Vr;
function zk(t, e) {
  var u, c;
  const r = new Fc.ModerationDecision(), n = Fk(t.creator) ? t.creator : void 0;
  if (n) {
    if (r.setDid(n.did), r.setIsMe(n.did === e.userDid), (u = t.labels) != null && u.length)
      for (const l of t.labels)
        r.addLabel("content", l, e);
    return Fc.ModerationDecision.merge(r, (0, qk.decideAccount)(n, e), (0, Gk.decideProfile)(n, e));
  }
  const s = new $k.AtUri(t.uri).hostname;
  if (r.setDid(s), r.setIsMe(s === e.userDid), (c = t.labels) != null && c.length)
    for (const l of t.labels)
      r.addLabel("content", l, e);
  return r;
}
function Fk(t) {
  return t && typeof t == "object" && "did" in t;
}
var on = {};
Object.defineProperty(on, "__esModule", { value: !0 });
on.isQuotedPost = Xk;
on.isQuotedPostWithMedia = Zk;
on.interpretLabelValueDefinition = um;
on.interpretLabelValueDefinitions = Hk;
const Ou = o;
function Xk(t) {
  return !!(t && Ou.AppBskyEmbedRecord.isView(t));
}
function Zk(t) {
  return !!(t && Ou.AppBskyEmbedRecordWithMedia.isView(t));
}
function um(t, e) {
  const r = {
    account: {},
    profile: {},
    content: {}
  }, n = t.severity === "alert" ? "alert" : t.severity === "inform" ? "inform" : void 0;
  t.blurs === "content" ? (r.account.profileList = n, r.account.profileView = n, r.account.contentList = "blur", r.account.contentView = t.adultOnly ? "blur" : n, r.profile.profileList = n, r.profile.profileView = n, r.content.contentList = "blur", r.content.contentView = t.adultOnly ? "blur" : n) : t.blurs === "media" ? (r.account.profileList = n, r.account.profileView = n, r.account.avatar = "blur", r.account.banner = "blur", r.profile.profileList = n, r.profile.profileView = n, r.profile.avatar = "blur", r.profile.banner = "blur", r.content.contentMedia = "blur") : t.blurs === "none" && (r.account.profileList = n, r.account.profileView = n, r.account.contentList = n, r.account.contentView = n, r.profile.profileList = n, r.profile.profileView = n, r.content.contentList = n, r.content.contentView = n);
  let s = "warn";
  (t.defaultSetting === "hide" || t.defaultSetting === "ignore") && (s = t.defaultSetting);
  const u = ["no-self"];
  return t.adultOnly && u.push("adult"), {
    ...t,
    definedBy: e,
    configurable: !0,
    defaultSetting: s,
    flags: u,
    behaviors: r
  };
}
function Hk(t) {
  var e;
  return (((e = t.policies) == null ? void 0 : e.labelValueDefinitions) || []).filter((r) => Ou.ComAtprotoLabelDefs.validateLabelValueDefinition(r).success).map((r) => um(r, t.creator.did));
}
(function(t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.interpretLabelValueDefinitions = t.interpretLabelValueDefinition = t.hasMutedWord = t.ModerationDecision = t.ModerationUI = void 0, t.moderateProfile = E, t.moderatePost = v, t.moderateNotification = k, t.moderateFeedGenerator = P, t.moderateUserList = $;
  const e = jr, r = Vr, n = Uu, s = Ku, u = ju, c = Vu, l = yt;
  var f = Xn;
  Object.defineProperty(t, "ModerationUI", { enumerable: !0, get: function() {
    return f.ModerationUI;
  } });
  var p = yt;
  Object.defineProperty(t, "ModerationDecision", { enumerable: !0, get: function() {
    return p.ModerationDecision;
  } });
  var m = la;
  Object.defineProperty(t, "hasMutedWord", { enumerable: !0, get: function() {
    return m.hasMutedWord;
  } });
  var A = on;
  Object.defineProperty(t, "interpretLabelValueDefinition", { enumerable: !0, get: function() {
    return A.interpretLabelValueDefinition;
  } }), Object.defineProperty(t, "interpretLabelValueDefinitions", { enumerable: !0, get: function() {
    return A.interpretLabelValueDefinitions;
  } });
  function E(C, T) {
    return l.ModerationDecision.merge((0, e.decideAccount)(C, T), (0, r.decideProfile)(C, T));
  }
  function v(C, T) {
    return (0, s.decidePost)(C, T);
  }
  function k(C, T) {
    return (0, n.decideNotification)(C, T);
  }
  function P(C, T) {
    return (0, u.decideFeedGenerator)(C, T);
  }
  function $(C, T) {
    return (0, c.decideUserList)(C, T);
  }
})(Du);
var ua = {};
Object.defineProperty(ua, "__esModule", { value: !0 });
ua.mock = void 0;
const gn = "bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq";
ua.mock = {
  post({ text: t, facets: e, reply: r, embed: n }) {
    return {
      $type: "app.bsky.feed.post",
      text: t,
      facets: e,
      reply: r,
      embed: n,
      langs: ["en"],
      createdAt: (/* @__PURE__ */ new Date()).toISOString()
    };
  },
  postView({ record: t, author: e, embed: r, replyCount: n, repostCount: s, likeCount: u, viewer: c, labels: l }) {
    return {
      $type: "app.bsky.feed.defs#postView",
      uri: `at://${e.did}/app.bsky.feed.post/fake`,
      cid: gn,
      author: e,
      record: t,
      embed: r,
      replyCount: n,
      repostCount: s,
      likeCount: u,
      indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
      viewer: c,
      labels: l
    };
  },
  embedRecordView({ record: t, author: e, labels: r }) {
    return {
      $type: "app.bsky.embed.record#view",
      record: {
        $type: "app.bsky.embed.record#viewRecord",
        uri: `at://${e.did}/app.bsky.feed.post/fake`,
        cid: gn,
        author: e,
        value: t,
        labels: r,
        indexedAt: (/* @__PURE__ */ new Date()).toISOString()
      }
    };
  },
  profileViewBasic({ handle: t, displayName: e, description: r, viewer: n, labels: s }) {
    return {
      did: `did:web:${t}`,
      handle: t,
      displayName: e,
      description: r,
      // technically not in ProfileViewBasic but useful in some cases
      viewer: n,
      labels: s
    };
  },
  actorViewerState({ muted: t, mutedByList: e, blockedBy: r, blocking: n, blockingByList: s, following: u, followedBy: c }) {
    return {
      muted: t,
      mutedByList: e,
      blockedBy: r,
      blocking: n,
      blockingByList: s,
      following: u,
      followedBy: c
    };
  },
  listViewBasic({ name: t }) {
    return {
      uri: "at://did:plc:fake/app.bsky.graph.list/fake",
      cid: gn,
      name: t,
      purpose: "app.bsky.graph.defs#modlist",
      indexedAt: (/* @__PURE__ */ new Date()).toISOString()
    };
  },
  replyNotification({ author: t, record: e, labels: r }) {
    return {
      uri: `at://${t.did}/app.bsky.feed.post/fake`,
      cid: gn,
      author: t,
      reason: "reply",
      reasonSubject: `at://${t.did}/app.bsky.feed.post/fake-parent`,
      record: e,
      isRead: !1,
      indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
      labels: r
    };
  },
  followNotification({ author: t, subjectDid: e, labels: r }) {
    return {
      uri: `at://${t.did}/app.bsky.graph.follow/fake`,
      cid: gn,
      author: t,
      reason: "follow",
      record: {
        $type: "app.bsky.graph.follow",
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        subject: e
      },
      isRead: !1,
      indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
      labels: r
    };
  },
  label({ val: t, uri: e, src: r }) {
    return {
      src: r || "did:plc:fake-labeler",
      uri: e,
      val: t,
      cts: (/* @__PURE__ */ new Date()).toISOString()
    };
  }
};
var Zn = {}, Iu = {}, Rt = L && L.__classPrivateFieldGet || function(t, e, r, n) {
  if (r === "a" && !n) throw new TypeError("Private accessor was defined without a getter");
  if (typeof e == "function" ? t !== e || !n : !e.has(t)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return r === "m" ? n : r === "a" ? n.call(t) : n ? n.value : e.get(t);
}, Da = L && L.__classPrivateFieldSet || function(t, e, r, n, s) {
  if (n === "m") throw new TypeError("Private method is not writable");
  if (n === "a" && !s) throw new TypeError("Private accessor was defined without a setter");
  if (typeof e == "function" ? t !== e || !s : !e.has(t)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return n === "a" ? s.call(t, r) : s ? s.value = r : e.set(t, r), r;
}, Ft, pr;
Object.defineProperty(Iu, "__esModule", { value: !0 });
class Wk {
  constructor() {
    Ft.set(this, !1), pr.set(this, /* @__PURE__ */ new Set());
  }
  /**
   * Whether the lock is currently acquired or not. Accessing this property does not affect the
   * status of the lock.
   */
  get acquired() {
    return Rt(this, Ft, "f");
  }
  /**
   * Acquires the lock, waiting if necessary for it to become free if it is already locked. The
   * returned promise is fulfilled once the lock is acquired.
   *
   * A timeout (in milliseconds) may be optionally provided. If the lock cannot be acquired before
   * the timeout elapses, the returned promise is rejected with an error. The behavior of invalid
   * timeout values depends on how `setTimeout` handles those values.
   *
   * After acquiring the lock, you **must** call `release` when you are done with it.
   */
  acquireAsync({ timeout: e } = {}) {
    if (!Rt(this, Ft, "f"))
      return Da(this, Ft, !0, "f"), Promise.resolve();
    if (e == null)
      return new Promise((s) => {
        Rt(this, pr, "f").add(s);
      });
    let r, n;
    return Promise.race([
      new Promise((s) => {
        r = () => {
          clearTimeout(n), s();
        }, Rt(this, pr, "f").add(r);
      }),
      new Promise((s, u) => {
        n = setTimeout(() => {
          Rt(this, pr, "f").delete(r), u(new Error("Timed out waiting for lock"));
        }, e);
      })
    ]);
  }
  /**
   * Acquires the lock if it is free and otherwise returns immediately without waiting. Returns
   * `true` if the lock was free and is now acquired, and `false` otherwise.
   *
   * This method differs from calling `acquireAsync` with a zero-millisecond timeout in that it runs
   * synchronously without waiting for the JavaScript task queue.
   */
  tryAcquire() {
    return Rt(this, Ft, "f") ? !1 : (Da(this, Ft, !0, "f"), !0);
  }
  /**
   * Releases the lock and gives it to the next waiting acquirer, if there is one. Each acquirer
   * must release the lock exactly once.
   */
  release() {
    if (!Rt(this, Ft, "f"))
      throw new Error("Cannot release an unacquired lock");
    if (Rt(this, pr, "f").size > 0) {
      const [e] = Rt(this, pr, "f");
      Rt(this, pr, "f").delete(e), e();
    } else
      Da(this, Ft, !1, "f");
  }
}
Iu.default = Wk;
Ft = /* @__PURE__ */ new WeakMap(), pr = /* @__PURE__ */ new WeakMap();
var Xc = L && L.__classPrivateFieldGet || function(t, e, r, n) {
  if (r === "a" && !n) throw new TypeError("Private accessor was defined without a getter");
  if (typeof e == "function" ? t !== e || !n : !e.has(t)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return r === "m" ? n : r === "a" ? n.call(t) : n ? n.value : e.get(t);
}, Jk = L && L.__importDefault || function(t) {
  return t && t.__esModule ? t : { default: t };
}, ys;
Object.defineProperty(Zn, "__esModule", { value: !0 });
Zn.Agent = void 0;
const dr = Bt, ui = Jr, Zc = z, Qk = Jk(Iu), S = o, Yk = O, e1 = Sn, t1 = Du, r1 = _r, Ke = no, Hc = {
  hideReplies: !1,
  hideRepliesByUnfollowed: !0,
  hideRepliesByLikeCount: 0,
  hideReposts: !1,
  hideQuotePosts: !1
}, i1 = {
  sort: "hotness",
  prioritizeFollowedUsers: !0
};
class ca extends Zc.XrpcClient {
  /**
   * Configures the Agent (or its sub classes) globally.
   */
  static configure(e) {
    e.appLabelers && (this.appLabelers = e.appLabelers.map(Ke.asDid));
  }
  /** @deprecated use `this` instead */
  get xrpc() {
    return this;
  }
  constructor(e) {
    const r = typeof e == "string" || e instanceof URL ? {
      did: void 0,
      fetchHandler: (0, Zc.buildFetchHandler)(e)
    } : e;
    super((n, s) => {
      var c;
      const u = new Headers(s == null ? void 0 : s.headers);
      return this.proxy && !u.has("atproto-proxy") && u.set("atproto-proxy", this.proxy), u.set("atproto-accept-labelers", [
        ...this.appLabelers.map((l) => `${l};redact`),
        ...this.labelers,
        (c = u.get("atproto-accept-labelers")) == null ? void 0 : c.trim()
      ].filter(Boolean).join(", ")), this.sessionManager.fetchHandler(n, { ...s, headers: u });
    }, Yk.schemas), Object.defineProperty(this, "com", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: new S.ComNS(this)
    }), Object.defineProperty(this, "app", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: new S.AppNS(this)
    }), Object.defineProperty(this, "chat", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: new S.ChatNS(this)
    }), Object.defineProperty(this, "tools", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: new S.ToolsNS(this)
    }), Object.defineProperty(this, "sessionManager", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "labelers", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: []
    }), Object.defineProperty(this, "proxy", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "uploadBlob", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.com.atproto.repo.uploadBlob(n, s)
    }), Object.defineProperty(this, "resolveHandle", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.com.atproto.identity.resolveHandle(n, s)
    }), Object.defineProperty(this, "updateHandle", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.com.atproto.identity.updateHandle(n, s)
    }), Object.defineProperty(this, "createModerationReport", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.com.atproto.moderation.createReport(n, s)
    }), Object.defineProperty(this, "getTimeline", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.feed.getTimeline(n, s)
    }), Object.defineProperty(this, "getAuthorFeed", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.feed.getAuthorFeed(n, s)
    }), Object.defineProperty(this, "getActorLikes", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.feed.getActorLikes(n, s)
    }), Object.defineProperty(this, "getPostThread", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.feed.getPostThread(n, s)
    }), Object.defineProperty(this, "getPost", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n) => this.app.bsky.feed.post.get(n)
    }), Object.defineProperty(this, "getPosts", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.feed.getPosts(n, s)
    }), Object.defineProperty(this, "getLikes", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.feed.getLikes(n, s)
    }), Object.defineProperty(this, "getRepostedBy", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.feed.getRepostedBy(n, s)
    }), Object.defineProperty(this, "getFollows", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.graph.getFollows(n, s)
    }), Object.defineProperty(this, "getFollowers", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.graph.getFollowers(n, s)
    }), Object.defineProperty(this, "getProfile", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.actor.getProfile(n, s)
    }), Object.defineProperty(this, "getProfiles", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.actor.getProfiles(n, s)
    }), Object.defineProperty(this, "getSuggestions", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.actor.getSuggestions(n, s)
    }), Object.defineProperty(this, "searchActors", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.actor.searchActors(n, s)
    }), Object.defineProperty(this, "searchActorsTypeahead", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.actor.searchActorsTypeahead(n, s)
    }), Object.defineProperty(this, "listNotifications", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.notification.listNotifications(n, s)
    }), Object.defineProperty(this, "countUnreadNotifications", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.notification.getUnreadCount(n, s)
    }), Object.defineProperty(this, "getLabelers", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: (n, s) => this.app.bsky.labeler.getServices(n, s)
    }), ys.set(
      this,
      new Qk.default()
      /**
       * This function updates the preferences of a user and allows for a callback function to be executed
       * before the update.
       * @param cb - cb is a callback function that takes in a single parameter of type
       * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
       * update the preferences of the user. The function is called with the current preferences as an
       * argument and if the callback returns false, the preferences are not updated.
       */
    ), this.sessionManager = r;
  }
  //#region Cloning utilities
  clone() {
    return this.copyInto(new ca(this.sessionManager));
  }
  copyInto(e) {
    e.configureLabelers(this.labelers), e.configureProxy(this.proxy ?? null), e.clearHeaders();
    for (const [r, n] of this.headers)
      e.setHeader(r, n);
    return e;
  }
  withProxy(e, r) {
    const n = this.clone();
    return n.configureProxy(`${(0, Ke.asDid)(r)}#${e}`), n;
  }
  //#endregion
  //#region ATPROTO labelers configuration utilities
  /**
   * The labelers statically configured on the class of the current instance.
   */
  get appLabelers() {
    return this.constructor.appLabelers;
  }
  configureLabelers(e) {
    this.labelers = e.map(Ke.asDid);
  }
  /** @deprecated use {@link configureLabelers} instead */
  configureLabelersHeader(e) {
    this.configureLabelers(e.filter(Ke.isDid));
  }
  configureProxy(e) {
    if (e === null)
      this.proxy = void 0;
    else if ((0, Ke.isDid)(e))
      this.proxy = e;
    else
      throw new TypeError("Invalid proxy DID");
  }
  /** @deprecated use {@link configureProxy} instead */
  configureProxyHeader(e, r) {
    (0, Ke.isDid)(r) && this.configureProxy(`${r}#${e}`);
  }
  //#endregion
  //#region Session management
  /**
   * Get the authenticated user's DID, if any.
   */
  get did() {
    return this.sessionManager.did;
  }
  /** @deprecated Use {@link Agent.assertDid} instead */
  get accountDid() {
    return this.assertDid;
  }
  /**
   * Get the authenticated user's DID, or throw an error if not authenticated.
   */
  get assertDid() {
    return this.assertAuthenticated(), this.did;
  }
  /**
   * Assert that the user is authenticated.
   */
  assertAuthenticated() {
    if (!this.did)
      throw new Error("Not logged in");
  }
  //#endregion
  /** @deprecated use "this" instead */
  get api() {
    return this;
  }
  async getLabelDefinitions(e) {
    const r = [...this.appLabelers];
    a1(e) ? r.push(...e.moderationPrefs.labelers.map((u) => u.did)) : cm(e) ? r.push(...e.labelers.map((u) => u.did)) : r.push(...e);
    const n = await this.getLabelers({
      dids: r,
      detailed: !0
    }), s = {};
    if (n.data)
      for (const u of n.data.views)
        s[u.creator.did] = (0, t1.interpretLabelValueDefinitions)(u);
    return s;
  }
  async post(e) {
    return e.createdAt || (e.createdAt = (/* @__PURE__ */ new Date()).toISOString()), this.app.bsky.feed.post.create({ repo: this.accountDid }, e);
  }
  async deletePost(e) {
    this.assertAuthenticated();
    const r = new ui.AtUri(e);
    return this.app.bsky.feed.post.delete({
      repo: r.hostname,
      rkey: r.rkey
    });
  }
  async like(e, r) {
    return this.app.bsky.feed.like.create({ repo: this.accountDid }, {
      subject: { uri: e, cid: r },
      createdAt: (/* @__PURE__ */ new Date()).toISOString()
    });
  }
  async deleteLike(e) {
    this.assertAuthenticated();
    const r = new ui.AtUri(e);
    return this.app.bsky.feed.like.delete({
      repo: r.hostname,
      rkey: r.rkey
    });
  }
  async repost(e, r) {
    return this.app.bsky.feed.repost.create({ repo: this.accountDid }, {
      subject: { uri: e, cid: r },
      createdAt: (/* @__PURE__ */ new Date()).toISOString()
    });
  }
  async deleteRepost(e) {
    this.assertAuthenticated();
    const r = new ui.AtUri(e);
    return this.app.bsky.feed.repost.delete({
      repo: r.hostname,
      rkey: r.rkey
    });
  }
  async follow(e) {
    return this.app.bsky.graph.follow.create({ repo: this.accountDid }, {
      subject: e,
      createdAt: (/* @__PURE__ */ new Date()).toISOString()
    });
  }
  async deleteFollow(e) {
    this.assertAuthenticated();
    const r = new ui.AtUri(e);
    return this.app.bsky.graph.follow.delete({
      repo: r.hostname,
      rkey: r.rkey
    });
  }
  async upsertProfile(e) {
    const r = this.accountDid;
    let n = 5;
    for (; n >= 0; ) {
      const s = await this.com.atproto.repo.getRecord({
        repo: r,
        collection: "app.bsky.actor.profile",
        rkey: "self"
      }).catch((l) => {
      }), u = await e(s == null ? void 0 : s.data.value);
      u && (u.$type = "app.bsky.actor.profile");
      const c = S.AppBskyActorProfile.validateRecord(u);
      if (!c.success)
        throw c.error;
      try {
        await this.com.atproto.repo.putRecord({
          repo: r,
          collection: "app.bsky.actor.profile",
          rkey: "self",
          record: u,
          swapRecord: (s == null ? void 0 : s.data.cid) || null
        });
      } catch (l) {
        if (n > 0 && l instanceof S.ComAtprotoRepoPutRecord.InvalidSwapError) {
          n--;
          continue;
        } else
          throw l;
      }
      break;
    }
  }
  async mute(e) {
    return this.app.bsky.graph.muteActor({ actor: e });
  }
  async unmute(e) {
    return this.app.bsky.graph.unmuteActor({ actor: e });
  }
  async muteModList(e) {
    return this.app.bsky.graph.muteActorList({ list: e });
  }
  async unmuteModList(e) {
    return this.app.bsky.graph.unmuteActorList({ list: e });
  }
  async blockModList(e) {
    return this.app.bsky.graph.listblock.create({ repo: this.accountDid }, {
      subject: e,
      createdAt: (/* @__PURE__ */ new Date()).toISOString()
    });
  }
  async unblockModList(e) {
    var u;
    const r = this.accountDid, s = (u = (await this.app.bsky.graph.getList({
      list: e,
      limit: 1
    })).data.list.viewer) == null ? void 0 : u.blocked;
    if (s) {
      const { rkey: c } = new ui.AtUri(s);
      return this.app.bsky.graph.listblock.delete({
        repo: r,
        rkey: c
      });
    }
  }
  async updateSeenNotifications(e = (/* @__PURE__ */ new Date()).toISOString()) {
    return this.app.bsky.notification.updateSeen({ seenAt: e });
  }
  async getPreferences() {
    const e = {
      feeds: {
        saved: void 0,
        pinned: void 0
      },
      // @ts-ignore populating below
      savedFeeds: void 0,
      feedViewPrefs: {
        home: {
          ...Hc
        }
      },
      threadViewPrefs: { ...i1 },
      moderationPrefs: {
        adultContentEnabled: !1,
        labels: { ...r1.DEFAULT_LABEL_SETTINGS },
        labelers: this.appLabelers.map((s) => ({
          did: s,
          labels: {}
        })),
        mutedWords: [],
        hiddenPosts: []
      },
      birthDate: void 0,
      interests: {
        tags: []
      },
      bskyAppState: {
        queuedNudges: [],
        activeProgressGuide: void 0,
        nuxs: []
      }
    }, r = await this.app.bsky.actor.getPreferences({}), n = [];
    for (const s of r.data.preferences)
      if (S.AppBskyActorDefs.isAdultContentPref(s) && S.AppBskyActorDefs.validateAdultContentPref(s).success)
        e.moderationPrefs.adultContentEnabled = s.enabled;
      else if (S.AppBskyActorDefs.isContentLabelPref(s) && S.AppBskyActorDefs.validateContentLabelPref(s).success) {
        const u = n1(s);
        n.push(u);
      } else if (S.AppBskyActorDefs.isLabelersPref(s) && S.AppBskyActorDefs.validateLabelersPref(s).success)
        e.moderationPrefs.labelers = this.appLabelers.map((u) => ({ did: u, labels: {} })).concat(s.labelers.map((u) => ({
          ...u,
          labels: {}
        })));
      else if (S.AppBskyActorDefs.isSavedFeedsPrefV2(s) && S.AppBskyActorDefs.validateSavedFeedsPrefV2(s).success)
        e.savedFeeds = s.items;
      else if (S.AppBskyActorDefs.isSavedFeedsPref(s) && S.AppBskyActorDefs.validateSavedFeedsPref(s).success)
        e.feeds.saved = s.saved, e.feeds.pinned = s.pinned;
      else if (S.AppBskyActorDefs.isPersonalDetailsPref(s) && S.AppBskyActorDefs.validatePersonalDetailsPref(s).success)
        s.birthDate && (e.birthDate = new Date(s.birthDate));
      else if (S.AppBskyActorDefs.isFeedViewPref(s) && S.AppBskyActorDefs.validateFeedViewPref(s).success) {
        const { $type: u, feed: c, ...l } = s;
        e.feedViewPrefs[s.feed] = { ...Hc, ...l };
      } else if (S.AppBskyActorDefs.isThreadViewPref(s) && S.AppBskyActorDefs.validateThreadViewPref(s).success) {
        const { $type: u, ...c } = s;
        e.threadViewPrefs = { ...e.threadViewPrefs, ...c };
      } else if (S.AppBskyActorDefs.isInterestsPref(s) && S.AppBskyActorDefs.validateInterestsPref(s).success) {
        const { $type: u, ...c } = s;
        e.interests = { ...e.interests, ...c };
      } else if (S.AppBskyActorDefs.isMutedWordsPref(s) && S.AppBskyActorDefs.validateMutedWordsPref(s).success) {
        const { $type: u, ...c } = s;
        e.moderationPrefs.mutedWords = c.items, e.moderationPrefs.mutedWords.length && (e.moderationPrefs.mutedWords = e.moderationPrefs.mutedWords.map((l) => (l.actorTarget = l.actorTarget || "all", l)));
      } else if (S.AppBskyActorDefs.isHiddenPostsPref(s) && S.AppBskyActorDefs.validateHiddenPostsPref(s).success) {
        const { $type: u, ...c } = s;
        e.moderationPrefs.hiddenPosts = c.items;
      } else if (S.AppBskyActorDefs.isBskyAppStatePref(s) && S.AppBskyActorDefs.validateBskyAppStatePref(s).success) {
        const { $type: u, ...c } = s;
        e.bskyAppState.queuedNudges = c.queuedNudges || [], e.bskyAppState.activeProgressGuide = c.activeProgressGuide, e.bskyAppState.nuxs = c.nuxs || [];
      }
    if (e.savedFeeds == null) {
      const { saved: s, pinned: u } = e.feeds;
      if (s && u) {
        const c = /* @__PURE__ */ new Map();
        c.set("timeline", {
          id: dr.TID.nextStr(),
          type: "timeline",
          value: "following",
          pinned: !0
        });
        for (const l of u) {
          const f = (0, Ke.getSavedFeedType)(l);
          f !== "unknown" && c.set(l, {
            id: dr.TID.nextStr(),
            type: f,
            value: l,
            pinned: !0
          });
        }
        for (const l of s)
          if (!c.has(l)) {
            const f = (0, Ke.getSavedFeedType)(l);
            if (f === "unknown")
              continue;
            c.set(l, {
              id: dr.TID.nextStr(),
              type: f,
              value: l,
              pinned: !1
            });
          }
        e.savedFeeds = Array.from(c.values());
      } else
        e.savedFeeds = [
          {
            id: dr.TID.nextStr(),
            type: "timeline",
            value: "following",
            pinned: !0
          }
        ];
      await this.overwriteSavedFeeds(e.savedFeeds);
    }
    for (const s of n)
      if (s.labelerDid) {
        const u = e.moderationPrefs.labelers.find((c) => c.did === s.labelerDid);
        if (!u)
          continue;
        u.labels[s.label] = s.visibility;
      } else
        e.moderationPrefs.labels[s.label] = s.visibility;
    return e.moderationPrefs.labels = s1(e.moderationPrefs.labels), this.configureLabelers(Pa(r.data.preferences)), e;
  }
  async overwriteSavedFeeds(e) {
    e.forEach(Ke.validateSavedFeed);
    const r = /* @__PURE__ */ new Map();
    return e.forEach((n) => {
      r.has(n.id) && r.delete(n.id), r.set(n.id, n);
    }), this.updateSavedFeedsV2Preferences(() => Array.from(r.values()));
  }
  async updateSavedFeeds(e) {
    return e.map(Ke.validateSavedFeed), this.updateSavedFeedsV2Preferences((r) => r.map((n) => {
      const s = e.find((u) => n.id === u.id);
      return s ? {
        ...n,
        // only update pinned
        pinned: s.pinned
      } : n;
    }));
  }
  async addSavedFeeds(e) {
    const r = e.map((n) => ({
      ...n,
      id: dr.TID.nextStr()
    }));
    return r.forEach(Ke.validateSavedFeed), this.updateSavedFeedsV2Preferences((n) => [
      ...n,
      ...r
    ]);
  }
  async removeSavedFeeds(e) {
    return this.updateSavedFeedsV2Preferences((r) => [
      ...r.filter((n) => !e.find((s) => n.id === s))
    ]);
  }
  /**
   * @deprecated use `overwriteSavedFeeds`
   */
  async setSavedFeeds(e, r) {
    return this.updateFeedPreferences(() => ({
      saved: e,
      pinned: r
    }));
  }
  /**
   * @deprecated use `addSavedFeeds`
   */
  async addSavedFeed(e) {
    return this.updateFeedPreferences((r, n) => ({
      saved: [...r.filter((s) => s !== e), e],
      pinned: n
    }));
  }
  /**
   * @deprecated use `removeSavedFeeds`
   */
  async removeSavedFeed(e) {
    return this.updateFeedPreferences((r, n) => ({
      saved: r.filter((s) => s !== e),
      pinned: n.filter((s) => s !== e)
    }));
  }
  /**
   * @deprecated use `addSavedFeeds` or `updateSavedFeeds`
   */
  async addPinnedFeed(e) {
    return this.updateFeedPreferences((r, n) => ({
      saved: [...r.filter((s) => s !== e), e],
      pinned: [...n.filter((s) => s !== e), e]
    }));
  }
  /**
   * @deprecated use `updateSavedFeeds` or `removeSavedFeeds`
   */
  async removePinnedFeed(e) {
    return this.updateFeedPreferences((r, n) => ({
      saved: r,
      pinned: n.filter((s) => s !== e)
    }));
  }
  async setAdultContentEnabled(e) {
    await this.updatePreferences((r) => {
      let n = r.findLast((s) => S.AppBskyActorDefs.isAdultContentPref(s) && S.AppBskyActorDefs.validateAdultContentPref(s).success);
      return n ? n.enabled = e : n = {
        $type: "app.bsky.actor.defs#adultContentPref",
        enabled: e
      }, r.filter((s) => !S.AppBskyActorDefs.isAdultContentPref(s)).concat([n]);
    });
  }
  async setContentLabelPref(e, r, n) {
    n && (0, ui.ensureValidDid)(n), await this.updatePreferences((s) => {
      let u = s.findLast((l) => S.AppBskyActorDefs.isContentLabelPref(l) && S.AppBskyActorDefs.validateContentLabelPref(l).success && l.label === e && l.labelerDid === n), c;
      if (u ? u.visibility = r : u = {
        $type: "app.bsky.actor.defs#contentLabelPref",
        label: e,
        labelerDid: n,
        visibility: r
      }, S.AppBskyActorDefs.isContentLabelPref(u) && !u.labelerDid) {
        const l = {
          "graphic-media": "gore",
          porn: "nsfw",
          sexual: "suggestive"
        }[u.label];
        l && (c = s.findLast((f) => S.AppBskyActorDefs.isContentLabelPref(f) && S.AppBskyActorDefs.validateContentLabelPref(f).success && f.label === l && f.labelerDid === void 0), c ? c.visibility = r : c = {
          $type: "app.bsky.actor.defs#contentLabelPref",
          label: l,
          labelerDid: void 0,
          visibility: r
        });
      }
      return s.filter((l) => !S.AppBskyActorDefs.isContentLabelPref(l) || !(l.label === e && l.labelerDid === n)).concat([u]).filter((l) => c ? !S.AppBskyActorDefs.isContentLabelPref(l) || !(l.label === c.label && l.labelerDid === void 0) : !0).concat(c ? [c] : []);
    });
  }
  async addLabeler(e) {
    const r = await this.updatePreferences((n) => {
      let s = n.findLast((u) => S.AppBskyActorDefs.isLabelersPref(u) && S.AppBskyActorDefs.validateLabelersPref(u).success);
      if (s || (s = {
        $type: "app.bsky.actor.defs#labelersPref",
        labelers: []
      }), S.AppBskyActorDefs.isLabelersPref(s)) {
        let u = s.labelers.find((c) => c.did === e);
        u || (u = {
          did: e
        }, s.labelers.push(u));
      }
      return n.filter((u) => !S.AppBskyActorDefs.isLabelersPref(u)).concat([s]);
    });
    this.configureLabelers(Pa(r));
  }
  async removeLabeler(e) {
    const r = await this.updatePreferences((n) => {
      let s = n.findLast((u) => S.AppBskyActorDefs.isLabelersPref(u) && S.AppBskyActorDefs.validateLabelersPref(u).success);
      return s || (s = {
        $type: "app.bsky.actor.defs#labelersPref",
        labelers: []
      }), S.AppBskyActorDefs.isLabelersPref(s) && (s.labelers = s.labelers.filter((u) => u.did !== e)), n.filter((u) => !S.AppBskyActorDefs.isLabelersPref(u)).concat([s]);
    });
    this.configureLabelers(Pa(r));
  }
  async setPersonalDetails({ birthDate: e }) {
    e = e instanceof Date ? e.toISOString() : e, await this.updatePreferences((r) => {
      let n = r.findLast((s) => S.AppBskyActorDefs.isPersonalDetailsPref(s) && S.AppBskyActorDefs.validatePersonalDetailsPref(s).success);
      return n ? n.birthDate = e : n = {
        $type: "app.bsky.actor.defs#personalDetailsPref",
        birthDate: e
      }, r.filter((s) => !S.AppBskyActorDefs.isPersonalDetailsPref(s)).concat([n]);
    });
  }
  async setFeedViewPrefs(e, r) {
    await this.updatePreferences((n) => {
      const s = n.findLast((u) => S.AppBskyActorDefs.isFeedViewPref(u) && S.AppBskyActorDefs.validateFeedViewPref(u).success && u.feed === e);
      return s && (r = { ...s, ...r }), n.filter((u) => !S.AppBskyActorDefs.isFeedViewPref(r) || u.feed !== e).concat([{ ...r, $type: "app.bsky.actor.defs#feedViewPref", feed: e }]);
    });
  }
  async setThreadViewPrefs(e) {
    await this.updatePreferences((r) => {
      const n = r.findLast((s) => S.AppBskyActorDefs.isThreadViewPref(s) && S.AppBskyActorDefs.validateThreadViewPref(s).success);
      return n && (e = { ...n, ...e }), r.filter((s) => !S.AppBskyActorDefs.isThreadViewPref(s)).concat([{ ...e, $type: "app.bsky.actor.defs#threadViewPref" }]);
    });
  }
  async setInterestsPref(e) {
    await this.updatePreferences((r) => {
      const n = r.findLast((s) => S.AppBskyActorDefs.isInterestsPref(s) && S.AppBskyActorDefs.validateInterestsPref(s).success);
      return n && (e = { ...n, ...e }), r.filter((s) => !S.AppBskyActorDefs.isInterestsPref(s)).concat([{ ...e, $type: "app.bsky.actor.defs#interestsPref" }]);
    });
  }
  /**
   * Add a muted word to user preferences.
   */
  async addMutedWord(e) {
    const r = (0, Ke.sanitizeMutedWordValue)(e.value);
    r && await this.updatePreferences((n) => {
      let s = n.findLast((c) => S.AppBskyActorDefs.isMutedWordsPref(c) && S.AppBskyActorDefs.validateMutedWordsPref(c).success);
      const u = {
        id: dr.TID.nextStr(),
        value: r,
        targets: e.targets || [],
        actorTarget: e.actorTarget || "all",
        expiresAt: e.expiresAt || void 0
      };
      return s && S.AppBskyActorDefs.isMutedWordsPref(s) ? (s.items.push(u), s.items = Ua(s.items)) : s = {
        items: [u]
      }, n.filter((c) => !S.AppBskyActorDefs.isMutedWordsPref(c)).concat([
        { ...s, $type: "app.bsky.actor.defs#mutedWordsPref" }
      ]);
    });
  }
  /**
   * Convenience method to add muted words to user preferences
   */
  async addMutedWords(e) {
    await Promise.all(e.map((r) => this.addMutedWord(r)));
  }
  /**
   * @deprecated use `addMutedWords` or `addMutedWord` instead
   */
  async upsertMutedWords(e) {
    await this.addMutedWords(e);
  }
  /**
   * Update a muted word in user preferences.
   */
  async updateMutedWord(e) {
    await this.updatePreferences((r) => {
      const n = r.findLast((s) => S.AppBskyActorDefs.isMutedWordsPref(s) && S.AppBskyActorDefs.validateMutedWordsPref(s).success);
      return n && S.AppBskyActorDefs.isMutedWordsPref(n) ? (n.items = n.items.map((s) => {
        if (Wc(s, e)) {
          const c = {
            ...s,
            ...e
          };
          return {
            id: s.id || dr.TID.nextStr(),
            value: (0, Ke.sanitizeMutedWordValue)(c.value) || s.value,
            targets: c.targets || [],
            actorTarget: c.actorTarget || "all",
            expiresAt: c.expiresAt || void 0
          };
        } else
          return s;
      }), n.items = Ua(n.items), r.filter((s) => !S.AppBskyActorDefs.isMutedWordsPref(s)).concat([
        { ...n, $type: "app.bsky.actor.defs#mutedWordsPref" }
      ])) : r;
    });
  }
  /**
   * Remove a muted word from user preferences.
   */
  async removeMutedWord(e) {
    await this.updatePreferences((r) => {
      const n = r.findLast((s) => S.AppBskyActorDefs.isMutedWordsPref(s) && S.AppBskyActorDefs.validateMutedWordsPref(s).success);
      if (n && S.AppBskyActorDefs.isMutedWordsPref(n)) {
        for (let s = 0; s < n.items.length; s++)
          if (Wc(n.items[s], e)) {
            n.items.splice(s, 1);
            break;
          }
        return n.items = Ua(n.items), r.filter((s) => !S.AppBskyActorDefs.isMutedWordsPref(s)).concat([
          { ...n, $type: "app.bsky.actor.defs#mutedWordsPref" }
        ]);
      }
      return r;
    });
  }
  /**
   * Convenience method to remove muted words from user preferences
   */
  async removeMutedWords(e) {
    await Promise.all(e.map((r) => this.removeMutedWord(r)));
  }
  async hidePost(e) {
    await this.updateHiddenPost(e, "hide");
  }
  async unhidePost(e) {
    await this.updateHiddenPost(e, "unhide");
  }
  async bskyAppQueueNudges(e) {
    await this.updatePreferences((r) => {
      let n = r.findLast((s) => S.AppBskyActorDefs.isBskyAppStatePref(s) && S.AppBskyActorDefs.validateBskyAppStatePref(s).success);
      return n = n || {}, e = Array.isArray(e) ? e : [e], n.queuedNudges = (n.queuedNudges || []).concat(e), r.filter((s) => !S.AppBskyActorDefs.isBskyAppStatePref(s)).concat([
        {
          ...n,
          $type: "app.bsky.actor.defs#bskyAppStatePref"
        }
      ]);
    });
  }
  async bskyAppDismissNudges(e) {
    await this.updatePreferences((r) => {
      let n = r.findLast((s) => S.AppBskyActorDefs.isBskyAppStatePref(s) && S.AppBskyActorDefs.validateBskyAppStatePref(s).success);
      return n = n || {}, e = Array.isArray(e) ? e : [e], n.queuedNudges = (n.queuedNudges || []).filter((s) => !e.includes(s)), r.filter((s) => !S.AppBskyActorDefs.isBskyAppStatePref(s)).concat([
        {
          ...n,
          $type: "app.bsky.actor.defs#bskyAppStatePref"
        }
      ]);
    });
  }
  async bskyAppSetActiveProgressGuide(e) {
    if (e && !S.AppBskyActorDefs.validateBskyAppProgressGuide(e).success)
      throw new Error("Invalid progress guide");
    await this.updatePreferences((r) => {
      let n = r.findLast((s) => S.AppBskyActorDefs.isBskyAppStatePref(s) && S.AppBskyActorDefs.validateBskyAppStatePref(s).success);
      return n = n || {}, n.activeProgressGuide = e, r.filter((s) => !S.AppBskyActorDefs.isBskyAppStatePref(s)).concat([
        {
          ...n,
          $type: "app.bsky.actor.defs#bskyAppStatePref"
        }
      ]);
    });
  }
  /**
   * Insert or update a NUX in user prefs
   */
  async bskyAppUpsertNux(e) {
    (0, Ke.validateNux)(e), await this.updatePreferences((r) => {
      var c;
      let n = r.findLast((l) => S.AppBskyActorDefs.isBskyAppStatePref(l) && S.AppBskyActorDefs.validateBskyAppStatePref(l).success);
      n = n || {}, n.nuxs = n.nuxs || [];
      const s = (c = n.nuxs) == null ? void 0 : c.find((l) => l.id === e.id);
      let u;
      return s ? u = {
        id: s.id,
        completed: e.completed,
        data: e.data,
        expiresAt: e.expiresAt
      } : u = e, n.nuxs = n.nuxs.filter((l) => l.id !== e.id).concat(u), r.filter((l) => !S.AppBskyActorDefs.isBskyAppStatePref(l)).concat([
        {
          ...n,
          $type: "app.bsky.actor.defs#bskyAppStatePref"
        }
      ]);
    });
  }
  /**
   * Removes NUXs from user preferences.
   */
  async bskyAppRemoveNuxs(e) {
    await this.updatePreferences((r) => {
      let n = r.findLast((s) => S.AppBskyActorDefs.isBskyAppStatePref(s) && S.AppBskyActorDefs.validateBskyAppStatePref(s).success);
      return n = n || {}, n.nuxs = (n.nuxs || []).filter((s) => !e.includes(s.id)), r.filter((s) => !S.AppBskyActorDefs.isBskyAppStatePref(s)).concat([
        {
          ...n,
          $type: "app.bsky.actor.defs#bskyAppStatePref"
        }
      ]);
    });
  }
  /**
   * This function updates the preferences of a user and allows for a callback function to be executed
   * before the update.
   * @param cb - cb is a callback function that takes in a single parameter of type
   * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
   * update the preferences of the user. The function is called with the current preferences as an
   * argument and if the callback returns false, the preferences are not updated.
   */
  async updatePreferences(e) {
    try {
      await Xc(this, ys, "f").acquireAsync();
      const r = await this.app.bsky.actor.getPreferences({}), n = e(r.data.preferences);
      return n === !1 ? r.data.preferences : (await this.app.bsky.actor.putPreferences({
        preferences: n
      }), n);
    } finally {
      Xc(this, ys, "f").release();
    }
  }
  async updateHiddenPost(e, r) {
    await this.updatePreferences((n) => {
      let s = n.findLast((u) => S.AppBskyActorDefs.isHiddenPostsPref(u) && S.AppBskyActorDefs.validateHiddenPostsPref(u).success);
      return s && S.AppBskyActorDefs.isHiddenPostsPref(s) ? s.items = r === "hide" ? Array.from(/* @__PURE__ */ new Set([...s.items, e])) : s.items.filter((u) => u !== e) : r === "hide" && (s = {
        $type: "app.bsky.actor.defs#hiddenPostsPref",
        items: [e]
      }), n.filter((u) => !S.AppBskyActorDefs.isInterestsPref(u)).concat([{ ...s, $type: "app.bsky.actor.defs#hiddenPostsPref" }]);
    });
  }
  /**
   * A helper specifically for updating feed preferences
   */
  async updateFeedPreferences(e) {
    let r;
    return await this.updatePreferences((n) => {
      let s = n.findLast((u) => S.AppBskyActorDefs.isSavedFeedsPref(u) && S.AppBskyActorDefs.validateSavedFeedsPref(u).success);
      return s ? (r = e(s.saved, s.pinned), s.saved = r.saved, s.pinned = r.pinned) : (r = e([], []), s = {
        $type: "app.bsky.actor.defs#savedFeedsPref",
        saved: r.saved,
        pinned: r.pinned
      }), n.filter((u) => !S.AppBskyActorDefs.isSavedFeedsPref(u)).concat([s]);
    }), r;
  }
  async updateSavedFeedsV2Preferences(e) {
    let r = [];
    return await this.updatePreferences((n) => {
      let s = n.findLast((p) => S.AppBskyActorDefs.isSavedFeedsPrefV2(p) && S.AppBskyActorDefs.validateSavedFeedsPrefV2(p).success), u = n.findLast((p) => S.AppBskyActorDefs.isSavedFeedsPref(p) && S.AppBskyActorDefs.validateSavedFeedsPref(p).success);
      s ? (r = e(s.items), s = {
        ...s,
        items: r
      }) : (r = e([]), s = {
        $type: "app.bsky.actor.defs#savedFeedsPrefV2",
        items: r
      });
      const c = s.items.filter((p) => p.pinned), l = s.items.filter((p) => !p.pinned);
      s.items = c.concat(l);
      let f = n.filter((p) => !S.AppBskyActorDefs.isSavedFeedsPrefV2(p)).concat(s);
      if (u) {
        const { saved: p, pinned: m } = u, A = (0, Ke.savedFeedsToUriArrays)(
          // v1 only supports feeds and lists
          s.items.filter((E) => ["feed", "list"].includes(E.type))
        );
        u = {
          ...u,
          saved: Array.from(/* @__PURE__ */ new Set([...p, ...A.saved])),
          pinned: Array.from(/* @__PURE__ */ new Set([...m, ...A.pinned]))
        }, f = f.filter((E) => !S.AppBskyActorDefs.isSavedFeedsPref(E)).concat(u);
      }
      return f;
    }), r;
  }
}
Zn.Agent = ca;
ys = /* @__PURE__ */ new WeakMap();
Object.defineProperty(ca, "appLabelers", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: [e1.BSKY_LABELER_DID]
});
function n1(t) {
  let e = t.visibility;
  return e === "show" && (e = "ignore"), { ...t, visibility: e };
}
function s1(t) {
  const e = { ...t }, r = {
    gore: "graphic-media",
    nsfw: "porn",
    suggestive: "sexual"
  };
  for (const n in e) {
    const s = r[n];
    s && (e[s] = e[n]);
  }
  return e;
}
function Pa(t) {
  const e = t.findLast((n) => S.AppBskyActorDefs.isLabelersPref(n) && S.AppBskyActorDefs.validateLabelersPref(n).success);
  let r = [];
  return e && (r = e.labelers.map((n) => n.did)), r;
}
function a1(t) {
  return t && typeof t == "object" && "moderationPrefs" in t && cm(t.moderationPrefs);
}
function cm(t) {
  return t && typeof t == "object" && "labelers" in t;
}
function Ua(t) {
  return t.map((e) => ({
    ...e,
    id: e.id || dr.TID.nextStr()
  }));
}
function Wc(t, e) {
  const r = t.id, n = r && r === e.id, s = !r && t.value === e.value;
  return n || s;
}
var Qt = {};
Object.defineProperty(Qt, "__esModule", { value: !0 });
Qt.CredentialSession = Qt.AtpAgent = void 0;
const Jc = Bt, Xr = z, o1 = Zn, l1 = o, u1 = O, Qc = globalThis.ReadableStream;
class Nu extends o1.Agent {
  constructor(e) {
    const r = e instanceof ms ? e : new ms(new URL(e.service), e.fetch, e.persistSession);
    if (super(r), Object.defineProperty(this, "sessionManager", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), this.sessionManager = r, !(e instanceof ms) && e.headers)
      for (const [n, s] of e.headers)
        this.setHeader(n, s);
  }
  clone() {
    return this.copyInto(new Nu(this.sessionManager));
  }
  get session() {
    return this.sessionManager.session;
  }
  get hasSession() {
    return this.sessionManager.hasSession;
  }
  get did() {
    return this.sessionManager.did;
  }
  get serviceUrl() {
    return this.sessionManager.serviceUrl;
  }
  get pdsUrl() {
    return this.sessionManager.pdsUrl;
  }
  get dispatchUrl() {
    return this.sessionManager.dispatchUrl;
  }
  /** @deprecated use {@link serviceUrl} instead */
  get service() {
    return this.serviceUrl;
  }
  get persistSession() {
    throw new Error('Cannot set persistSession directly. "persistSession" is defined through the constructor and will be invoked automatically when session data changes.');
  }
  set persistSession(e) {
    throw new Error('Cannot set persistSession directly. "persistSession" must be defined in the constructor and can no longer be changed.');
  }
  /** @deprecated use {@link AtpAgent.serviceUrl} instead */
  getServiceUrl() {
    return this.serviceUrl;
  }
  async resumeSession(e) {
    return this.sessionManager.resumeSession(e);
  }
  async createAccount(e, r) {
    return this.sessionManager.createAccount(e, r);
  }
  async login(e) {
    return this.sessionManager.login(e);
  }
  async logout() {
    return this.sessionManager.logout();
  }
}
Qt.AtpAgent = Nu;
class ms {
  constructor(e, r = globalThis.fetch, n) {
    Object.defineProperty(this, "serviceUrl", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: e
    }), Object.defineProperty(this, "fetch", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: r
    }), Object.defineProperty(this, "persistSession", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: n
    }), Object.defineProperty(this, "pdsUrl", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "session", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "refreshSessionPromise", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: void 0
    }), Object.defineProperty(this, "server", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: new l1.ComAtprotoServerNS(
        // Note that the use of the codegen "schemas" (to instantiate `this.api`),
        // as well as the use of `ComAtprotoServerNS` will cause this class to
        // reference (way) more code than it actually needs. It is not possible,
        // with the current state of the codegen, to generate a client that only
        // includes the methods that are actually used by this class. This is a
        // known limitation that should be addressed in a future version of the
        // codegen.
        new Xr.XrpcClient((s, u) => (0, this.fetch)(new URL(s, this.serviceUrl), u), u1.schemas)
      )
    });
  }
  get did() {
    var e;
    return (e = this.session) == null ? void 0 : e.did;
  }
  get dispatchUrl() {
    return this.pdsUrl || this.serviceUrl;
  }
  get hasSession() {
    return !!this.session;
  }
  /**
   * Sets a WhatWG "fetch()" function to be used for making HTTP requests.
   */
  setFetch(e = globalThis.fetch) {
    this.fetch = e;
  }
  async fetchHandler(e, r) {
    var A, E, v, k, P;
    await this.refreshSessionPromise;
    const n = new URL(e, this.dispatchUrl), s = new Request(n, r), u = (A = this.session) == null ? void 0 : A.accessJwt;
    if (!u || s.headers.has("authorization"))
      return (0, this.fetch)(s);
    s.headers.set("authorization", `Bearer ${u}`);
    const c = await (0, this.fetch)(s);
    if (!((E = this.session) != null && E.refreshJwt) || !await p1(c, [400], ["ExpiredToken"]))
      return c;
    try {
      await this.refreshSession();
    } catch {
      return c;
    }
    if ((v = r == null ? void 0 : r.signal) != null && v.aborted || Qc && (r == null ? void 0 : r.body) instanceof Qc)
      return c;
    const f = (k = this.session) == null ? void 0 : k.accessJwt;
    if (!f || f === u)
      return c;
    await ((P = c.body) == null ? void 0 : P.cancel());
    const p = new URL(e, this.dispatchUrl), m = new Request(p, r);
    return m.headers.set("authorization", `Bearer ${f}`), await (0, this.fetch)(m);
  }
  /**
   * Create a new account and hydrate its session in this agent.
   */
  async createAccount(e, r) {
    var n, s;
    try {
      const u = await this.server.createAccount(e, r);
      return this.session = {
        accessJwt: u.data.accessJwt,
        refreshJwt: u.data.refreshJwt,
        handle: u.data.handle,
        did: u.data.did,
        email: e.email,
        emailConfirmed: !1,
        emailAuthFactor: !1,
        active: !0
      }, (n = this.persistSession) == null || n.call(this, "create", this.session), this._updateApiEndpoint(u.data.didDoc), u;
    } catch (u) {
      throw this.session = void 0, (s = this.persistSession) == null || s.call(this, "create-failed", void 0), u;
    }
  }
  /**
   * Start a new session with this agent.
   */
  async login(e) {
    var r, n;
    try {
      const s = await this.server.createSession({
        identifier: e.identifier,
        password: e.password,
        authFactorToken: e.authFactorToken
      });
      return this.session = {
        accessJwt: s.data.accessJwt,
        refreshJwt: s.data.refreshJwt,
        handle: s.data.handle,
        did: s.data.did,
        email: s.data.email,
        emailConfirmed: s.data.emailConfirmed,
        emailAuthFactor: s.data.emailAuthFactor,
        active: s.data.active ?? !0,
        status: s.data.status
      }, this._updateApiEndpoint(s.data.didDoc), (r = this.persistSession) == null || r.call(this, "create", this.session), s;
    } catch (s) {
      throw this.session = void 0, (n = this.persistSession) == null || n.call(this, "create-failed", void 0), s;
    }
  }
  async logout() {
    var e;
    if (this.session)
      try {
        await this.server.deleteSession(void 0, {
          headers: {
            authorization: `Bearer ${this.session.accessJwt}`
          }
        });
      } catch {
      } finally {
        this.session = void 0, (e = this.persistSession) == null || e.call(this, "expired", void 0);
      }
  }
  /**
   * Resume a pre-existing session with this agent.
   */
  async resumeSession(e) {
    var r, n;
    this.session = e;
    try {
      const s = await this.server.getSession(void 0, {
        headers: { authorization: `Bearer ${e.accessJwt}` }
      }).catch(async (u) => {
        if (u instanceof Xr.XRPCError && ["ExpiredToken", "InvalidToken"].includes(u.error) && e.refreshJwt)
          try {
            const c = await this.server.refreshSession(void 0, {
              headers: { authorization: `Bearer ${e.refreshJwt}` }
            });
            return e.accessJwt = c.data.accessJwt, e.refreshJwt = c.data.refreshJwt, this.server.getSession(void 0, {
              headers: { authorization: `Bearer ${e.accessJwt}` }
            });
          } catch {
          }
        throw u;
      });
      if (s.data.did !== e.did)
        throw new Xr.XRPCError(Xr.ResponseType.InvalidRequest, "Invalid session", "InvalidDID");
      return e.email = s.data.email, e.handle = s.data.handle, e.emailConfirmed = s.data.emailConfirmed, e.emailAuthFactor = s.data.emailAuthFactor, e.active = s.data.active ?? !0, e.status = s.data.status, this.session === e && (this._updateApiEndpoint(s.data.didDoc), (r = this.persistSession) == null || r.call(this, "update", e)), s;
    } catch (s) {
      throw this.session === e && (this.session = void 0, (n = this.persistSession) == null || n.call(this, s instanceof Xr.XRPCError && ["ExpiredToken", "InvalidToken"].includes(s.error) ? "expired" : "network-error", void 0)), s;
    }
  }
  /**
   * Internal helper to refresh sessions
   * - Wraps the actual implementation in a promise-guard to ensure only
   *   one refresh is attempted at a time.
   */
  async refreshSession() {
    return this.refreshSessionPromise || (this.refreshSessionPromise = this._refreshSessionInner().finally(() => {
      this.refreshSessionPromise = void 0;
    }));
  }
  /**
   * Internal helper to refresh sessions (actual behavior)
   */
  async _refreshSessionInner() {
    var e, r, n;
    if ((e = this.session) != null && e.refreshJwt)
      try {
        const s = await this.server.refreshSession(void 0, {
          headers: { authorization: `Bearer ${this.session.refreshJwt}` }
        });
        this.session = {
          ...this.session,
          accessJwt: s.data.accessJwt,
          refreshJwt: s.data.refreshJwt,
          handle: s.data.handle,
          did: s.data.did
        }, this._updateApiEndpoint(s.data.didDoc), (r = this.persistSession) == null || r.call(this, "update", this.session);
      } catch (s) {
        s instanceof Xr.XRPCError && s.error && ["ExpiredToken", "InvalidToken"].includes(s.error) && (this.session = void 0, (n = this.persistSession) == null || n.call(this, "expired", void 0));
      }
  }
  /**
   * Helper to update the pds endpoint dynamically.
   *
   * The session methods (create, resume, refresh) may respond with the user's
   * did document which contains the user's canonical PDS endpoint. That endpoint
   * may differ from the endpoint used to contact the server. We capture that
   * PDS endpoint and update the client to use that given endpoint for future
   * requests. (This helps ensure smooth migrations between PDSes, especially
   * when the PDSes are operated by a single org.)
   */
  _updateApiEndpoint(e) {
    if ((0, Jc.isValidDidDoc)(e)) {
      const r = (0, Jc.getPdsEndpoint)(e);
      this.pdsUrl = r ? new URL(r) : void 0;
    } else
      this.pdsUrl = void 0;
  }
}
Qt.CredentialSession = ms;
function c1(t) {
  return Xr.errorResponseBody.safeParse(t).success;
}
async function p1(t, e, r) {
  if (!e.includes(t.status))
    return !1;
  try {
    const n = await d1(t, 10240);
    return c1(n) && r.includes(n.error);
  } catch {
    return !1;
  }
}
async function d1(t, e = 1 / 0) {
  if (y1(t) !== "application/json")
    throw new Error("Not JSON");
  if (f1(t) > e)
    throw new Error("Response too large");
  return t.clone().json();
}
function f1({ headers: t }) {
  return t.get("Content-Length") ? Number(t.get("Content-Length")) : NaN;
}
function y1({ headers: t }) {
  var e, r;
  return (r = (e = t.get("Content-Type")) == null ? void 0 : e.split(";")[0]) == null ? void 0 : r.trim();
}
var pa = {};
Object.defineProperty(pa, "__esModule", { value: !0 });
pa.BskyAgent = void 0;
const m1 = Qt;
class Ls extends m1.AtpAgent {
  clone() {
    if (this.constructor === Ls) {
      const e = new Ls(this.sessionManager);
      return this.copyInto(e);
    }
    throw new TypeError("Cannot clone a subclass of BskyAgent");
  }
}
pa.BskyAgent = Ls;
(function(t) {
  var e = L && L.__createBinding || (Object.create ? function(P, $, C, T) {
    T === void 0 && (T = C);
    var w = Object.getOwnPropertyDescriptor($, C);
    (!w || ("get" in w ? !$.__esModule : w.writable || w.configurable)) && (w = { enumerable: !0, get: function() {
      return $[C];
    } }), Object.defineProperty(P, T, w);
  } : function(P, $, C, T) {
    T === void 0 && (T = C), P[T] = $[C];
  }), r = L && L.__exportStar || function(P, $) {
    for (var C in P) C !== "default" && !Object.prototype.hasOwnProperty.call($, C) && e($, P, C);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), t.lexicons = t.default = t.BskyAgent = t.CredentialSession = t.AtpAgent = t.Agent = t.DEFAULT_LABEL_SETTINGS = t.LABELS = t.schemas = t.parseLanguage = t.jsonStringToLex = t.jsonToLex = t.stringifyLex = t.lexToJson = t.BlobRef = t.AtUri = void 0;
  const n = Hr, s = O;
  var u = Jr;
  Object.defineProperty(t, "AtUri", { enumerable: !0, get: function() {
    return u.AtUri;
  } });
  var c = Hr;
  Object.defineProperty(t, "BlobRef", { enumerable: !0, get: function() {
    return c.BlobRef;
  } }), Object.defineProperty(t, "lexToJson", { enumerable: !0, get: function() {
    return c.lexToJson;
  } }), Object.defineProperty(t, "stringifyLex", { enumerable: !0, get: function() {
    return c.stringifyLex;
  } }), Object.defineProperty(t, "jsonToLex", { enumerable: !0, get: function() {
    return c.jsonToLex;
  } }), Object.defineProperty(t, "jsonStringToLex", { enumerable: !0, get: function() {
    return c.jsonStringToLex;
  } });
  var l = Bt;
  Object.defineProperty(t, "parseLanguage", { enumerable: !0, get: function() {
    return l.parseLanguage;
  } }), r(Np, t), r(Sn, t), r(no, t), r(o, t);
  var f = O;
  Object.defineProperty(t, "schemas", { enumerable: !0, get: function() {
    return f.schemas;
  } }), r(hi, t), r(oa, t), r(an, t), r(ft, t), r(Du, t), r(je, t), r(ua, t);
  var p = _r;
  Object.defineProperty(t, "LABELS", { enumerable: !0, get: function() {
    return p.LABELS;
  } }), Object.defineProperty(t, "DEFAULT_LABEL_SETTINGS", { enumerable: !0, get: function() {
    return p.DEFAULT_LABEL_SETTINGS;
  } });
  var m = Zn;
  Object.defineProperty(t, "Agent", { enumerable: !0, get: function() {
    return m.Agent;
  } });
  var A = Qt;
  Object.defineProperty(t, "AtpAgent", { enumerable: !0, get: function() {
    return A.AtpAgent;
  } });
  var E = Qt;
  Object.defineProperty(t, "CredentialSession", { enumerable: !0, get: function() {
    return E.CredentialSession;
  } });
  var v = pa;
  Object.defineProperty(t, "BskyAgent", { enumerable: !0, get: function() {
    return v.BskyAgent;
  } });
  var k = Qt;
  Object.defineProperty(t, "default", { enumerable: !0, get: function() {
    return k.AtpAgent;
  } }), t.lexicons = new n.Lexicons(s.lexicons);
})(Zr);
const b1 = "_container_1vf6u_1", h1 = "_statsBar_1vf6u_6", E1 = "_statItem_1vf6u_16", g1 = "_icon_1vf6u_23", x1 = "_errorText_1vf6u_28", R1 = "_loadingText_1vf6u_28", A1 = "_commentsTitle_1vf6u_32", v1 = "_replyText_1vf6u_38", T1 = "_divider_1vf6u_43", _1 = "_commentsList_1vf6u_47", C1 = "_showMoreButton_1vf6u_54", w1 = "_commentContainer_1vf6u_61", S1 = "_commentContent_1vf6u_66", L1 = "_authorLink_1vf6u_73", k1 = "_avatar_1vf6u_85", B1 = "_authorName_1vf6u_93", D1 = "_handle_1vf6u_111", P1 = "_repliesContainer_1vf6u_115", U1 = "_actionsContainer_1vf6u_120", K1 = "_actionsRow_1vf6u_132", ae = {
  container: b1,
  statsBar: h1,
  statItem: E1,
  icon: g1,
  errorText: x1,
  loadingText: R1,
  commentsTitle: A1,
  replyText: v1,
  divider: T1,
  commentsList: _1,
  showMoreButton: C1,
  commentContainer: w1,
  commentContent: S1,
  authorLink: L1,
  avatar: k1,
  authorName: B1,
  handle: D1,
  repliesContainer: P1,
  actionsContainer: U1,
  actionsRow: K1
}, j1 = (t) => {
  if (console.log("formatting uri", t), !t.startsWith("at://") && t.includes("bsky.app/profile/")) {
    const e = t.match(/profile\/([\w.]+)\/post\/([\w]+)/);
    if (e) {
      const [, r, n] = e;
      return console.log("reformatted uri", `at://${r}/app.bsky.feed.post/${n}`), `at://${r}/app.bsky.feed.post/${n}`;
    }
  }
  return console.log("reformatted uri", t), t;
}, V1 = ({ uri: t, author: e }) => {
  const [r, n] = as(null), [s, u] = as(null), [c, l] = as(null), [f, p] = as(3);
  if ($u(() => {
    if (t) {
      n(t);
      return;
    }
    e && (async () => {
      const C = window.location.href, T = `https://public.api.bsky.app/xrpc/app.bsky.feed.searchPosts?q=*&url=${encodeURIComponent(C)}&author=${e}`;
      try {
        const K = await (await fetch(T)).json();
        if (K.posts && K.posts.length > 0) {
          const re = K.posts[0];
          n(re.uri);
        } else
          l("No matching post found");
      } catch {
        l("Error fetching post");
      }
    })();
  }, [t, e]), $u(() => {
    r && (async () => {
      try {
        const C = await I1(r);
        u(C);
      } catch {
        l("Error loading comments");
      }
    })();
  }, [r]), !r) return null;
  const [, , m, A, E] = r.split("/"), v = `https://bsky.app/profile/${m}/post/${E}`;
  if (c)
    return /* @__PURE__ */ G.jsx("p", { className: ae.errorText, children: c });
  if (!s)
    return /* @__PURE__ */ G.jsx("p", { className: ae.loadingText, children: "Loading comments..." });
  if (!s.replies || s.replies.length === 0)
    return /* @__PURE__ */ G.jsx("div", {});
  const k = () => {
    p(($) => $ + 5);
  }, P = s.replies.sort(dm);
  return /* @__PURE__ */ G.jsxs("div", { className: ae.container, children: [
    /* @__PURE__ */ G.jsx("a", { href: v, target: "_blank", rel: "noreferrer noopener", children: /* @__PURE__ */ G.jsxs("p", { className: ae.statsBar, children: [
      /* @__PURE__ */ G.jsxs("span", { className: ae.statItem, children: [
        /* @__PURE__ */ G.jsx("svg", { className: ae.icon, xmlns: "http://www.w3.org/2000/svg", fill: "pink", viewBox: "0 0 24 24", "stroke-width": "1.5", stroke: "pink", color: "pink", children: /* @__PURE__ */ G.jsx("path", { "stroke-linecap": "round", "stroke-linejoin": "round", d: "M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" }) }),
        /* @__PURE__ */ G.jsxs("span", { children: [
          s.post.likeCount ?? 0,
          " likes"
        ] })
      ] }),
      /* @__PURE__ */ G.jsxs("span", { className: ae.statItem, children: [
        /* @__PURE__ */ G.jsx("svg", { className: ae.icon, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", "stroke-width": "1.5", stroke: "green", children: /* @__PURE__ */ G.jsx("path", { "stroke-linecap": "round", "stroke-linejoin": "round", d: "M19.5 12c0-1.232-.046-2.453-.138-3.662a4.006 4.006 0 0 0-3.7-3.7 48.678 48.678 0 0 0-7.324 0 4.006 4.006 0 0 0-3.7 3.7c-.017.22-.032.441-.046.662M19.5 12l3-3m-3 3-3-3m-12 3c0 1.232.046 2.453.138 3.662a4.006 4.006 0 0 0 3.7 3.7 48.656 48.656 0 0 0 7.324 0 4.006 4.006 0 0 0 3.7-3.7c.017-.22.032-.441.046-.662M4.5 12l3 3m-3-3-3 3" }) }),
        /* @__PURE__ */ G.jsxs("span", { children: [
          s.post.repostCount ?? 0,
          " reposts"
        ] })
      ] }),
      /* @__PURE__ */ G.jsxs("span", { className: ae.statItem, children: [
        /* @__PURE__ */ G.jsx("svg", { className: ae.icon, xmlns: "http://www.w3.org/2000/svg", fill: "#7FBADC", viewBox: "0 0 24 24", "stroke-width": "1.5", stroke: "#7FBADC", children: /* @__PURE__ */ G.jsx("path", { "stroke-linecap": "round", "stroke-linejoin": "round", d: "M12 20.25c4.97 0 9-3.694 9-8.25s-4.03-8.25-9-8.25S3 7.444 3 12c0 2.104.859 4.023 2.273 5.48.432.447.74 1.04.586 1.641a4.483 4.483 0 0 1-.923 1.785A5.969 5.969 0 0 0 6 21c1.282 0 2.47-.402 3.445-1.087.81.22 1.668.337 2.555.337Z" }) }),
        /* @__PURE__ */ G.jsxs("span", { children: [
          s.post.replyCount ?? 0,
          " replies"
        ] })
      ] })
    ] }) }),
    /* @__PURE__ */ G.jsx("h2", { className: ae.commentsTitle, children: "Comments" }),
    /* @__PURE__ */ G.jsxs("p", { className: ae.replyText, children: [
      "Reply on Bluesky",
      " ",
      /* @__PURE__ */ G.jsx(
        "a",
        {
          href: v,
          target: "_blank",
          rel: "noreferrer noopener",
          children: "here"
        }
      ),
      " ",
      "to join the conversation."
    ] }),
    /* @__PURE__ */ G.jsx("hr", { className: ae.divider }),
    /* @__PURE__ */ G.jsxs("div", { className: ae.commentsList, children: [
      P.slice(0, f).map(($) => Zr.AppBskyFeedDefs.isThreadViewPost($) ? /* @__PURE__ */ G.jsx(pm, { comment: $ }, $.post.uri) : null),
      f < P.length && /* @__PURE__ */ G.jsx("button", { onClick: k, className: ae.showMoreButton, children: "Show more comments" })
    ] })
  ] });
}, pm = ({ comment: t }) => {
  const e = t.post.author, r = ae.avatar;
  return Zr.AppBskyFeedPost.isRecord(t.post.record) ? /* @__PURE__ */ G.jsxs("div", { className: ae.commentContainer, children: [
    /* @__PURE__ */ G.jsxs("div", { className: ae.commentContent, children: [
      /* @__PURE__ */ G.jsxs(
        "a",
        {
          className: ae.authorLink,
          href: `https://bsky.app/profile/${e.did}`,
          target: "_blank",
          rel: "noreferrer noopener",
          children: [
            e.avatar ? /* @__PURE__ */ G.jsx(
              "img",
              {
                src: t.post.author.avatar,
                alt: "avatar",
                className: r
              }
            ) : /* @__PURE__ */ G.jsx("div", { className: r }),
            /* @__PURE__ */ G.jsxs("p", { className: ae.authorName, children: [
              e.displayName ?? e.handle,
              " ",
              /* @__PURE__ */ G.jsxs("span", { className: ae.handle, children: [
                "@",
                e.handle
              ] })
            ] })
          ]
        }
      ),
      /* @__PURE__ */ G.jsxs(
        "a",
        {
          href: `https://bsky.app/profile/${e.did}/post/${t.post.uri.split("/").pop()}`,
          target: "_blank",
          rel: "noreferrer noopener",
          children: [
            /* @__PURE__ */ G.jsx("p", { children: t.post.record.text }),
            /* @__PURE__ */ G.jsx(O1, { post: t.post })
          ]
        }
      )
    ] }),
    t.replies && t.replies.length > 0 && /* @__PURE__ */ G.jsx("div", { className: ae.repliesContainer, children: t.replies.sort(dm).map((n) => Zr.AppBskyFeedDefs.isThreadViewPost(n) ? /* @__PURE__ */ G.jsx(pm, { comment: n }, n.post.uri) : null) })
  ] }) : null;
}, O1 = ({ post: t }) => /* @__PURE__ */ G.jsxs("div", { className: ae.actionsContainer, children: [
  /* @__PURE__ */ G.jsxs("div", { className: ae.actionsRow, children: [
    /* @__PURE__ */ G.jsx("svg", { className: ae.icon, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", "stroke-width": "1.5", stroke: "currentColor", children: /* @__PURE__ */ G.jsx("path", { "stroke-linecap": "round", "stroke-linejoin": "round", d: "M12 20.25c4.97 0 9-3.694 9-8.25s-4.03-8.25-9-8.25S3 7.444 3 12c0 2.104.859 4.023 2.273 5.48.432.447.74 1.04.586 1.641a4.483 4.483 0 0 1-.923 1.785A5.969 5.969 0 0 0 6 21c1.282 0 2.47-.402 3.445-1.087.81.22 1.668.337 2.555.337Z" }) }),
    /* @__PURE__ */ G.jsx("p", { className: "text-xs", children: t.replyCount ?? 0 })
  ] }),
  /* @__PURE__ */ G.jsxs("div", { className: ae.actionsRow, children: [
    /* @__PURE__ */ G.jsx("svg", { className: ae.icon, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", "stroke-width": "1.5", stroke: "currentColor", children: /* @__PURE__ */ G.jsx("path", { "stroke-linecap": "round", "stroke-linejoin": "round", d: "M19.5 12c0-1.232-.046-2.453-.138-3.662a4.006 4.006 0 0 0-3.7-3.7 48.678 48.678 0 0 0-7.324 0 4.006 4.006 0 0 0-3.7 3.7c-.017.22-.032.441-.046.662M19.5 12l3-3m-3 3-3-3m-12 3c0 1.232.046 2.453.138 3.662a4.006 4.006 0 0 0 3.7 3.7 48.656 48.656 0 0 0 7.324 0 4.006 4.006 0 0 0 3.7-3.7c.017-.22.032-.441.046-.662M4.5 12l3 3m-3-3-3 3" }) }),
    /* @__PURE__ */ G.jsx("p", { className: "text-xs", children: t.repostCount ?? 0 })
  ] }),
  /* @__PURE__ */ G.jsxs("div", { className: ae.actionsRow, children: [
    /* @__PURE__ */ G.jsx("svg", { className: ae.icon, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", "stroke-width": "1.5", stroke: "currentColor", children: /* @__PURE__ */ G.jsx("path", { "stroke-linecap": "round", "stroke-linejoin": "round", d: "M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" }) }),
    /* @__PURE__ */ G.jsx("p", { className: "text-xs", children: t.likeCount ?? 0 })
  ] })
] }), I1 = async (t) => {
  const e = j1(t), r = new URLSearchParams({ uri: e }), n = await fetch(
    "https://public.api.bsky.app/xrpc/app.bsky.feed.getPostThread?" + r.toString(),
    {
      method: "GET",
      headers: {
        Accept: "application/json"
      },
      cache: "no-store"
    }
  );
  if (!n.ok)
    throw console.error(await n.text()), new Error("Failed to fetch post thread");
  const s = await n.json();
  if (!Zr.AppBskyFeedDefs.isThreadViewPost(s.thread))
    throw new Error("Could not find thread");
  return s.thread;
}, dm = (t, e) => !Zr.AppBskyFeedDefs.isThreadViewPost(t) || !Zr.AppBskyFeedDefs.isThreadViewPost(e) ? 0 : (e.post.likeCount ?? 0) - (t.post.likeCount ?? 0);
window.initBlueskyComments = (t, e) => {
  const r = document.getElementById(t);
  r && xn.createRoot(r).render(
    /* @__PURE__ */ G.jsx($a.StrictMode, { children: /* @__PURE__ */ G.jsx(
      V1,
      {
        uri: e.uri,
        author: e.author
      }
    ) })
  );
};
//# sourceMappingURL=bluesky-comments.es.js.map
